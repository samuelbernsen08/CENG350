
Programming_Assignment_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e74  08009e74  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e7c  08009e7c  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e80  08009e80  00019e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08009e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018f0  200001b0  0800a034  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa0  0800a034  00021aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029355  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f9f  00000000  00000000  00049535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  0004e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d8  00000000  00000000  000507c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6eb  00000000  00000000  000528a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ede  00000000  00000000  0007ef8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010aaf0  00000000  00000000  000a6e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ad8  00000000  00000000  001b19ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ccc 	.word	0x08009ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	08009ccc 	.word	0x08009ccc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <vApplicationGetIdleTaskMemory+0x2c>)
 800094c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <vApplicationGetIdleTaskMemory+0x30>)
 8000952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	200001cc 	.word	0x200001cc
 800096c:	20000280 	.word	0x20000280

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b098      	sub	sp, #96	; 0x60
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f001 fc3c 	bl	80021f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f8a1 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 fa6b 	bl	8000e58 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000982:	f000 f8ff 	bl	8000b84 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000986:	f000 f935 	bl	8000bf4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800098a:	f000 f973 	bl	8000c74 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800098e:	f000 f997 	bl	8000cc0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000992:	f000 f9d3 	bl	8000d3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000996:	f000 fa01 	bl	8000d9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800099a:	f000 fa2f 	bl	8000dfc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,mag1,sizeof(mag1),1000);
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	2230      	movs	r2, #48	; 0x30
 80009a4:	4938      	ldr	r1, [pc, #224]	; (8000a88 <main+0x118>)
 80009a6:	4839      	ldr	r0, [pc, #228]	; (8000a8c <main+0x11c>)
 80009a8:	f005 f8d2 	bl	8005b50 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,mag2,sizeof(mag2),1000);
 80009ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b0:	222f      	movs	r2, #47	; 0x2f
 80009b2:	4937      	ldr	r1, [pc, #220]	; (8000a90 <main+0x120>)
 80009b4:	4835      	ldr	r0, [pc, #212]	; (8000a8c <main+0x11c>)
 80009b6:	f005 f8cb 	bl	8005b50 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 80009ba:	f001 fa7b 	bl	8001eb4 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,mag3,sizeof(mag3),1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	4933      	ldr	r1, [pc, #204]	; (8000a94 <main+0x124>)
 80009c6:	4831      	ldr	r0, [pc, #196]	; (8000a8c <main+0x11c>)
 80009c8:	f005 f8c2 	bl	8005b50 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1,mag1_1,sizeof(mag1_1),1000);
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	222d      	movs	r2, #45	; 0x2d
 80009d2:	4931      	ldr	r1, [pc, #196]	; (8000a98 <main+0x128>)
 80009d4:	482d      	ldr	r0, [pc, #180]	; (8000a8c <main+0x11c>)
 80009d6:	f005 f8bb 	bl	8005b50 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,mag2_2,sizeof(mag2_2),1000);
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	222d      	movs	r2, #45	; 0x2d
 80009e0:	492e      	ldr	r1, [pc, #184]	; (8000a9c <main+0x12c>)
 80009e2:	482a      	ldr	r0, [pc, #168]	; (8000a8c <main+0x11c>)
 80009e4:	f005 f8b4 	bl	8005b50 <HAL_UART_Transmit>
  BSP_PSENSOR_Init();
 80009e8:	f001 fa36 	bl	8001e58 <BSP_PSENSOR_Init>
  HAL_UART_Transmit(&huart1,mag3_3,sizeof(mag3_3),1000);
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	222e      	movs	r2, #46	; 0x2e
 80009f2:	492b      	ldr	r1, [pc, #172]	; (8000aa0 <main+0x130>)
 80009f4:	4825      	ldr	r0, [pc, #148]	; (8000a8c <main+0x11c>)
 80009f6:	f005 f8ab 	bl	8005b50 <HAL_UART_Transmit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem */
  osSemaphoreDef(binSem);
 80009fa:	2300      	movs	r3, #0
 80009fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80009fe:	2300      	movs	r3, #0
 8000a00:	65fb      	str	r3, [r7, #92]	; 0x5c
  binSemHandle = osSemaphoreCreate(osSemaphore(binSem), 1);
 8000a02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f006 f8e2 	bl	8006bd2 <osSemaphoreCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a24      	ldr	r2, [pc, #144]	; (8000aa4 <main+0x134>)
 8000a12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of pressureTask */
  osThreadDef(pressureTask, StartPressureTask, osPriorityNormal, 0, 128);
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <main+0x138>)
 8000a16:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a1a:	461d      	mov	r5, r3
 8000a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureTaskHandle = osThreadCreate(osThread(pressureTask), NULL);
 8000a28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 f86f 	bl	8006b12 <osThreadCreate>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <main+0x13c>)
 8000a38:	6013      	str	r3, [r2, #0]

  /* definition and creation of tempTask */
  osThreadDef(tempTask, StartTempTask, osPriorityNormal, 0, 128);
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <main+0x140>)
 8000a3c:	f107 0420 	add.w	r4, r7, #32
 8000a40:	461d      	mov	r5, r3
 8000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tempTaskHandle = osThreadCreate(osThread(tempTask), NULL);
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 f85c 	bl	8006b12 <osThreadCreate>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <main+0x144>)
 8000a5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, StartButtonTask, osPriorityAboveNormal, 0, 128);
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <main+0x148>)
 8000a62:	1d3c      	adds	r4, r7, #4
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f006 f84b 	bl	8006b12 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <main+0x14c>)
 8000a80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a82:	f006 f83f 	bl	8006b04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <main+0x116>
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	200005b4 	.word	0x200005b4
 8000a90:	20000030 	.word	0x20000030
 8000a94:	20000060 	.word	0x20000060
 8000a98:	20000090 	.word	0x20000090
 8000a9c:	200000c0 	.word	0x200000c0
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	20000bd4 	.word	0x20000bd4
 8000aa8:	08009d0c 	.word	0x08009d0c
 8000aac:	20000bc8 	.word	0x20000bc8
 8000ab0:	08009d28 	.word	0x08009d28
 8000ab4:	20000bcc 	.word	0x20000bcc
 8000ab8:	08009d44 	.word	0x08009d44
 8000abc:	20000bd0 	.word	0x20000bd0

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	; 0x58
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2244      	movs	r2, #68	; 0x44
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f008 fbe6 	bl	80092a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae6:	f003 f851 	bl	8003b8c <HAL_PWREx_ControlVoltageScaling>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af0:	f000 fc5c 	bl	80013ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af4:	f003 f82c 	bl	8003b50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemClock_Config+0xc0>)
 8000afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemClock_Config+0xc0>)
 8000b00:	f023 0318 	bic.w	r3, r3, #24
 8000b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b08:	2314      	movs	r3, #20
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b20:	2301      	movs	r3, #1
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b28:	2328      	movs	r3, #40	; 0x28
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 f947 	bl	8003dd0 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fc30 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2303      	movs	r3, #3
 8000b52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2104      	movs	r1, #4
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 fd0f 	bl	8004588 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b70:	f000 fc1c 	bl	80013ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b74:	f004 fa48 	bl	8005008 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b78:	bf00      	nop
 8000b7a:	3758      	adds	r7, #88	; 0x58
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000

08000b84 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <MX_DFSDM1_Init+0x6c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_DFSDM1_Init+0x68>)
 8000bda:	f001 fc49 	bl	8002470 <HAL_DFSDM_ChannelInit>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000be4:	f000 fbe2 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000480 	.word	0x20000480
 8000bf0:	40016020 	.word	0x40016020

08000bf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <MX_I2C2_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <MX_I2C2_Init+0x7c>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c30:	f002 f81b 	bl	8002c6a <HAL_I2C_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 fbb7 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c42:	f002 fda5 	bl	8003790 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 fbae 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c54:	f002 fde7 	bl	8003826 <HAL_I2CEx_ConfigDigitalFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fba5 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200004b8 	.word	0x200004b8
 8000c6c:	40005800 	.word	0x40005800
 8000c70:	10909cec 	.word	0x10909cec

08000c74 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c92:	2217      	movs	r2, #23
 8000c94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000ca4:	f002 ffd8 	bl	8003c58 <HAL_QSPI_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cae:	f000 fb7d 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000050c 	.word	0x2000050c
 8000cbc:	a0001000 	.word	0xa0001000

08000cc0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI3_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cda:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cde:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d20:	f004 fb54 	bl	80053cc <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fb3f 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000550 	.word	0x20000550
 8000d38:	40003c00 	.word	0x40003c00

08000d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART1_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART1_UART_Init+0x58>)
 8000d80:	f004 fe98 	bl	8005ab4 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f000 fb0f 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200005b4 	.word	0x200005b4
 8000d98:	40013800 	.word	0x40013800

08000d9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <MX_USART3_UART_Init+0x5c>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USART3_UART_Init+0x58>)
 8000de0:	f004 fe68 	bl	8005ab4 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 fadf 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000638 	.word	0x20000638
 8000df8:	40004800 	.word	0x40004800

08000dfc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	f002 fd3d 	bl	80038be <HAL_PCD_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 faaf 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200006bc 	.word	0x200006bc

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4bbd      	ldr	r3, [pc, #756]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4abc      	ldr	r2, [pc, #752]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4bba      	ldr	r3, [pc, #744]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4bb7      	ldr	r3, [pc, #732]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4ab6      	ldr	r2, [pc, #728]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4bb4      	ldr	r3, [pc, #720]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4bb1      	ldr	r3, [pc, #708]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4ab0      	ldr	r2, [pc, #704]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4bae      	ldr	r3, [pc, #696]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4bab      	ldr	r3, [pc, #684]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4aaa      	ldr	r2, [pc, #680]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4ba8      	ldr	r3, [pc, #672]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4ba5      	ldr	r3, [pc, #660]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4aa4      	ldr	r2, [pc, #656]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4ba2      	ldr	r3, [pc, #648]	; (8001164 <MX_GPIO_Init+0x30c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000eec:	489e      	ldr	r0, [pc, #632]	; (8001168 <MX_GPIO_Init+0x310>)
 8000eee:	f001 fe81 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f248 1104 	movw	r1, #33028	; 0x8104
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f001 fe7a 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000f00:	2200      	movs	r2, #0
 8000f02:	f24d 0114 	movw	r1, #53268	; 0xd014
 8000f06:	4899      	ldr	r0, [pc, #612]	; (800116c <MX_GPIO_Init+0x314>)
 8000f08:	f001 fe74 	bl	8002bf4 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f12:	4897      	ldr	r0, [pc, #604]	; (8001170 <MX_GPIO_Init+0x318>)
 8000f14:	f001 fe6e 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	4894      	ldr	r0, [pc, #592]	; (8001170 <MX_GPIO_Init+0x318>)
 8000f20:	f001 fe68 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f2a:	4892      	ldr	r0, [pc, #584]	; (8001174 <MX_GPIO_Init+0x31c>)
 8000f2c:	f001 fe62 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2120      	movs	r1, #32
 8000f34:	488d      	ldr	r0, [pc, #564]	; (800116c <MX_GPIO_Init+0x314>)
 8000f36:	f001 fe5d 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	488a      	ldr	r0, [pc, #552]	; (8001168 <MX_GPIO_Init+0x310>)
 8000f40:	f001 fe58 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f44:	f240 1315 	movw	r3, #277	; 0x115
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4882      	ldr	r0, [pc, #520]	; (8001168 <MX_GPIO_Init+0x310>)
 8000f5e:	f001 fb93 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f62:	236a      	movs	r3, #106	; 0x6a
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	487c      	ldr	r0, [pc, #496]	; (8001168 <MX_GPIO_Init+0x310>)
 8000f78:	f001 fb86 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_button_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f7c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4878      	ldr	r0, [pc, #480]	; (8001174 <MX_GPIO_Init+0x31c>)
 8000f94:	f001 fb78 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f98:	233f      	movs	r3, #63	; 0x3f
 8000f9a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4872      	ldr	r0, [pc, #456]	; (8001174 <MX_GPIO_Init+0x31c>)
 8000fac:	f001 fb6c 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 fb5b 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000fd2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f001 fb4b 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001002:	2301      	movs	r3, #1
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 fb3a 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001014:	2310      	movs	r3, #16
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001018:	230b      	movs	r3, #11
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f001 fb2d 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800102e:	23e0      	movs	r3, #224	; 0xe0
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103e:	2305      	movs	r3, #5
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f001 fb1c 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4841      	ldr	r0, [pc, #260]	; (800116c <MX_GPIO_Init+0x314>)
 8001066:	f001 fb0f 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800106a:	2302      	movs	r3, #2
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800106e:	230b      	movs	r3, #11
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	483b      	ldr	r0, [pc, #236]	; (800116c <MX_GPIO_Init+0x314>)
 800107e:	f001 fb03 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001082:	f24d 0334 	movw	r3, #53300	; 0xd034
 8001086:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4834      	ldr	r0, [pc, #208]	; (800116c <MX_GPIO_Init+0x314>)
 800109c:	f001 faf4 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010a0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010a4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	482e      	ldr	r0, [pc, #184]	; (8001170 <MX_GPIO_Init+0x318>)
 80010b8:	f001 fae6 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010bc:	f243 0381 	movw	r3, #12417	; 0x3081
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4826      	ldr	r0, [pc, #152]	; (8001170 <MX_GPIO_Init+0x318>)
 80010d6:	f001 fad7 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4820      	ldr	r0, [pc, #128]	; (8001174 <MX_GPIO_Init+0x31c>)
 80010f4:	f001 fac8 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001108:	2305      	movs	r3, #5
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <MX_GPIO_Init+0x318>)
 8001114:	f001 fab8 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001118:	2378      	movs	r3, #120	; 0x78
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001128:	2307      	movs	r3, #7
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <MX_GPIO_Init+0x318>)
 8001134:	f001 faa8 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113e:	2312      	movs	r3, #18
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114a:	2304      	movs	r3, #4
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_GPIO_Init+0x314>)
 8001156:	f001 fa97 	bl	8002688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2105      	movs	r1, #5
 800115e:	2017      	movs	r0, #23
 8001160:	e00a      	b.n	8001178 <MX_GPIO_Init+0x320>
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	48001000 	.word	0x48001000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000c00 	.word	0x48000c00
 8001174:	48000800 	.word	0x48000800
 8001178:	f001 f950 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800117c:	2017      	movs	r0, #23
 800117e:	f001 f969 	bl	8002454 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2105      	movs	r1, #5
 8001186:	2028      	movs	r0, #40	; 0x28
 8001188:	f001 f948 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f001 f961 	bl	8002454 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop

0800119c <StartPressureTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPressureTask */
void StartPressureTask(void const * argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
	  //osSemaphoreWait(presSemHandle, osWaitForever);

	  //uint8_t Test[] = "Acquired Semaphore in Pressure Task !!!\r\n"; // Data to send
	  //HAL_UART_Transmit(&huart1, Test, sizeof(Test), 10); // Sending in normal mode
	  //osDelay(1);
	  if (hits % 2 == 1)
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <StartPressureTask+0xc0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	bfb8      	it	lt
 80011b0:	425b      	neglt	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d1f6      	bne.n	80011a4 <StartPressureTask+0x8>
	  {
		  temp_value = BSP_TSENSOR_ReadTemp();
 80011b6:	f000 fe99 	bl	8001eec <BSP_TSENSOR_ReadTemp>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <StartPressureTask+0xc4>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
		  int tmpInt1 = temp_value;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <StartPressureTask+0xc4>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	617b      	str	r3, [r7, #20]
		  float tmpFrac = temp_value - tmpInt1;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <StartPressureTask+0xc4>)
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc7 7a04 	vstr	s15, [r7, #16]
		  int tmpInt2 = trunc(tmpFrac * 100);
 80011ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001264 <StartPressureTask+0xc8>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f99c 	bl	8000538 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	ec43 2b10 	vmov	d0, r2, r3
 8001208:	f008 fd2e 	bl	8009c68 <trunc>
 800120c:	ec53 2b10 	vmov	r2, r3, d0
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff f9e8 	bl	80005e8 <__aeabi_d2iz>
 8001218:	4603      	mov	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

		  osSemaphoreWait(binSemHandle, osWaitForever);
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <StartPressureTask+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	4618      	mov	r0, r3
 8001226:	f005 fd07 	bl	8006c38 <osSemaphoreWait>
		  //uint8_t Test[] = "Acquired Semaphore in Temp Task !!!\r\n"; // Data to send
		  //HAL_UART_Transmit(&huart1, Test, sizeof(Test), 10); // Sending in normal mode
		  snprintf(str_tmp,100,"TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <StartPressureTask+0xd0>)
 8001232:	2164      	movs	r1, #100	; 0x64
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <StartPressureTask+0xd4>)
 8001236:	f008 f949 	bl	80094cc <sniprintf>
		  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp, sizeof(str_tmp),1000);
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	490b      	ldr	r1, [pc, #44]	; (8001270 <StartPressureTask+0xd4>)
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <StartPressureTask+0xd8>)
 8001244:	f004 fc84 	bl	8005b50 <HAL_UART_Transmit>

		  //HAL_Delay(1000);
		  osSemaphoreRelease(binSemHandle);
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <StartPressureTask+0xcc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fd41 	bl	8006cd4 <osSemaphoreRelease>
		  osDelay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f005 fca8 	bl	8006baa <osDelay>
	  if (hits % 2 == 1)
 800125a:	e7a3      	b.n	80011a4 <StartPressureTask+0x8>
 800125c:	20000bd8 	.word	0x20000bd8
 8001260:	20000bdc 	.word	0x20000bdc
 8001264:	42c80000 	.word	0x42c80000
 8001268:	20000bd4 	.word	0x20000bd4
 800126c:	08009d60 	.word	0x08009d60
 8001270:	20000be0 	.word	0x20000be0
 8001274:	200005b4 	.word	0x200005b4

08001278 <StartTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTempTask */
void StartTempTask(void const * argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //osSemaphoreWait(tempSemHandle, osWaitForever);
	  //osDelay(1);
	  if (hits % 2 == 1)
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <StartTempTask+0xc0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	bfb8      	it	lt
 800128c:	425b      	neglt	r3, r3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d1f6      	bne.n	8001280 <StartTempTask+0x8>
	  {
		  pres_value = BSP_PSENSOR_ReadPressure();
 8001292:	f000 fe01 	bl	8001e98 <BSP_PSENSOR_ReadPressure>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <StartTempTask+0xc4>)
 800129c:	edc3 7a00 	vstr	s15, [r3]
		  int presInt1_1 = pres_value;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <StartTempTask+0xc4>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	617b      	str	r3, [r7, #20]
		  float presFrac = pres_value - presInt1_1;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <StartTempTask+0xc4>)
 80012b2:	ed93 7a00 	vldr	s14, [r3]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	edc7 7a04 	vstr	s15, [r7, #16]
		  int presInt2_2 = trunc(presFrac * 100);
 80012c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001340 <StartTempTask+0xc8>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	ee17 0a90 	vmov	r0, s15
 80012d8:	f7ff f92e 	bl	8000538 <__aeabi_f2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	ec43 2b10 	vmov	d0, r2, r3
 80012e4:	f008 fcc0 	bl	8009c68 <trunc>
 80012e8:	ec53 2b10 	vmov	r2, r3, d0
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff f97a 	bl	80005e8 <__aeabi_d2iz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]

		  osSemaphoreWait(binSemHandle, osWaitForever);
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <StartTempTask+0xcc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	4618      	mov	r0, r3
 8001302:	f005 fc99 	bl	8006c38 <osSemaphoreWait>
		  //uint8_t msg[] = "Acquired Semaphore in Pressure Task !!!\r\n"; // Data to send
		  //HAL_UART_Transmit(&huart1, msg, sizeof(msg), 10); // Sending in normal mode
		  snprintf(str_pres,100,"Pressure = %d.%02d\n\r", presInt1_1, presInt2_2);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <StartTempTask+0xd0>)
 800130e:	2164      	movs	r1, #100	; 0x64
 8001310:	480e      	ldr	r0, [pc, #56]	; (800134c <StartTempTask+0xd4>)
 8001312:	f008 f8db 	bl	80094cc <sniprintf>
		  HAL_UART_Transmit(&huart1,( uint8_t * )str_pres, sizeof(str_pres),1000);
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	2264      	movs	r2, #100	; 0x64
 800131c:	490b      	ldr	r1, [pc, #44]	; (800134c <StartTempTask+0xd4>)
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <StartTempTask+0xd8>)
 8001320:	f004 fc16 	bl	8005b50 <HAL_UART_Transmit>
		  osSemaphoreRelease(binSemHandle);
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <StartTempTask+0xcc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f005 fcd3 	bl	8006cd4 <osSemaphoreRelease>
		  osDelay(2000);
 800132e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001332:	f005 fc3a 	bl	8006baa <osDelay>
	  if (hits % 2 == 1)
 8001336:	e7a3      	b.n	8001280 <StartTempTask+0x8>
 8001338:	20000bd8 	.word	0x20000bd8
 800133c:	20000c44 	.word	0x20000c44
 8001340:	42c80000 	.word	0x42c80000
 8001344:	20000bd4 	.word	0x20000bd4
 8001348:	08009d78 	.word	0x08009d78
 800134c:	20000c48 	.word	0x20000c48
 8001350:	200005b4 	.word	0x200005b4

08001354 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	//osSemaphoreWait(tempSemHandle, osWaitForever);
	//osSemaphoreWait(presSemHandle, osWaitForever);
	//uint8_t msg[] = "Acquired Semaphores in Button Task !!!\r\n"; // Data to send
	//HAL_UART_Transmit(&huart1, msg, sizeof(msg), 10); // Sending in normal mode
	//HAL_Delay(1000);
	osDelay(100);
 800135c:	2064      	movs	r0, #100	; 0x64
 800135e:	f005 fc24 	bl	8006baa <osDelay>
	if (HAL_GPIO_ReadPin(B1_button_GPIO_Port, B1_button_Pin) == 0)
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <StartButtonTask+0x2c>)
 8001368:	f001 fc2c 	bl	8002bc4 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f4      	bne.n	800135c <StartButtonTask+0x8>
	{
		hits = hits + 1;
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <StartButtonTask+0x30>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a02      	ldr	r2, [pc, #8]	; (8001384 <StartButtonTask+0x30>)
 800137a:	6013      	str	r3, [r2, #0]
	osDelay(100);
 800137c:	e7ee      	b.n	800135c <StartButtonTask+0x8>
 800137e:	bf00      	nop
 8001380:	48000800 	.word	0x48000800
 8001384:	20000bd8 	.word	0x20000bd8

08001388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800139a:	f000 ff43 	bl	8002224 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_MspInit+0x4c>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_MspInit+0x4c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_MspInit+0x4c>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_MspInit+0x4c>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_MspInit+0x4c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	210f      	movs	r1, #15
 80013f2:	f06f 0001 	mvn.w	r0, #1
 80013f6:	f001 f811 	bl	800241c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0ac      	sub	sp, #176	; 0xb0
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2288      	movs	r2, #136	; 0x88
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f007 ff39 	bl	80092a0 <memset>
  if(DFSDM1_Init == 0)
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d142      	bne.n	80014bc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4618      	mov	r0, r3
 8001448:	f003 faf4 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001452:	f7ff ffab 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800145c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001460:	6613      	str	r3, [r2, #96]	; 0x60
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001486:	f44f 7320 	mov.w	r3, #640	; 0x280
 800148a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014a0:	2306      	movs	r3, #6
 80014a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80014ae:	f001 f8eb 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a02      	ldr	r2, [pc, #8]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014ba:	6013      	str	r3, [r2, #0]
  }

}
 80014bc:	bf00      	nop
 80014be:	37b0      	adds	r7, #176	; 0xb0
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000cac 	.word	0x20000cac
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48001000 	.word	0x48001000

080014d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ac      	sub	sp, #176	; 0xb0
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2288      	movs	r2, #136	; 0x88
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fed5 	bl	80092a0 <memset>
  if(hi2c->Instance==I2C2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_I2C_MspInit+0xb0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d13b      	bne.n	8001578 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fa91 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001518:	f7ff ff48 	bl	80013ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_I2C_MspInit+0xb4>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <HAL_I2C_MspInit+0xb4>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_I2C_MspInit+0xb4>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001534:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153c:	2312      	movs	r3, #18
 800153e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	2301      	movs	r3, #1
 8001544:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800154e:	2304      	movs	r3, #4
 8001550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_I2C_MspInit+0xb8>)
 800155c:	f001 f894 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_I2C_MspInit+0xb4>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_I2C_MspInit+0xb4>)
 8001566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_I2C_MspInit+0xb4>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	37b0      	adds	r7, #176	; 0xb0
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40005800 	.word	0x40005800
 8001584:	40021000 	.word	0x40021000
 8001588:	48000400 	.word	0x48000400

0800158c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_I2C_MspDeInit+0x3c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10f      	bne.n	80015be <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_I2C_MspDeInit+0x40>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_I2C_MspDeInit+0x40>)
 80015a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015a8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80015aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_I2C_MspDeInit+0x44>)
 80015b0:	f001 fa14 	bl	80029dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_I2C_MspDeInit+0x44>)
 80015ba:	f001 fa0f 	bl	80029dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40005800 	.word	0x40005800
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000400 	.word	0x48000400

080015d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_QSPI_MspInit+0x7c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d128      	bne.n	8001648 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_QSPI_MspInit+0x80>)
 80015f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_QSPI_MspInit+0x80>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	6513      	str	r3, [r2, #80]	; 0x50
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_QSPI_MspInit+0x80>)
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_QSPI_MspInit+0x80>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <HAL_QSPI_MspInit+0x80>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_QSPI_MspInit+0x80>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001626:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800162a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001638:	230a      	movs	r3, #10
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_QSPI_MspInit+0x84>)
 8001644:	f001 f820 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	a0001000 	.word	0xa0001000
 8001654:	40021000 	.word	0x40021000
 8001658:	48001000 	.word	0x48001000

0800165c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_SPI_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d128      	bne.n	80016d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_SPI_MspInit+0x80>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_SPI_MspInit+0x80>)
 8001684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001688:	6593      	str	r3, [r2, #88]	; 0x58
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_SPI_MspInit+0x80>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_SPI_MspInit+0x80>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_SPI_MspInit+0x80>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_SPI_MspInit+0x80>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80016ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c0:	2306      	movs	r3, #6
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_SPI_MspInit+0x84>)
 80016cc:	f000 ffdc 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40003c00 	.word	0x40003c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000800 	.word	0x48000800

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0ae      	sub	sp, #184	; 0xb8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2288      	movs	r2, #136	; 0x88
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f007 fdcb 	bl	80092a0 <memset>
  if(huart->Instance==USART1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_UART_MspInit+0x134>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d13b      	bne.n	800178c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001718:	2300      	movs	r3, #0
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f987 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800172c:	f7ff fe3e 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_UART_MspInit+0x138>)
 8001732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001734:	4a39      	ldr	r2, [pc, #228]	; (800181c <HAL_UART_MspInit+0x138>)
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	6613      	str	r3, [r2, #96]	; 0x60
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_UART_MspInit+0x138>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_UART_MspInit+0x138>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	4a33      	ldr	r2, [pc, #204]	; (800181c <HAL_UART_MspInit+0x138>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_UART_MspInit+0x138>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 8001760:	23c0      	movs	r3, #192	; 0xc0
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001778:	2307      	movs	r3, #7
 800177a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001782:	4619      	mov	r1, r3
 8001784:	4826      	ldr	r0, [pc, #152]	; (8001820 <HAL_UART_MspInit+0x13c>)
 8001786:	f000 ff7f 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800178a:	e040      	b.n	800180e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_UART_MspInit+0x140>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d13b      	bne.n	800180e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001796:	2304      	movs	r3, #4
 8001798:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800179a:	2300      	movs	r3, #0
 800179c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 f946 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80017ae:	f7ff fdfd 	bl	80013ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_UART_MspInit+0x138>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <HAL_UART_MspInit+0x138>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0x138>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0x138>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_UART_MspInit+0x138>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0x138>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017fc:	2307      	movs	r3, #7
 80017fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <HAL_UART_MspInit+0x144>)
 800180a:	f000 ff3d 	bl	8002688 <HAL_GPIO_Init>
}
 800180e:	bf00      	nop
 8001810:	37b8      	adds	r7, #184	; 0xb8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40013800 	.word	0x40013800
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400
 8001824:	40004800 	.word	0x40004800
 8001828:	48000c00 	.word	0x48000c00

0800182c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0ac      	sub	sp, #176	; 0xb0
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2288      	movs	r2, #136	; 0x88
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f007 fd27 	bl	80092a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185a:	d17c      	bne.n	8001956 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800185c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001860:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001862:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001872:	2318      	movs	r3, #24
 8001874:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001876:	2307      	movs	r3, #7
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800187a:	2302      	movs	r3, #2
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800187e:	2302      	movs	r3, #2
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001882:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4618      	mov	r0, r3
 800188e:	f003 f8d1 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001898:	f7ff fd88 	bl	80013ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_PCD_MspInit+0x134>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <HAL_PCD_MspInit+0x134>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_PCD_MspInit+0x134>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80018b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f000 fed9 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80018d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018f0:	230a      	movs	r3, #10
 80018f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f000 fec2 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_PCD_MspInit+0x134>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_PCD_MspInit+0x134>)
 800190a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <HAL_PCD_MspInit+0x134>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_PCD_MspInit+0x134>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d114      	bne.n	8001952 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_PCD_MspInit+0x134>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_PCD_MspInit+0x134>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	; 0x58
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_PCD_MspInit+0x134>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001940:	f002 f97a 	bl	8003c38 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_PCD_MspInit+0x134>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_PCD_MspInit+0x134>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001950:	e001      	b.n	8001956 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001952:	f002 f971 	bl	8003c38 <HAL_PWREx_EnableVddUSB>
}
 8001956:	bf00      	nop
 8001958:	37b0      	adds	r7, #176	; 0xb0
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_InitTick+0xc8>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <HAL_InitTick+0xc8>)
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	6613      	str	r3, [r2, #96]	; 0x60
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_InitTick+0xc8>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198a:	f107 020c 	add.w	r2, r7, #12
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ffbb 	bl	8004910 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800199a:	f002 ffa3 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 800199e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <HAL_InitTick+0xcc>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	3b01      	subs	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_InitTick+0xd0>)
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_InitTick+0xd4>)
 80019b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_InitTick+0xd0>)
 80019b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_InitTick+0xd0>)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_InitTick+0xd0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_InitTick+0xd0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_InitTick+0xd0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80019d4:	4817      	ldr	r0, [pc, #92]	; (8001a34 <HAL_InitTick+0xd0>)
 80019d6:	f003 fd9c 	bl	8005512 <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11b      	bne.n	8001a20 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <HAL_InitTick+0xd0>)
 80019ea:	f003 fdf3 	bl	80055d4 <HAL_TIM_Base_Start_IT>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019fc:	2019      	movs	r0, #25
 80019fe:	f000 fd29 	bl	8002454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d808      	bhi.n	8001a1a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	2019      	movs	r0, #25
 8001a0e:	f000 fd05 	bl	800241c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_InitTick+0xd8>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e002      	b.n	8001a20 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3730      	adds	r7, #48	; 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	20000cb0 	.word	0x20000cb0
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	20000140 	.word	0x20000140

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a70:	2020      	movs	r0, #32
 8001a72:	f001 f8d7 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001a76:	2040      	movs	r0, #64	; 0x40
 8001a78:	f001 f8d4 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001a7c:	2080      	movs	r0, #128	; 0x80
 8001a7e:	f001 f8d1 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001a82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a86:	f001 f8cd 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a96:	f003 fe0d 	bl	80056b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000cb0 	.word	0x20000cb0

08001aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001aa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aac:	f001 f8ba 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001ab0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ab4:	f001 f8b6 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_button_Pin);
 8001ab8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001abc:	f001 f8b2 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ac0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ac4:	f001 f8ae 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ac8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001acc:	f001 f8aa 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f007 fb92 	bl	800922c <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20018000 	.word	0x20018000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	20000cfc 	.word	0x20000cfc
 8001b3c:	20001aa0 	.word	0x20001aa0

08001b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b68:	f7ff ffea 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopForever+0xe>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopForever+0x16>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f007 fb51 	bl	8009238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b96:	f7fe feeb 	bl	8000970 <main>

08001b9a <LoopForever>:

LoopForever:
    b LoopForever
 8001b9a:	e7fe      	b.n	8001b9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001ba8:	08009e84 	.word	0x08009e84
  ldr r2, =_sbss
 8001bac:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001bb0:	20001aa0 	.word	0x20001aa0

08001bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_2_IRQHandler>
	...

08001bb8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001bd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bdc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001bde:	2312      	movs	r3, #18
 8001be0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001bea:	2304      	movs	r3, #4
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481b      	ldr	r0, [pc, #108]	; (8001c64 <I2Cx_MspInit+0xac>)
 8001bf6:	f000 fd47 	bl	8002688 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4818      	ldr	r0, [pc, #96]	; (8001c64 <I2Cx_MspInit+0xac>)
 8001c02:	f000 fd41 	bl	8002688 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <I2Cx_MspInit+0xa8>)
 8001c30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c34:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	210f      	movs	r1, #15
 8001c3a:	2021      	movs	r0, #33	; 0x21
 8001c3c:	f000 fbee 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c40:	2021      	movs	r0, #33	; 0x21
 8001c42:	f000 fc07 	bl	8002454 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	2022      	movs	r0, #34	; 0x22
 8001c4c:	f000 fbe6 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c50:	2022      	movs	r0, #34	; 0x22
 8001c52:	f000 fbff 	bl	8002454 <HAL_NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400

08001c68 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <I2Cx_Init+0x54>)
 8001c74:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <I2Cx_Init+0x58>)
 8001c7a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff89 	bl	8001bb8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 ffdf 	bl	8002c6a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001cac:	2100      	movs	r1, #0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f001 fd6e 	bl	8003790 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	00702681 	.word	0x00702681

08001cc4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af04      	add	r7, sp, #16
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	4608      	mov	r0, r1
 8001cce:	4611      	mov	r1, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	72fb      	strb	r3, [r7, #11]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	813b      	strh	r3, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	b299      	uxth	r1, r3
 8001ce6:	88f8      	ldrh	r0, [r7, #6]
 8001ce8:	893a      	ldrh	r2, [r7, #8]
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f001 f988 	bl	8003010 <HAL_I2C_Mem_Read>
 8001d00:	4603      	mov	r3, r0
 8001d02:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f832 	bl	8001d78 <I2Cx_Error>
  }
  return status;
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b08a      	sub	sp, #40	; 0x28
 8001d22:	af04      	add	r7, sp, #16
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	72fb      	strb	r3, [r7, #11]
 8001d30:	460b      	mov	r3, r1
 8001d32:	813b      	strh	r3, [r7, #8]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	88f8      	ldrh	r0, [r7, #6]
 8001d42:	893a      	ldrh	r2, [r7, #8]
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4603      	mov	r3, r0
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f001 f847 	bl	8002de8 <HAL_I2C_Mem_Write>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d64:	7afb      	ldrb	r3, [r7, #11]
 8001d66:	4619      	mov	r1, r3
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f805 	bl	8001d78 <I2Cx_Error>
  }
  return status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 ffff 	bl	8002d88 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff6c 	bl	8001c68 <I2Cx_Init>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <SENSOR_IO_Init+0x10>)
 8001d9e:	f7ff ff63 	bl	8001c68 <I2Cx_Init>
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000d00 	.word	0x20000d00

08001dac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	460b      	mov	r3, r1
 8001db8:	71bb      	strb	r3, [r7, #6]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	79f9      	ldrb	r1, [r7, #7]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	1d7b      	adds	r3, r7, #5
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <SENSOR_IO_Write+0x30>)
 8001dd0:	f7ff ffa5 	bl	8001d1e <I2Cx_WriteMultiple>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000d00 	.word	0x20000d00

08001de0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	4603      	mov	r3, r0
 8001de8:	460a      	mov	r2, r1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	4613      	mov	r3, r2
 8001dee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	79f9      	ldrb	r1, [r7, #7]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f107 030f 	add.w	r3, r7, #15
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2301      	movs	r3, #1
 8001e06:	4804      	ldr	r0, [pc, #16]	; (8001e18 <SENSOR_IO_Read+0x38>)
 8001e08:	f7ff ff5c 	bl	8001cc4 <I2Cx_ReadMultiple>

  return read_value;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000d00 	.word	0x20000d00

08001e1c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	603a      	str	r2, [r7, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	71bb      	strb	r3, [r7, #6]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	79f9      	ldrb	r1, [r7, #7]
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2301      	movs	r3, #1
 8001e42:	4804      	ldr	r0, [pc, #16]	; (8001e54 <SENSOR_IO_ReadMultiple+0x38>)
 8001e44:	f7ff ff3e 	bl	8001cc4 <I2Cx_ReadMultiple>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b29b      	uxth	r3, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000d00 	.word	0x20000d00

08001e58 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <BSP_PSENSOR_Init+0x38>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	20ba      	movs	r0, #186	; 0xba
 8001e64:	4798      	blx	r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	2bb1      	cmp	r3, #177	; 0xb1
 8001e6a:	d002      	beq.n	8001e72 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	e009      	b.n	8001e86 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <BSP_PSENSOR_Init+0x3c>)
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <BSP_PSENSOR_Init+0x38>)
 8001e76:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <BSP_PSENSOR_Init+0x3c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	20ba      	movs	r0, #186	; 0xba
 8001e80:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001e86:	687b      	ldr	r3, [r7, #4]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000134 	.word	0x20000134
 8001e94:	20000d54 	.word	0x20000d54

08001e98 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <BSP_PSENSOR_ReadPressure+0x18>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	20ba      	movs	r0, #186	; 0xba
 8001ea4:	4798      	blx	r3
 8001ea6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000d54 	.word	0x20000d54

08001eb4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <BSP_TSENSOR_Init+0x30>)
 8001ec0:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <BSP_TSENSOR_Init+0x34>)
 8001ec2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001ec4:	f7ff ff68 	bl	8001d98 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <BSP_TSENSOR_Init+0x30>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2100      	movs	r1, #0
 8001ed0:	20be      	movs	r0, #190	; 0xbe
 8001ed2:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000d58 	.word	0x20000d58
 8001ee8:	20000124 	.word	0x20000124

08001eec <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <BSP_TSENSOR_ReadTemp+0x18>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	20be      	movs	r0, #190	; 0xbe
 8001ef8:	4798      	blx	r3
 8001efa:	eef0 7a40 	vmov.f32	s15, s0
}
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000d58 	.word	0x20000d58

08001f08 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2120      	movs	r1, #32
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff60 	bl	8001de0 <SENSOR_IO_Read>
 8001f20:	4603      	mov	r3, r0
 8001f22:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	f023 0304 	bic.w	r3, r3, #4
 8001f2a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	2120      	movs	r1, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff29 	bl	8001dac <SENSOR_IO_Write>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	b2d8      	uxtb	r0, r3
 8001f70:	f107 0208 	add.w	r2, r7, #8
 8001f74:	2302      	movs	r3, #2
 8001f76:	21b2      	movs	r1, #178	; 0xb2
 8001f78:	f7ff ff50 	bl	8001e1c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2135      	movs	r1, #53	; 0x35
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff2c 	bl	8001de0 <SENSOR_IO_Read>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f8c:	7ffb      	ldrb	r3, [r7, #31]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	7a3b      	ldrb	r3, [r7, #8]
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001fa0:	7ffb      	ldrb	r3, [r7, #31]
 8001fa2:	019b      	lsls	r3, r3, #6
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	7a7b      	ldrb	r3, [r7, #9]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001fb4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fb8:	10db      	asrs	r3, r3, #3
 8001fba:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001fbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fc0:	10db      	asrs	r3, r3, #3
 8001fc2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	b2d8      	uxtb	r0, r3
 8001fc8:	f107 0208 	add.w	r2, r7, #8
 8001fcc:	2304      	movs	r3, #4
 8001fce:	21bc      	movs	r1, #188	; 0xbc
 8001fd0:	f7ff ff24 	bl	8001e1c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	7a3b      	ldrb	r3, [r7, #8]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	7abb      	ldrb	r3, [r7, #10]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	b2d8      	uxtb	r0, r3
 8001ff4:	f107 0208 	add.w	r2, r7, #8
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	21aa      	movs	r1, #170	; 0xaa
 8001ffc:	f7ff ff0e 	bl	8001e1c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002000:	7a7b      	ldrb	r3, [r7, #9]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21a      	sxth	r2, r3
 8002006:	7a3b      	ldrb	r3, [r7, #8]
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800200e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002012:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002020:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002024:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002036:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800203a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800204c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	ee07 3a90 	vmov	s15, r3
}
 8002066:	eeb0 0a67 	vmov.f32	s0, s15
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f879 	bl	8002174 <LPS22HB_Init>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002098:	f7ff fe7e 	bl	8001d98 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	210f      	movs	r1, #15
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fe9c 	bl	8001de0 <SENSOR_IO_Read>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	74fb      	strb	r3, [r7, #19]
 80020ca:	e013      	b.n	80020f4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	3328      	adds	r3, #40	; 0x28
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	7cfc      	ldrb	r4, [r7, #19]
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f7ff fe80 	bl	8001de0 <SENSOR_IO_Read>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	f104 0318 	add.w	r3, r4, #24
 80020e8:	443b      	add	r3, r7
 80020ea:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	3301      	adds	r3, #1
 80020f2:	74fb      	strb	r3, [r7, #19]
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d9e8      	bls.n	80020cc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	74fb      	strb	r3, [r7, #19]
 80020fe:	e00f      	b.n	8002120 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	3318      	adds	r3, #24
 8002104:	443b      	add	r3, r7
 8002106:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800210a:	461a      	mov	r2, r3
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	3301      	adds	r3, #1
 800211e:	74fb      	strb	r3, [r7, #19]
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d9ec      	bls.n	8002100 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002136:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2264      	movs	r2, #100	; 0x64
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	da01      	bge.n	800214c <LPS22HB_P_ReadPressure+0x94>
 8002148:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800214c:	131b      	asrs	r3, r3, #12
 800214e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002170 <LPS22HB_P_ReadPressure+0xb8>
 800215e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002162:	eef0 7a66 	vmov.f32	s15, s13
}
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	42c80000 	.word	0x42c80000

08002174 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	211a      	movs	r1, #26
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe2b 	bl	8001de0 <SENSOR_IO_Read>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	211a      	movs	r1, #26
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fe00 	bl	8001dac <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2110      	movs	r1, #16
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fe14 	bl	8001de0 <SENSOR_IO_Read>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021ca:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	f023 0302 	bic.w	r3, r3, #2
 80021d2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	2110      	movs	r1, #16
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fde1 	bl	8001dac <SENSOR_IO_Write>
}  
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f902 	bl	8002406 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002202:	200f      	movs	r0, #15
 8002204:	f7ff fbae 	bl	8001964 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	e001      	b.n	8002218 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002214:	f7ff f8d0 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002218:	79fb      	ldrb	r3, [r7, #7]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_IncTick+0x24>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000144 	.word	0x20000144
 8002248:	20000d5c 	.word	0x20000d5c

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000d5c 	.word	0x20000d5c

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d005      	beq.n	800228a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_Delay+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228a:	bf00      	nop
 800228c:	f7ff ffde 	bl	800224c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f7      	bhi.n	800228c <HAL_Delay+0x28>
  {
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000144 	.word	0x20000144

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_EnableIRQ+0x38>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff4c 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800242e:	f7ff ff61 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002432:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	6978      	ldr	r0, [r7, #20]
 800243a:	f7ff ffb1 	bl	80023a0 <NVIC_EncodePriority>
 800243e:	4602      	mov	r2, r0
 8002440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff80 	bl	800234c <__NVIC_SetPriority>
}
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff54 	bl	8002310 <__NVIC_EnableIRQ>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0ac      	b.n	80025dc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8b2 	bl	80025f0 <DFSDM_GetChannelFromInstance>
 800248c:	4603      	mov	r3, r0
 800248e:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <HAL_DFSDM_ChannelInit+0x174>)
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e09f      	b.n	80025dc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe ffb3 	bl	8001408 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80024a2:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <HAL_DFSDM_ChannelInit+0x178>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	4a4f      	ldr	r2, [pc, #316]	; (80025e8 <HAL_DFSDM_ChannelInit+0x178>)
 80024aa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80024ac:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_DFSDM_ChannelInit+0x178>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d125      	bne.n	8002500 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024be:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80024c0:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4948      	ldr	r1, [pc, #288]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a46      	ldr	r2, [pc, #280]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024d4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80024d8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80024e2:	4b42      	ldr	r3, [pc, #264]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	493f      	ldr	r1, [pc, #252]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800250e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800251e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002524:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 020f 	bic.w	r2, r2, #15
 800253c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002564:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 0207 	and.w	r2, r2, #7
 8002590:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f810 	bl	80025f0 <DFSDM_GetChannelFromInstance>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_DFSDM_ChannelInit+0x174>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000d64 	.word	0x20000d64
 80025e8:	20000d60 	.word	0x20000d60
 80025ec:	40016000 	.word	0x40016000

080025f0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <DFSDM_GetChannelFromInstance+0x7c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d102      	bne.n	8002606 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e02b      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <DFSDM_GetChannelFromInstance+0x80>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d102      	bne.n	8002614 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800260e:	2301      	movs	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e024      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <DFSDM_GetChannelFromInstance+0x84>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800261c:	2302      	movs	r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e01d      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <DFSDM_GetChannelFromInstance+0x88>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d102      	bne.n	8002630 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800262a:	2304      	movs	r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e016      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <DFSDM_GetChannelFromInstance+0x8c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002638:	2305      	movs	r3, #5
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e00f      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <DFSDM_GetChannelFromInstance+0x90>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d102      	bne.n	800264c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002646:	2306      	movs	r3, #6
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e008      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <DFSDM_GetChannelFromInstance+0x94>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d102      	bne.n	800265a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002654:	2307      	movs	r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e001      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800265a:	2303      	movs	r3, #3
 800265c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40016000 	.word	0x40016000
 8002670:	40016020 	.word	0x40016020
 8002674:	40016040 	.word	0x40016040
 8002678:	40016080 	.word	0x40016080
 800267c:	400160a0 	.word	0x400160a0
 8002680:	400160c0 	.word	0x400160c0
 8002684:	400160e0 	.word	0x400160e0

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002696:	e17f      	b.n	8002998 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8171 	beq.w	8002992 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d005      	beq.n	80026c8 <HAL_GPIO_Init+0x40>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d130      	bne.n	800272a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fe:	2201      	movs	r2, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 0201 	and.w	r2, r3, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b03      	cmp	r3, #3
 8002734:	d118      	bne.n	8002768 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	6939      	ldr	r1, [r7, #16]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80ac 	beq.w	8002992 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_GPIO_Init+0x330>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	4a5e      	ldr	r2, [pc, #376]	; (80029b8 <HAL_GPIO_Init+0x330>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6613      	str	r3, [r2, #96]	; 0x60
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_GPIO_Init+0x330>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002852:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_GPIO_Init+0x334>)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800287c:	d025      	beq.n	80028ca <HAL_GPIO_Init+0x242>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4f      	ldr	r2, [pc, #316]	; (80029c0 <HAL_GPIO_Init+0x338>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01f      	beq.n	80028c6 <HAL_GPIO_Init+0x23e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4e      	ldr	r2, [pc, #312]	; (80029c4 <HAL_GPIO_Init+0x33c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x23a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4d      	ldr	r2, [pc, #308]	; (80029c8 <HAL_GPIO_Init+0x340>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x236>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4c      	ldr	r2, [pc, #304]	; (80029cc <HAL_GPIO_Init+0x344>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x232>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4b      	ldr	r2, [pc, #300]	; (80029d0 <HAL_GPIO_Init+0x348>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x22e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <HAL_GPIO_Init+0x34c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x22a>
 80028ae:	2306      	movs	r3, #6
 80028b0:	e00c      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00a      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028ca:	2300      	movs	r3, #0
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028dc:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_GPIO_Init+0x334>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_GPIO_Init+0x350>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800290e:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002938:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <HAL_GPIO_Init+0x350>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_GPIO_Init+0x350>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_GPIO_Init+0x350>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f ae78 	bne.w	8002698 <HAL_GPIO_Init+0x10>
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	48000400 	.word	0x48000400
 80029c4:	48000800 	.word	0x48000800
 80029c8:	48000c00 	.word	0x48000c00
 80029cc:	48001000 	.word	0x48001000
 80029d0:	48001400 	.word	0x48001400
 80029d4:	48001800 	.word	0x48001800
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80029ea:	e0cd      	b.n	8002b88 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80029ec:	2201      	movs	r2, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80c0 	beq.w	8002b82 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002a02:	4a68      	ldr	r2, [pc, #416]	; (8002ba4 <HAL_GPIO_DeInit+0x1c8>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a2a:	d025      	beq.n	8002a78 <HAL_GPIO_DeInit+0x9c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ba8 <HAL_GPIO_DeInit+0x1cc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d01f      	beq.n	8002a74 <HAL_GPIO_DeInit+0x98>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a5d      	ldr	r2, [pc, #372]	; (8002bac <HAL_GPIO_DeInit+0x1d0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d019      	beq.n	8002a70 <HAL_GPIO_DeInit+0x94>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a5c      	ldr	r2, [pc, #368]	; (8002bb0 <HAL_GPIO_DeInit+0x1d4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_GPIO_DeInit+0x90>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <HAL_GPIO_DeInit+0x1d8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00d      	beq.n	8002a68 <HAL_GPIO_DeInit+0x8c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_GPIO_DeInit+0x1dc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <HAL_GPIO_DeInit+0x88>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <HAL_GPIO_DeInit+0x1e0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_GPIO_DeInit+0x84>
 8002a5c:	2306      	movs	r3, #6
 8002a5e:	e00c      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a60:	2307      	movs	r3, #7
 8002a62:	e00a      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a64:	2305      	movs	r3, #5
 8002a66:	e008      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e004      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e002      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_GPIO_DeInit+0x9e>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d132      	bne.n	8002af0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	494b      	ldr	r1, [pc, #300]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002a98:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	4947      	ldr	r1, [pc, #284]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4944      	ldr	r1, [pc, #272]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4940      	ldr	r1, [pc, #256]	; (8002bc0 <HAL_GPIO_DeInit+0x1e4>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ad2:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_GPIO_DeInit+0x1c8>)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	4830      	ldr	r0, [pc, #192]	; (8002ba4 <HAL_GPIO_DeInit+0x1c8>)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	400a      	ands	r2, r1
 8002aea:	3302      	adds	r3, #2
 8002aec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2103      	movs	r1, #3
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	08d2      	lsrs	r2, r2, #3
 8002b24:	4019      	ands	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2103      	movs	r1, #3
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2103      	movs	r1, #3
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b72:	2101      	movs	r1, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f af2b 	bne.w	80029ec <HAL_GPIO_DeInit+0x10>
  }
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	48000c00 	.word	0x48000c00
 8002bb4:	48001000 	.word	0x48001000
 8002bb8:	48001400 	.word	0x48001400
 8002bbc:	48001800 	.word	0x48001800
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f806 	bl	8002c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e081      	b.n	8002d80 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe fc1d 	bl	80014d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2224      	movs	r2, #36	; 0x24
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	e006      	b.n	8002cf2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d104      	bne.n	8002d04 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d16:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d26:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69d9      	ldr	r1, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e021      	b.n	8002dde <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fbea 	bl	800158c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 80f9 	bne.w	8003002 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x34>
 8002e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0ed      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Mem_Write+0x4e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0e6      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e3e:	f7ff fa05 	bl	800224c <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fac3 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0d1      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2221      	movs	r2, #33	; 0x21
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e88:	88f8      	ldrh	r0, [r7, #6]
 8002e8a:	893a      	ldrh	r2, [r7, #8]
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	4603      	mov	r3, r0
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f9d3 	bl	8003244 <I2C_RequestMemoryWrite>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0a9      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d90e      	bls.n	8002ed8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fc2b 	bl	800372c <I2C_TransferConfig>
 8002ed6:	e00f      	b.n	8002ef8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fc1a 	bl	800372c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 faad 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e07b      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d034      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x1c8>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d130      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fa3f 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e04d      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2bff      	cmp	r3, #255	; 0xff
 8002f70:	d90e      	bls.n	8002f90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fbcf 	bl	800372c <I2C_TransferConfig>
 8002f8e:	e00f      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fbbe 	bl	800372c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d19e      	bne.n	8002ef8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa8c 	bl	80034dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e01a      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_I2C_Mem_Write+0x224>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	fe00e800 	.word	0xfe00e800

08003010 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4603      	mov	r3, r0
 8003020:	817b      	strh	r3, [r7, #10]
 8003022:	460b      	mov	r3, r1
 8003024:	813b      	strh	r3, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	f040 80fd 	bne.w	8003232 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_I2C_Mem_Read+0x34>
 800303e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0f1      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Read+0x4e>
 800305a:	2302      	movs	r3, #2
 800305c:	e0ea      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003066:	f7ff f8f1 	bl	800224c <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2319      	movs	r3, #25
 8003072:	2201      	movs	r2, #1
 8003074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f9af 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d5      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2222      	movs	r2, #34	; 0x22
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b0:	88f8      	ldrh	r0, [r7, #6]
 80030b2:	893a      	ldrh	r2, [r7, #8]
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4603      	mov	r3, r0
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f913 	bl	80032ec <I2C_RequestMemoryRead>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0ad      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2bff      	cmp	r3, #255	; 0xff
 80030e0:	d90e      	bls.n	8003100 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	8979      	ldrh	r1, [r7, #10]
 80030f0:	4b52      	ldr	r3, [pc, #328]	; (800323c <HAL_I2C_Mem_Read+0x22c>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fb17 	bl	800372c <I2C_TransferConfig>
 80030fe:	e00f      	b.n	8003120 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	b2da      	uxtb	r2, r3
 8003110:	8979      	ldrh	r1, [r7, #10]
 8003112:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_I2C_Mem_Read+0x22c>)
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fb06 	bl	800372c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	2200      	movs	r2, #0
 8003128:	2104      	movs	r1, #4
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f956 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07c      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d034      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x1d0>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f927 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04d      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d90e      	bls.n	80031c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fab7 	bl	800372c <I2C_TransferConfig>
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 faa6 	bl	800372c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19a      	bne.n	8003120 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f974 	bl	80034dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_I2C_Mem_Read+0x230>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	80002400 	.word	0x80002400
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	460b      	mov	r3, r1
 8003258:	813b      	strh	r3, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <I2C_RequestMemoryWrite+0xa4>)
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa5d 	bl	800372c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	69b9      	ldr	r1, [r7, #24]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8f0 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e02c      	b.n	80032e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
 8003296:	e015      	b.n	80032c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	b29b      	uxth	r3, r3
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8d6 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e012      	b.n	80032e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ba:	893b      	ldrh	r3, [r7, #8]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f884 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	80002000 	.word	0x80002000

080032ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	460b      	mov	r3, r1
 8003300:	813b      	strh	r3, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <I2C_RequestMemoryRead+0xa4>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fa0a 	bl	800372c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f89d 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e02c      	b.n	8003386 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
 800333c:	e015      	b.n	800336a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800333e:	893b      	ldrh	r3, [r7, #8]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	b29b      	uxth	r3, r3
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f883 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e012      	b.n	8003386 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2200      	movs	r2, #0
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f831 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	80002000 	.word	0x80002000

08003394 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d103      	bne.n	80033b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	619a      	str	r2, [r3, #24]
  }
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	e022      	b.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d01e      	beq.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe ff29 	bl	800224c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e00f      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	429a      	cmp	r2, r3
 8003450:	d0cd      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003468:	e02c      	b.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f870 	bl	8003554 <I2C_IsErrorOccurred>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e02a      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d01e      	beq.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fe fee1 	bl	800224c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d113      	bne.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d1cb      	bne.n	800346a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e8:	e028      	b.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f830 	bl	8003554 <I2C_IsErrorOccurred>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e026      	b.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7fe fea5 	bl	800224c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d1cf      	bne.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d075      	beq.n	800366c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2210      	movs	r2, #16
 8003586:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003588:	e056      	b.n	8003638 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d052      	beq.n	8003638 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fe5b 	bl	800224c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_IsErrorOccurred+0x54>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d147      	bne.n	8003638 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ca:	d12e      	bne.n	800362a <I2C_IsErrorOccurred+0xd6>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d2:	d02a      	beq.n	800362a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d027      	beq.n	800362a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035ea:	f7fe fe2f 	bl	800224c <HAL_GetTick>
 80035ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f0:	e01b      	b.n	800362a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035f2:	f7fe fe2b 	bl	800224c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b19      	cmp	r3, #25
 80035fe:	d914      	bls.n	800362a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d1dc      	bne.n	80035f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b20      	cmp	r3, #32
 8003644:	d003      	beq.n	800364e <I2C_IsErrorOccurred+0xfa>
 8003646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364a:	2b00      	cmp	r3, #0
 800364c:	d09d      	beq.n	800358a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800364e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800368e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01c      	beq.n	800371c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff fe56 	bl	8003394 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <I2C_IsErrorOccurred+0x1d4>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800371c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	; 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	fe00e800 	.word	0xfe00e800

0800372c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	4613      	mov	r3, r2
 800373c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003744:	7a7b      	ldrb	r3, [r7, #9]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800374c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	4313      	orrs	r3, r2
 8003756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800375a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	0d5b      	lsrs	r3, r3, #21
 8003766:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <I2C_TransferConfig+0x60>)
 800376c:	430b      	orrs	r3, r1
 800376e:	43db      	mvns	r3, r3
 8003770:	ea02 0103 	and.w	r1, r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	03ff63ff 	.word	0x03ff63ff

08003790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d138      	bne.n	8003818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e032      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	d139      	bne.n	80038b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003846:	2302      	movs	r3, #2
 8003848:	e033      	b.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2224      	movs	r2, #36	; 0x24
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c0:	b08f      	sub	sp, #60	; 0x3c
 80038c2:	af0a      	add	r7, sp, #40	; 0x28
 80038c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e116      	b.n	8003afe <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd ff9e 	bl	800182c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2203      	movs	r2, #3
 80038f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f002 fe45 	bl	800659e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	687e      	ldr	r6, [r7, #4]
 800391c:	466d      	mov	r5, sp
 800391e:	f106 0410 	add.w	r4, r6, #16
 8003922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800392a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800392e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003932:	1d33      	adds	r3, r6, #4
 8003934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	f002 fe05 	bl	8006546 <USB_CoreInit>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0d7      	b.n	8003afe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f002 fe33 	bl	80065c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e04a      	b.n	80039f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	333d      	adds	r3, #61	; 0x3d
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	333c      	adds	r3, #60	; 0x3c
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	b298      	uxth	r0, r3
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3344      	adds	r3, #68	; 0x44
 800399c:	4602      	mov	r2, r0
 800399e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3340      	adds	r3, #64	; 0x40
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3348      	adds	r3, #72	; 0x48
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	334c      	adds	r3, #76	; 0x4c
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039dc:	7bfa      	ldrb	r2, [r7, #15]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	3354      	adds	r3, #84	; 0x54
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	3301      	adds	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3af      	bcc.n	8003960 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e044      	b.n	8003a90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3b5      	bcc.n	8003a06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	687e      	ldr	r6, [r7, #4]
 8003aa2:	466d      	mov	r5, sp
 8003aa4:	f106 0410 	add.w	r4, r6, #16
 8003aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ab4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ab8:	1d33      	adds	r3, r6, #4
 8003aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	f002 fdcb 	bl	8006658 <USB_DevInit>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e014      	b.n	8003afe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d102      	bne.n	8003af2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f80a 	bl	8003b06 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 ff77 	bl	80069ea <USB_DevDisconnect>

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b06 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	f043 0303 	orr.w	r3, r3, #3
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40007000 	.word	0x40007000

08003b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40007000 	.word	0x40007000

08003b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b9a:	d130      	bne.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba8:	d038      	beq.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2232      	movs	r2, #50	; 0x32
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bd0:	e002      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d102      	bne.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f2      	bne.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d110      	bne.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00f      	b.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0a:	d007      	beq.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c14:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	20000120 	.word	0x20000120
 8003c34:	431bde83 	.word	0x431bde83

08003c38 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c46:	6053      	str	r3, [r2, #4]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40007000 	.word	0x40007000

08003c58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c60:	f7fe faf4 	bl	800224c <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e063      	b.n	8003d38 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fd fca5 	bl	80015d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003c8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f858 	bl	8003d44 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	021a      	lsls	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2120      	movs	r1, #32
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f850 	bl	8003d60 <QSPI_WaitFlagStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d131      	bne.n	8003d2e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6852      	ldr	r2, [r2, #4]
 8003cdc:	0611      	lsls	r1, r2, #24
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_QSPI_Init+0xe8>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6912      	ldr	r2, [r2, #16]
 8003cfa:	0411      	lsls	r1, r2, #16
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6952      	ldr	r2, [r2, #20]
 8003d00:	4311      	orrs	r1, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6992      	ldr	r2, [r2, #24]
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d36:	7afb      	ldrb	r3, [r7, #11]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	ffe0f8fe 	.word	0xffe0f8fe

08003d44 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d70:	e01a      	b.n	8003da8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d016      	beq.n	8003da8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fa67 	bl	800224c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2204      	movs	r2, #4
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e00e      	b.n	8003dc6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf14      	ite	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	2300      	moveq	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1d6      	bne.n	8003d72 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e3ca      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de2:	4b97      	ldr	r3, [pc, #604]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dec:	4b94      	ldr	r3, [pc, #592]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80e4 	beq.w	8003fcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4a>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	f040 808b 	bne.w	8003f28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f040 8087 	bne.w	8003f28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e1a:	4b89      	ldr	r3, [pc, #548]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e3a2      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	4b82      	ldr	r3, [pc, #520]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_RCC_OscConfig+0x7c>
 8003e42:	4b7f      	ldr	r3, [pc, #508]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4a:	e005      	b.n	8003e58 <HAL_RCC_OscConfig+0x88>
 8003e4c:	4b7c      	ldr	r3, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d223      	bcs.n	8003ea4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fd87 	bl	8004974 <RCC_SetFlashLatencyFromMSIRange>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e383      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e70:	4b73      	ldr	r3, [pc, #460]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a72      	ldr	r2, [pc, #456]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	496d      	ldr	r1, [pc, #436]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8e:	4b6c      	ldr	r3, [pc, #432]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	4968      	ldr	r1, [pc, #416]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
 8003ea2:	e025      	b.n	8003ef0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea4:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	f043 0308 	orr.w	r3, r3, #8
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b63      	ldr	r3, [pc, #396]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4960      	ldr	r1, [pc, #384]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	495b      	ldr	r1, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd47 	bl	8004974 <RCC_SetFlashLatencyFromMSIRange>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e343      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef0:	f000 fc4a 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b52      	ldr	r3, [pc, #328]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	4950      	ldr	r1, [pc, #320]	; (8004044 <HAL_RCC_OscConfig+0x274>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	4a4e      	ldr	r2, [pc, #312]	; (8004048 <HAL_RCC_OscConfig+0x278>)
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f10:	4b4e      	ldr	r3, [pc, #312]	; (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd fd25 	bl	8001964 <HAL_InitTick>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d052      	beq.n	8003fca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	e327      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d032      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f30:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a42      	ldr	r2, [pc, #264]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe f986 	bl	800224c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f44:	f7fe f982 	bl	800224c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e310      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f56:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f62:	4b37      	ldr	r3, [pc, #220]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a36      	ldr	r2, [pc, #216]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4931      	ldr	r1, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f80:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	492c      	ldr	r1, [pc, #176]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	e01a      	b.n	8003fcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f96:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a29      	ldr	r2, [pc, #164]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe f953 	bl	800224c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003faa:	f7fe f94f 	bl	800224c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e2dd      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x1da>
 8003fc8:	e000      	b.n	8003fcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d074      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x21a>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d10e      	bne.n	8004002 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d064      	beq.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d160      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e2ba      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x24a>
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e026      	b.n	8004068 <HAL_RCC_OscConfig+0x298>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004022:	d115      	bne.n	8004050 <HAL_RCC_OscConfig+0x280>
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a05      	ldr	r2, [pc, #20]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 800402a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a02      	ldr	r2, [pc, #8]	; (8004040 <HAL_RCC_OscConfig+0x270>)
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e014      	b.n	8004068 <HAL_RCC_OscConfig+0x298>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	08009d98 	.word	0x08009d98
 8004048:	20000120 	.word	0x20000120
 800404c:	20000140 	.word	0x20000140
 8004050:	4ba0      	ldr	r3, [pc, #640]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a9f      	ldr	r2, [pc, #636]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b9d      	ldr	r3, [pc, #628]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a9c      	ldr	r2, [pc, #624]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe f8ec 	bl	800224c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004078:	f7fe f8e8 	bl	800224c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e276      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408a:	4b92      	ldr	r3, [pc, #584]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x2a8>
 8004096:	e014      	b.n	80040c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe f8d8 	bl	800224c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fe f8d4 	bl	800224c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e262      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b2:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2d0>
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d060      	beq.n	8004190 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_OscConfig+0x310>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d119      	bne.n	800410e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d116      	bne.n	800410e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e0:	4b7c      	ldr	r3, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x328>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e23f      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	4973      	ldr	r1, [pc, #460]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800410c:	e040      	b.n	8004190 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d023      	beq.n	800415e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004116:	4b6f      	ldr	r3, [pc, #444]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fe f893 	bl	800224c <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412a:	f7fe f88f 	bl	800224c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e21d      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800413c:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	495f      	ldr	r1, [pc, #380]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
 800415c:	e018      	b.n	8004190 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415e:	4b5d      	ldr	r3, [pc, #372]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5c      	ldr	r2, [pc, #368]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe f86f 	bl	800224c <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7fe f86b 	bl	800224c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1f9      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03c      	beq.n	8004216 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01c      	beq.n	80041de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a4:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe f84a 	bl	800224c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fe f846 	bl	800224c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1d4      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ce:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ef      	beq.n	80041bc <HAL_RCC_OscConfig+0x3ec>
 80041dc:	e01b      	b.n	8004216 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe f82d 	bl	800224c <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fe f829 	bl	800224c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1b7      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004208:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ef      	bne.n	80041f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80a6 	beq.w	8004370 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004228:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	6593      	str	r3, [r2, #88]	; 0x58
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424c:	2301      	movs	r3, #1
 800424e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x508>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d118      	bne.n	800428e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCC_OscConfig+0x508>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_RCC_OscConfig+0x508>)
 8004262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004268:	f7fd fff0 	bl	800224c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004270:	f7fd ffec 	bl	800224c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e17a      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_RCC_OscConfig+0x508>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4d8>
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a6:	e029      	b.n	80042fc <HAL_RCC_OscConfig+0x52c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d115      	bne.n	80042dc <HAL_RCC_OscConfig+0x50c>
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	4a03      	ldr	r2, [pc, #12]	; (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x52c>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
 80042dc:	4b9c      	ldr	r3, [pc, #624]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	4a9b      	ldr	r2, [pc, #620]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ec:	4b98      	ldr	r3, [pc, #608]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a97      	ldr	r2, [pc, #604]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fd ffa2 	bl	800224c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fd ff9e 	bl	800224c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e12a      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004322:	4b8b      	ldr	r3, [pc, #556]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ed      	beq.n	800430c <HAL_RCC_OscConfig+0x53c>
 8004330:	e015      	b.n	800435e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd ff8b 	bl	800224c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd ff87 	bl	800224c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e113      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004350:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ed      	bne.n	800433a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435e:	7ffb      	ldrb	r3, [r7, #31]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b7a      	ldr	r3, [pc, #488]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	4a79      	ldr	r2, [pc, #484]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80fe 	beq.w	8004576 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	2b02      	cmp	r3, #2
 8004380:	f040 80d0 	bne.w	8004524 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0203 	and.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d130      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d127      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d11f      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c4:	2a07      	cmp	r2, #7
 80043c6:	bf14      	ite	ne
 80043c8:	2201      	movne	r2, #1
 80043ca:	2200      	moveq	r2, #0
 80043cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d113      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	3b01      	subs	r3, #1
 80043e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d109      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	3b01      	subs	r3, #1
 80043f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d06e      	beq.n	80044d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d069      	beq.n	80044d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004400:	4b53      	ldr	r3, [pc, #332]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0ad      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800441c:	4b4c      	ldr	r3, [pc, #304]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004428:	f7fd ff10 	bl	800224c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd ff0c 	bl	800224c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e09a      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004442:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444e:	4b40      	ldr	r3, [pc, #256]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	4b40      	ldr	r3, [pc, #256]	; (8004554 <HAL_RCC_OscConfig+0x784>)
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800445e:	3a01      	subs	r2, #1
 8004460:	0112      	lsls	r2, r2, #4
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004468:	0212      	lsls	r2, r2, #8
 800446a:	4311      	orrs	r1, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004470:	0852      	lsrs	r2, r2, #1
 8004472:	3a01      	subs	r2, #1
 8004474:	0552      	lsls	r2, r2, #21
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800447c:	0852      	lsrs	r2, r2, #1
 800447e:	3a01      	subs	r2, #1
 8004480:	0652      	lsls	r2, r2, #25
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004488:	0912      	lsrs	r2, r2, #4
 800448a:	0452      	lsls	r2, r2, #17
 800448c:	430a      	orrs	r2, r1
 800448e:	4930      	ldr	r1, [pc, #192]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004490:	4313      	orrs	r3, r2
 8004492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004494:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2d      	ldr	r2, [pc, #180]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ac:	f7fd fece 	bl	800224c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd feca 	bl	800224c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e058      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d2:	e050      	b.n	8004576 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e04f      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d148      	bne.n	8004576 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044e4:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a19      	ldr	r2, [pc, #100]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f0:	4b17      	ldr	r3, [pc, #92]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044fc:	f7fd fea6 	bl	800224c <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fd fea2 	bl	800224c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e030      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x734>
 8004522:	e028      	b.n	8004576 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d023      	beq.n	8004572 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_RCC_OscConfig+0x780>)
 8004530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd fe89 	bl	800224c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453c:	e00c      	b.n	8004558 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fd fe85 	bl	800224c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d905      	bls.n	8004558 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e013      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
 8004550:	40021000 	.word	0x40021000
 8004554:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_OscConfig+0x7b0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ec      	bne.n	800453e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_OscConfig+0x7b0>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4905      	ldr	r1, [pc, #20]	; (8004580 <HAL_RCC_OscConfig+0x7b0>)
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x7b4>)
 800456c:	4013      	ands	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
 8004570:	e001      	b.n	8004576 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	feeefffc 	.word	0xfeeefffc

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0e7      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b75      	ldr	r3, [pc, #468]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d910      	bls.n	80045cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 0207 	bic.w	r2, r3, #7
 80045b2:	4970      	ldr	r1, [pc, #448]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b6e      	ldr	r3, [pc, #440]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0cf      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d908      	bls.n	80045fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4960      	ldr	r1, [pc, #384]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04c      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460e:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d121      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0a6      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	4b54      	ldr	r3, [pc, #336]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e09a      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800463e:	4b4e      	ldr	r3, [pc, #312]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e08e      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e086      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b46      	ldr	r3, [pc, #280]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4943      	ldr	r1, [pc, #268]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004670:	f7fd fdec 	bl	800224c <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fde8 	bl	800224c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e06e      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d208      	bcs.n	80046ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	492b      	ldr	r1, [pc, #172]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ce:	4b29      	ldr	r3, [pc, #164]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d210      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f023 0207 	bic.w	r2, r3, #7
 80046e4:	4923      	ldr	r1, [pc, #140]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e036      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4918      	ldr	r1, [pc, #96]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4910      	ldr	r1, [pc, #64]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800473c:	f000 f824 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	490b      	ldr	r1, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1f4>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1f8>)
 800475a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1fc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd f8ff 	bl	8001964 <HAL_InitTick>
 8004766:	4603      	mov	r3, r0
 8004768:	72fb      	strb	r3, [r7, #11]

  return status;
 800476a:	7afb      	ldrb	r3, [r7, #11]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40022000 	.word	0x40022000
 8004778:	40021000 	.word	0x40021000
 800477c:	08009d98 	.word	0x08009d98
 8004780:	20000120 	.word	0x20000120
 8004784:	20000140 	.word	0x20000140

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004796:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a0:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x34>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d121      	bne.n	80047fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11e      	bne.n	80047fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047bc:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047c8:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e005      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047e4:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f8:	e00a      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d102      	bne.n	8004806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004800:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_RCC_GetSysClockFreq+0x110>)
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e004      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d101      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800480c:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCC_GetSysClockFreq+0x114>)
 800480e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d134      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0xa6>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d003      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0xac>
 800482c:	e005      	b.n	800483a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <HAL_RCC_GetSysClockFreq+0x110>)
 8004830:	617b      	str	r3, [r7, #20]
      break;
 8004832:	e005      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCC_GetSysClockFreq+0x114>)
 8004836:	617b      	str	r3, [r7, #20]
      break;
 8004838:	e002      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	617b      	str	r3, [r7, #20]
      break;
 800483e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	3301      	adds	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	fb03 f202 	mul.w	r2, r3, r2
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0e5b      	lsrs	r3, r3, #25
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	3301      	adds	r3, #1
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004880:	69bb      	ldr	r3, [r7, #24]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3724      	adds	r7, #36	; 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	08009db0 	.word	0x08009db0
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200

080048a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000120 	.word	0x20000120

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048bc:	f7ff fff0 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	08009da8 	.word	0x08009da8

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048e8:	f7ff ffda 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0adb      	lsrs	r3, r3, #11
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	; (800490c <HAL_RCC_GetPCLK2Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	08009da8 	.word	0x08009da8

08004910 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	220f      	movs	r2, #15
 800491e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0203 	and.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <HAL_RCC_GetClockConfig+0x5c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_RCC_GetClockConfig+0x5c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_GetClockConfig+0x5c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <HAL_RCC_GetClockConfig+0x60>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0207 	and.w	r2, r3, #7
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	40022000 	.word	0x40022000

08004974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004980:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800498c:	f7ff f8f0 	bl	8003b70 <HAL_PWREx_GetVoltageRange>
 8004990:	6178      	str	r0, [r7, #20]
 8004992:	e014      	b.n	80049be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	4a24      	ldr	r2, [pc, #144]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6593      	str	r3, [r2, #88]	; 0x58
 80049a0:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049ac:	f7ff f8e0 	bl	8003b70 <HAL_PWREx_GetVoltageRange>
 80049b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049b2:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c4:	d10b      	bne.n	80049de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d919      	bls.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2ba0      	cmp	r3, #160	; 0xa0
 80049d0:	d902      	bls.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049d2:	2302      	movs	r3, #2
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e013      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d8:	2301      	movs	r3, #1
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e010      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d902      	bls.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049e4:	2303      	movs	r3, #3
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	e00a      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d102      	bne.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f0:	2302      	movs	r3, #2
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e004      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b70      	cmp	r3, #112	; 0x70
 80049fa:	d101      	bne.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049fc:	2301      	movs	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 0207 	bic.w	r2, r3, #7
 8004a08:	4909      	ldr	r1, [pc, #36]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d001      	beq.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40022000 	.word	0x40022000

08004a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d041      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a58:	d02a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a5e:	d824      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a74:	d010      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a76:	e018      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a78:	4b86      	ldr	r3, [pc, #536]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a85      	ldr	r2, [pc, #532]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a84:	e015      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 facb 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a96:	e00c      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3320      	adds	r3, #32
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fbb6 	bl	8005210 <RCCEx_PLLSAI2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aa8:	e003      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	74fb      	strb	r3, [r7, #19]
      break;
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab8:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac6:	4973      	ldr	r1, [pc, #460]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d041      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ae8:	d02a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004aea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aee:	d824      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af4:	d008      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afa:	d81e      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b04:	d010      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b06:	e018      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b08:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a61      	ldr	r2, [pc, #388]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b14:	e015      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fa83 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b26:	e00c      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3320      	adds	r3, #32
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb6e 	bl	8005210 <RCCEx_PLLSAI2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b38:	e003      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b48:	4b52      	ldr	r3, [pc, #328]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b56:	494f      	ldr	r1, [pc, #316]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b5e:	e001      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a0 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b86:	2300      	movs	r3, #0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8c:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	4a40      	ldr	r2, [pc, #256]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6593      	str	r3, [r2, #88]	; 0x58
 8004b98:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb4:	f7fd fb4a 	bl	800224c <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bba:	e009      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd fb46 	bl	800224c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d902      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	74fb      	strb	r3, [r7, #19]
        break;
 8004bce:	e005      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d15c      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01f      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d019      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fb05 	bl	800224c <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c44:	e00b      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fd fb01 	bl	800224c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d902      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c5c:	e006      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ec      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c82:	4904      	ldr	r1, [pc, #16]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c8a:	e009      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca0:	7c7b      	ldrb	r3, [r7, #17]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca6:	4b9e      	ldr	r3, [pc, #632]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a9d      	ldr	r2, [pc, #628]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cbe:	4b98      	ldr	r3, [pc, #608]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f023 0203 	bic.w	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	4994      	ldr	r1, [pc, #592]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce0:	4b8f      	ldr	r3, [pc, #572]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f023 020c 	bic.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	498c      	ldr	r1, [pc, #560]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d02:	4b87      	ldr	r3, [pc, #540]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	4983      	ldr	r1, [pc, #524]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d24:	4b7e      	ldr	r3, [pc, #504]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	497b      	ldr	r1, [pc, #492]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d54:	4972      	ldr	r1, [pc, #456]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d68:	4b6d      	ldr	r3, [pc, #436]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	496a      	ldr	r1, [pc, #424]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d8a:	4b65      	ldr	r3, [pc, #404]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	4961      	ldr	r1, [pc, #388]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dac:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	4959      	ldr	r1, [pc, #356]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dce:	4b54      	ldr	r3, [pc, #336]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	4950      	ldr	r1, [pc, #320]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df0:	4b4b      	ldr	r3, [pc, #300]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	4948      	ldr	r1, [pc, #288]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e12:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	493f      	ldr	r1, [pc, #252]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d028      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e34:	4b3a      	ldr	r3, [pc, #232]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e42:	4937      	ldr	r1, [pc, #220]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e52:	d106      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b32      	ldr	r3, [pc, #200]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
 8004e60:	e011      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6a:	d10c      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	2101      	movs	r1, #1
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f8d8 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e82:	7cfb      	ldrb	r3, [r7, #19]
 8004e84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d028      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e92:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	491f      	ldr	r1, [pc, #124]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ebc:	60d3      	str	r3, [r2, #12]
 8004ebe:	e011      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f8a9 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02b      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efe:	4908      	ldr	r1, [pc, #32]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0e:	d109      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a02      	ldr	r2, [pc, #8]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1a:	60d3      	str	r3, [r2, #12]
 8004f1c:	e014      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	2101      	movs	r1, #1
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f877 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02f      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f62:	4928      	ldr	r1, [pc, #160]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f72:	d10d      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	2102      	movs	r1, #2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f854 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d014      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	74bb      	strb	r3, [r7, #18]
 8004f8e:	e011      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3320      	adds	r3, #32
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f935 	bl	8005210 <RCCEx_PLLSAI2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fce:	490d      	ldr	r1, [pc, #52]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff2:	4904      	ldr	r1, [pc, #16]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ffa:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005012:	f043 0304 	orr.w	r3, r3, #4
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000

08005028 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005036:	4b75      	ldr	r3, [pc, #468]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005042:	4b72      	ldr	r3, [pc, #456]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0203 	and.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d10d      	bne.n	800506e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
       ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800505a:	4b6c      	ldr	r3, [pc, #432]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
       ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d047      	beq.n	80050fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
 8005072:	e044      	b.n	80050fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d018      	beq.n	80050ae <RCCEx_PLLSAI1_Config+0x86>
 800507c:	2b03      	cmp	r3, #3
 800507e:	d825      	bhi.n	80050cc <RCCEx_PLLSAI1_Config+0xa4>
 8005080:	2b01      	cmp	r3, #1
 8005082:	d002      	beq.n	800508a <RCCEx_PLLSAI1_Config+0x62>
 8005084:	2b02      	cmp	r3, #2
 8005086:	d009      	beq.n	800509c <RCCEx_PLLSAI1_Config+0x74>
 8005088:	e020      	b.n	80050cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800508a:	4b60      	ldr	r3, [pc, #384]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11d      	bne.n	80050d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509a:	e01a      	b.n	80050d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800509c:	4b5b      	ldr	r3, [pc, #364]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d116      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ac:	e013      	b.n	80050d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ae:	4b57      	ldr	r3, [pc, #348]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ba:	4b54      	ldr	r3, [pc, #336]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ca:	e006      	b.n	80050da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	e004      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
    }

    if(status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e2:	4b4a      	ldr	r3, [pc, #296]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	430b      	orrs	r3, r1
 80050f8:	4944      	ldr	r1, [pc, #272]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d17d      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005104:	4b41      	ldr	r3, [pc, #260]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a40      	ldr	r2, [pc, #256]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800510e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fd f89c 	bl	800224c <HAL_GetTick>
 8005114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005116:	e009      	b.n	800512c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005118:	f7fd f898 	bl	800224c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e005      	b.n	8005138 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800512c:	4b37      	ldr	r3, [pc, #220]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ef      	bne.n	8005118 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d160      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005144:	4b31      	ldr	r3, [pc, #196]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	0211      	lsls	r1, r2, #8
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68d2      	ldr	r2, [r2, #12]
 800515a:	0912      	lsrs	r2, r2, #4
 800515c:	0452      	lsls	r2, r2, #17
 800515e:	430a      	orrs	r2, r1
 8005160:	492a      	ldr	r1, [pc, #168]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
 8005166:	e027      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d112      	bne.n	8005194 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800516e:	4b27      	ldr	r3, [pc, #156]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005176:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6892      	ldr	r2, [r2, #8]
 800517e:	0211      	lsls	r1, r2, #8
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6912      	ldr	r2, [r2, #16]
 8005184:	0852      	lsrs	r2, r2, #1
 8005186:	3a01      	subs	r2, #1
 8005188:	0552      	lsls	r2, r2, #21
 800518a:	430a      	orrs	r2, r1
 800518c:	491f      	ldr	r1, [pc, #124]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	610b      	str	r3, [r1, #16]
 8005192:	e011      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800519c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6892      	ldr	r2, [r2, #8]
 80051a4:	0211      	lsls	r1, r2, #8
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6952      	ldr	r2, [r2, #20]
 80051aa:	0852      	lsrs	r2, r2, #1
 80051ac:	3a01      	subs	r2, #1
 80051ae:	0652      	lsls	r2, r2, #25
 80051b0:	430a      	orrs	r2, r1
 80051b2:	4916      	ldr	r1, [pc, #88]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd f842 	bl	800224c <HAL_GetTick>
 80051c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ca:	e009      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051cc:	f7fd f83e 	bl	800224c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d902      	bls.n	80051e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	73fb      	strb	r3, [r7, #15]
          break;
 80051de:	e005      	b.n	80051ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ef      	beq.n	80051cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	4904      	ldr	r1, [pc, #16]	; (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000

08005210 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800521e:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800522a:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0203 	and.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d10d      	bne.n	8005256 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
       ||
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005242:	4b61      	ldr	r3, [pc, #388]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
       ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d047      	beq.n	80052e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e044      	b.n	80052e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d018      	beq.n	8005296 <RCCEx_PLLSAI2_Config+0x86>
 8005264:	2b03      	cmp	r3, #3
 8005266:	d825      	bhi.n	80052b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005268:	2b01      	cmp	r3, #1
 800526a:	d002      	beq.n	8005272 <RCCEx_PLLSAI2_Config+0x62>
 800526c:	2b02      	cmp	r3, #2
 800526e:	d009      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x74>
 8005270:	e020      	b.n	80052b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005272:	4b55      	ldr	r3, [pc, #340]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11d      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005282:	e01a      	b.n	80052ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005284:	4b50      	ldr	r3, [pc, #320]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005294:	e013      	b.n	80052be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005296:	4b4c      	ldr	r3, [pc, #304]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a2:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b2:	e006      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e004      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10d      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ca:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	430b      	orrs	r3, r1
 80052e0:	4939      	ldr	r1, [pc, #228]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d167      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052ec:	4b36      	ldr	r3, [pc, #216]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a35      	ldr	r2, [pc, #212]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f8:	f7fc ffa8 	bl	800224c <HAL_GetTick>
 80052fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052fe:	e009      	b.n	8005314 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005300:	f7fc ffa4 	bl	800224c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d902      	bls.n	8005314 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	73fb      	strb	r3, [r7, #15]
        break;
 8005312:	e005      	b.n	8005320 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005314:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ef      	bne.n	8005300 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d14a      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d111      	bne.n	8005350 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800532c:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	0211      	lsls	r1, r2, #8
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	0912      	lsrs	r2, r2, #4
 8005344:	0452      	lsls	r2, r2, #17
 8005346:	430a      	orrs	r2, r1
 8005348:	491f      	ldr	r1, [pc, #124]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	614b      	str	r3, [r1, #20]
 800534e:	e011      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005358:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6892      	ldr	r2, [r2, #8]
 8005360:	0211      	lsls	r1, r2, #8
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6912      	ldr	r2, [r2, #16]
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	3a01      	subs	r2, #1
 800536a:	0652      	lsls	r2, r2, #25
 800536c:	430a      	orrs	r2, r1
 800536e:	4916      	ldr	r1, [pc, #88]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fc ff64 	bl	800224c <HAL_GetTick>
 8005384:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005386:	e009      	b.n	800539c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005388:	f7fc ff60 	bl	800224c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d902      	bls.n	800539c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	73fb      	strb	r3, [r7, #15]
          break;
 800539a:	e005      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ef      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	4904      	ldr	r1, [pc, #16]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000

080053cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e095      	b.n	800550a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d108      	bne.n	80053f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ee:	d009      	beq.n	8005404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	61da      	str	r2, [r3, #28]
 80053f6:	e005      	b.n	8005404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc f91c 	bl	800165c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005444:	d902      	bls.n	800544c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e002      	b.n	8005452 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800544c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005450:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800545a:	d007      	beq.n	800546c <HAL_SPI_Init+0xa0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005464:	d002      	beq.n	800546c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	ea42 0103 	orr.w	r1, r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f003 0204 	and.w	r2, r3, #4
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054e8:	ea42 0103 	orr.w	r1, r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e049      	b.n	80055b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f841 	bl	80055c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f000 f9f7 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e04f      	b.n	800568c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a23      	ldr	r2, [pc, #140]	; (8005698 <HAL_TIM_Base_Start_IT+0xc4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d018      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <HAL_TIM_Base_Start_IT+0xc8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a19      	ldr	r2, [pc, #100]	; (80056ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d115      	bne.n	8005676 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005652:	4013      	ands	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b06      	cmp	r3, #6
 800565a:	d015      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005662:	d011      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e008      	b.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e000      	b.n	800568a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005688:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	00010007 	.word	0x00010007

080056b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0202 	mvn.w	r2, #2
 80056e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f905 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8f7 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f908 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b04      	cmp	r3, #4
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0204 	mvn.w	r2, #4
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8db 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8cd 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f8de 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b08      	cmp	r3, #8
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b08      	cmp	r3, #8
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0208 	mvn.w	r2, #8
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2204      	movs	r2, #4
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8b1 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8a3 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8b4 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0210 	mvn.w	r2, #16
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2208      	movs	r2, #8
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f887 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f879 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f88a 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b01      	cmp	r3, #1
 8005818:	d10e      	bne.n	8005838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0201 	mvn.w	r2, #1
 8005830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb fda8 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d10e      	bne.n	8005864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d107      	bne.n	8005864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f914 	bl	8005a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005872:	d10e      	bne.n	8005892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d107      	bne.n	8005892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800588a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f907 	bl	8005aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d10e      	bne.n	80058be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d107      	bne.n	80058be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f838 	bl	800592e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d10e      	bne.n	80058ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d107      	bne.n	80058ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f06f 0220 	mvn.w	r2, #32
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8c7 	bl	8005a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a40      	ldr	r2, [pc, #256]	; (8005a58 <TIM_Base_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3d      	ldr	r2, [pc, #244]	; (8005a5c <TIM_Base_SetConfig+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3c      	ldr	r2, [pc, #240]	; (8005a60 <TIM_Base_SetConfig+0x11c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3b      	ldr	r2, [pc, #236]	; (8005a64 <TIM_Base_SetConfig+0x120>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3a      	ldr	r2, [pc, #232]	; (8005a68 <TIM_Base_SetConfig+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <TIM_Base_SetConfig+0x114>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <TIM_Base_SetConfig+0x118>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <TIM_Base_SetConfig+0x11c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <TIM_Base_SetConfig+0x120>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <TIM_Base_SetConfig+0x124>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a28      	ldr	r2, [pc, #160]	; (8005a6c <TIM_Base_SetConfig+0x128>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a27      	ldr	r2, [pc, #156]	; (8005a70 <TIM_Base_SetConfig+0x12c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <TIM_Base_SetConfig+0x130>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <TIM_Base_SetConfig+0x114>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00f      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a11      	ldr	r2, [pc, #68]	; (8005a6c <TIM_Base_SetConfig+0x128>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <TIM_Base_SetConfig+0x12c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <TIM_Base_SetConfig+0x130>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d103      	bne.n	8005a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	615a      	str	r2, [r3, #20]
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40013400 	.word	0x40013400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800

08005a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e040      	b.n	8005b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fb fe04 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2224      	movs	r2, #36	; 0x24
 8005ae0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8c0 	bl	8005c78 <UART_SetConfig>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e022      	b.n	8005b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fb6c 	bl	80061e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fbf3 	bl	800632c <UART_CheckIdleState>
 8005b46:	4603      	mov	r3, r0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	f040 8082 	bne.w	8005c6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_Transmit+0x26>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e07a      	b.n	8005c70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Transmit+0x38>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e073      	b.n	8005c70 <HAL_UART_Transmit+0x120>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2221      	movs	r2, #33	; 0x21
 8005b9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9e:	f7fc fb55 	bl	800224c <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x80>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005be0:	e02d      	b.n	8005c3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2180      	movs	r1, #128	; 0x80
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fbe6 	bl	80063be <UART_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e039      	b.n	8005c70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	881a      	ldrh	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e008      	b.n	8005c2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	b292      	uxth	r2, r2
 8005c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1cb      	bne.n	8005be2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2200      	movs	r2, #0
 8005c52:	2140      	movs	r1, #64	; 0x40
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fbb2 	bl	80063be <UART_WaitOnFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e005      	b.n	8005c70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c7c:	b08a      	sub	sp, #40	; 0x28
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4ba4      	ldr	r3, [pc, #656]	; (8005f38 <UART_SetConfig+0x2c0>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a99      	ldr	r2, [pc, #612]	; (8005f3c <UART_SetConfig+0x2c4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a90      	ldr	r2, [pc, #576]	; (8005f40 <UART_SetConfig+0x2c8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d126      	bne.n	8005d50 <UART_SetConfig+0xd8>
 8005d02:	4b90      	ldr	r3, [pc, #576]	; (8005f44 <UART_SetConfig+0x2cc>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d81b      	bhi.n	8005d48 <UART_SetConfig+0xd0>
 8005d10:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <UART_SetConfig+0xa0>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e116      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005d30:	2302      	movs	r3, #2
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e112      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e10e      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e10a      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4e:	e106      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a7c      	ldr	r2, [pc, #496]	; (8005f48 <UART_SetConfig+0x2d0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d138      	bne.n	8005dcc <UART_SetConfig+0x154>
 8005d5a:	4b7a      	ldr	r3, [pc, #488]	; (8005f44 <UART_SetConfig+0x2cc>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f003 030c 	and.w	r3, r3, #12
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	d82d      	bhi.n	8005dc4 <UART_SetConfig+0x14c>
 8005d68:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0xf8>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005da5 	.word	0x08005da5
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	08005dc5 	.word	0x08005dc5
 8005d7c:	08005dc5 	.word	0x08005dc5
 8005d80:	08005db5 	.word	0x08005db5
 8005d84:	08005dc5 	.word	0x08005dc5
 8005d88:	08005dc5 	.word	0x08005dc5
 8005d8c:	08005dc5 	.word	0x08005dc5
 8005d90:	08005dad 	.word	0x08005dad
 8005d94:	08005dc5 	.word	0x08005dc5
 8005d98:	08005dc5 	.word	0x08005dc5
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005daa:	e0d8      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005dac:	2302      	movs	r3, #2
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db2:	e0d4      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dba:	e0d0      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e0cc      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e0c8      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a5e      	ldr	r2, [pc, #376]	; (8005f4c <UART_SetConfig+0x2d4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d125      	bne.n	8005e22 <UART_SetConfig+0x1aa>
 8005dd6:	4b5b      	ldr	r3, [pc, #364]	; (8005f44 <UART_SetConfig+0x2cc>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005de0:	2b30      	cmp	r3, #48	; 0x30
 8005de2:	d016      	beq.n	8005e12 <UART_SetConfig+0x19a>
 8005de4:	2b30      	cmp	r3, #48	; 0x30
 8005de6:	d818      	bhi.n	8005e1a <UART_SetConfig+0x1a2>
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d00a      	beq.n	8005e02 <UART_SetConfig+0x18a>
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d814      	bhi.n	8005e1a <UART_SetConfig+0x1a2>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <UART_SetConfig+0x182>
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d008      	beq.n	8005e0a <UART_SetConfig+0x192>
 8005df8:	e00f      	b.n	8005e1a <UART_SetConfig+0x1a2>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e00:	e0ad      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e02:	2302      	movs	r3, #2
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e08:	e0a9      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e10:	e0a5      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e12:	2308      	movs	r3, #8
 8005e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e18:	e0a1      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e1a:	2310      	movs	r3, #16
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e20:	e09d      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a4a      	ldr	r2, [pc, #296]	; (8005f50 <UART_SetConfig+0x2d8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d125      	bne.n	8005e78 <UART_SetConfig+0x200>
 8005e2c:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <UART_SetConfig+0x2cc>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e36:	2bc0      	cmp	r3, #192	; 0xc0
 8005e38:	d016      	beq.n	8005e68 <UART_SetConfig+0x1f0>
 8005e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e3c:	d818      	bhi.n	8005e70 <UART_SetConfig+0x1f8>
 8005e3e:	2b80      	cmp	r3, #128	; 0x80
 8005e40:	d00a      	beq.n	8005e58 <UART_SetConfig+0x1e0>
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d814      	bhi.n	8005e70 <UART_SetConfig+0x1f8>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <UART_SetConfig+0x1d8>
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x1e8>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x1f8>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e082      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e07e      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e07a      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e076      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e072      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a35      	ldr	r2, [pc, #212]	; (8005f54 <UART_SetConfig+0x2dc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d12a      	bne.n	8005ed8 <UART_SetConfig+0x260>
 8005e82:	4b30      	ldr	r3, [pc, #192]	; (8005f44 <UART_SetConfig+0x2cc>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e90:	d01a      	beq.n	8005ec8 <UART_SetConfig+0x250>
 8005e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e96:	d81b      	bhi.n	8005ed0 <UART_SetConfig+0x258>
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9c:	d00c      	beq.n	8005eb8 <UART_SetConfig+0x240>
 8005e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea2:	d815      	bhi.n	8005ed0 <UART_SetConfig+0x258>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <UART_SetConfig+0x238>
 8005ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eac:	d008      	beq.n	8005ec0 <UART_SetConfig+0x248>
 8005eae:	e00f      	b.n	8005ed0 <UART_SetConfig+0x258>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e052      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ebe:	e04e      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec6:	e04a      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ece:	e046      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e042      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <UART_SetConfig+0x2c4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d13a      	bne.n	8005f58 <UART_SetConfig+0x2e0>
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <UART_SetConfig+0x2cc>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ef0:	d01a      	beq.n	8005f28 <UART_SetConfig+0x2b0>
 8005ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ef6:	d81b      	bhi.n	8005f30 <UART_SetConfig+0x2b8>
 8005ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efc:	d00c      	beq.n	8005f18 <UART_SetConfig+0x2a0>
 8005efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f02:	d815      	bhi.n	8005f30 <UART_SetConfig+0x2b8>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <UART_SetConfig+0x298>
 8005f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0c:	d008      	beq.n	8005f20 <UART_SetConfig+0x2a8>
 8005f0e:	e00f      	b.n	8005f30 <UART_SetConfig+0x2b8>
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e022      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e01e      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005f20:	2304      	movs	r3, #4
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e01a      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005f28:	2308      	movs	r3, #8
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2e:	e016      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005f30:	2310      	movs	r3, #16
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f36:	e012      	b.n	8005f5e <UART_SetConfig+0x2e6>
 8005f38:	efff69f3 	.word	0xefff69f3
 8005f3c:	40008000 	.word	0x40008000
 8005f40:	40013800 	.word	0x40013800
 8005f44:	40021000 	.word	0x40021000
 8005f48:	40004400 	.word	0x40004400
 8005f4c:	40004800 	.word	0x40004800
 8005f50:	40004c00 	.word	0x40004c00
 8005f54:	40005000 	.word	0x40005000
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a9f      	ldr	r2, [pc, #636]	; (80061e0 <UART_SetConfig+0x568>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d17a      	bne.n	800605e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d824      	bhi.n	8005fba <UART_SetConfig+0x342>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x300>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005fbb 	.word	0x08005fbb
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fbb 	.word	0x08005fbb
 8005f88:	08005fab 	.word	0x08005fab
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005fbb 	.word	0x08005fbb
 8005f94:	08005fbb 	.word	0x08005fbb
 8005f98:	08005fb3 	.word	0x08005fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f9c:	f7fe fc8c 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8005fa0:	61f8      	str	r0, [r7, #28]
        break;
 8005fa2:	e010      	b.n	8005fc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa4:	4b8f      	ldr	r3, [pc, #572]	; (80061e4 <UART_SetConfig+0x56c>)
 8005fa6:	61fb      	str	r3, [r7, #28]
        break;
 8005fa8:	e00d      	b.n	8005fc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005faa:	f7fe fbed 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8005fae:	61f8      	str	r0, [r7, #28]
        break;
 8005fb0:	e009      	b.n	8005fc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	61fb      	str	r3, [r7, #28]
        break;
 8005fb8:	e005      	b.n	8005fc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80fb 	beq.w	80061c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d305      	bcc.n	8005fea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d903      	bls.n	8005ff2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ff0:	e0e8      	b.n	80061c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	022b      	lsls	r3, r5, #8
 8006004:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006008:	0222      	lsls	r2, r4, #8
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6849      	ldr	r1, [r1, #4]
 800600e:	0849      	lsrs	r1, r1, #1
 8006010:	2000      	movs	r0, #0
 8006012:	4688      	mov	r8, r1
 8006014:	4681      	mov	r9, r0
 8006016:	eb12 0a08 	adds.w	sl, r2, r8
 800601a:	eb43 0b09 	adc.w	fp, r3, r9
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602c:	4650      	mov	r0, sl
 800602e:	4659      	mov	r1, fp
 8006030:	f7fa fb02 	bl	8000638 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4613      	mov	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006042:	d308      	bcc.n	8006056 <UART_SetConfig+0x3de>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d204      	bcs.n	8006056 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	e0b6      	b.n	80061c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800605c:	e0b2      	b.n	80061c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006066:	d15e      	bne.n	8006126 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800606c:	2b08      	cmp	r3, #8
 800606e:	d828      	bhi.n	80060c2 <UART_SetConfig+0x44a>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x400>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060c3 	.word	0x080060c3
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe fc0c 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 80060a0:	61f8      	str	r0, [r7, #28]
        break;
 80060a2:	e014      	b.n	80060ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fe fc1e 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 80060a8:	61f8      	str	r0, [r7, #28]
        break;
 80060aa:	e010      	b.n	80060ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <UART_SetConfig+0x56c>)
 80060ae:	61fb      	str	r3, [r7, #28]
        break;
 80060b0:	e00d      	b.n	80060ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fe fb69 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 80060b6:	61f8      	str	r0, [r7, #28]
        break;
 80060b8:	e009      	b.n	80060ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	61fb      	str	r3, [r7, #28]
        break;
 80060c0:	e005      	b.n	80060ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d077      	beq.n	80061c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	005a      	lsls	r2, r3, #1
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	441a      	add	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b0f      	cmp	r3, #15
 80060ee:	d916      	bls.n	800611e <UART_SetConfig+0x4a6>
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f6:	d212      	bcs.n	800611e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f023 030f 	bic.w	r3, r3, #15
 8006100:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	b29a      	uxth	r2, r3
 800610e:	8afb      	ldrh	r3, [r7, #22]
 8006110:	4313      	orrs	r3, r2
 8006112:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	8afa      	ldrh	r2, [r7, #22]
 800611a:	60da      	str	r2, [r3, #12]
 800611c:	e052      	b.n	80061c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006124:	e04e      	b.n	80061c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800612a:	2b08      	cmp	r3, #8
 800612c:	d827      	bhi.n	800617e <UART_SetConfig+0x506>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0x4bc>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006159 	.word	0x08006159
 8006138:	08006161 	.word	0x08006161
 800613c:	08006169 	.word	0x08006169
 8006140:	0800617f 	.word	0x0800617f
 8006144:	0800616f 	.word	0x0800616f
 8006148:	0800617f 	.word	0x0800617f
 800614c:	0800617f 	.word	0x0800617f
 8006150:	0800617f 	.word	0x0800617f
 8006154:	08006177 	.word	0x08006177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006158:	f7fe fbae 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 800615c:	61f8      	str	r0, [r7, #28]
        break;
 800615e:	e014      	b.n	800618a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006160:	f7fe fbc0 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 8006164:	61f8      	str	r0, [r7, #28]
        break;
 8006166:	e010      	b.n	800618a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <UART_SetConfig+0x56c>)
 800616a:	61fb      	str	r3, [r7, #28]
        break;
 800616c:	e00d      	b.n	800618a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616e:	f7fe fb0b 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8006172:	61f8      	str	r0, [r7, #28]
        break;
 8006174:	e009      	b.n	800618a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617a:	61fb      	str	r3, [r7, #28]
        break;
 800617c:	e005      	b.n	800618a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006188:	bf00      	nop
    }

    if (pclk != 0U)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d019      	beq.n	80061c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	085a      	lsrs	r2, r3, #1
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	441a      	add	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b0f      	cmp	r3, #15
 80061a8:	d909      	bls.n	80061be <UART_SetConfig+0x546>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b0:	d205      	bcs.n	80061be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	e002      	b.n	80061c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3728      	adds	r7, #40	; 0x28
 80061d8:	46bd      	mov	sp, r7
 80061da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061de:	bf00      	nop
 80061e0:	40008000 	.word	0x40008000
 80061e4:	00f42400 	.word	0x00f42400

080061e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01a      	beq.n	80062fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e6:	d10a      	bne.n	80062fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800633c:	f7fb ff86 	bl	800224c <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d10e      	bne.n	800636e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f82d 	bl	80063be <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e023      	b.n	80063b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b04      	cmp	r3, #4
 800637a:	d10e      	bne.n	800639a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f817 	bl	80063be <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e00d      	b.n	80063b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b09c      	sub	sp, #112	; 0x70
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ce:	e0a5      	b.n	800651c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	f000 80a1 	beq.w	800651c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fb ff37 	bl	800224c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80063ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d13e      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006404:	667b      	str	r3, [r7, #100]	; 0x64
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800640e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006410:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800641c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e6      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	663b      	str	r3, [r7, #96]	; 0x60
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006442:	64ba      	str	r2, [r7, #72]	; 0x48
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e067      	b.n	800653e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d04f      	beq.n	800651c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648a:	d147      	bne.n	800651c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006494:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
 80064b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	613b      	str	r3, [r7, #16]
   return(result);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	66bb      	str	r3, [r7, #104]	; 0x68
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064e8:	623a      	str	r2, [r7, #32]
 80064ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	69f9      	ldr	r1, [r7, #28]
 80064ee:	6a3a      	ldr	r2, [r7, #32]
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e010      	b.n	800653e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69da      	ldr	r2, [r3, #28]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	f43f af4a 	beq.w	80063d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3770      	adds	r7, #112	; 0x70
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006546:	b084      	sub	sp, #16
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	f107 001c 	add.w	r0, r7, #28
 8006554:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fa6f 	bl	8006a48 <USB_CoreReset>
 800656a:	4603      	mov	r3, r0
 800656c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800656e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
 8006580:	e005      	b.n	800658e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800659a:	b004      	add	sp, #16
 800659c:	4770      	bx	lr

0800659e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 0201 	bic.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d115      	bne.n	800660e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ee:	2001      	movs	r0, #1
 80065f0:	f7fb fe38 	bl	8002264 <HAL_Delay>
      ms++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa16 	bl	8006a2c <USB_GetMode>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d01e      	beq.n	8006644 <USB_SetCurrentMode+0x84>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b31      	cmp	r3, #49	; 0x31
 800660a:	d9f0      	bls.n	80065ee <USB_SetCurrentMode+0x2e>
 800660c:	e01a      	b.n	8006644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d115      	bne.n	8006640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006620:	2001      	movs	r0, #1
 8006622:	f7fb fe1f 	bl	8002264 <HAL_Delay>
      ms++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f9fd 	bl	8006a2c <USB_GetMode>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <USB_SetCurrentMode+0x84>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b31      	cmp	r3, #49	; 0x31
 800663c:	d9f0      	bls.n	8006620 <USB_SetCurrentMode+0x60>
 800663e:	e001      	b.n	8006644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e005      	b.n	8006650 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b32      	cmp	r3, #50	; 0x32
 8006648:	d101      	bne.n	800664e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006658:	b084      	sub	sp, #16
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006672:	2300      	movs	r3, #0
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e009      	b.n	800668c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3340      	adds	r3, #64	; 0x40
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	2200      	movs	r2, #0
 8006684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b0e      	cmp	r3, #14
 8006690:	d9f2      	bls.n	8006678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11c      	bne.n	80066d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a6:	f043 0302 	orr.w	r3, r3, #2
 80066aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e005      	b.n	80066de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066e4:	461a      	mov	r2, r3
 80066e6:	2300      	movs	r3, #0
 80066e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	4619      	mov	r1, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	461a      	mov	r2, r3
 80066fa:	680b      	ldr	r3, [r1, #0]
 80066fc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066fe:	2103      	movs	r1, #3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f959 	bl	80069b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006706:	2110      	movs	r1, #16
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8f1 	bl	80068f0 <USB_FlushTxFifo>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f91d 	bl	8006958 <USB_FlushRxFifo>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	461a      	mov	r2, r3
 8006730:	2300      	movs	r3, #0
 8006732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	461a      	mov	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	461a      	mov	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	e043      	b.n	80067da <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d118      	bne.n	800679c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	e013      	b.n	80067ae <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	461a      	mov	r2, r3
 8006794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e008      	b.n	80067ae <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	461a      	mov	r2, r3
 80067aa:	2300      	movs	r3, #0
 80067ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	461a      	mov	r2, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	461a      	mov	r2, r3
 80067ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3301      	adds	r3, #1
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3b7      	bcc.n	8006752 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	e043      	b.n	8006870 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067fe:	d118      	bne.n	8006832 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006812:	461a      	mov	r2, r3
 8006814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e013      	b.n	8006844 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006828:	461a      	mov	r2, r3
 800682a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e008      	b.n	8006844 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	461a      	mov	r2, r3
 8006852:	2300      	movs	r3, #0
 8006854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	461a      	mov	r2, r3
 8006864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3301      	adds	r3, #1
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d3b7      	bcc.n	80067e8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800688a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f043 0210 	orr.w	r2, r3, #16
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <USB_DevInit+0x294>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	f043 0208 	orr.w	r2, r3, #8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d107      	bne.n	80068da <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068da:	7dfb      	ldrb	r3, [r7, #23]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e6:	b004      	add	sp, #16
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	803c3800 	.word	0x803c3800

080068f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a13      	ldr	r2, [pc, #76]	; (8006954 <USB_FlushTxFifo+0x64>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e01b      	b.n	8006948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	daf2      	bge.n	80068fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	019b      	lsls	r3, r3, #6
 8006920:	f043 0220 	orr.w	r2, r3, #32
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a08      	ldr	r2, [pc, #32]	; (8006954 <USB_FlushTxFifo+0x64>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e006      	b.n	8006948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b20      	cmp	r3, #32
 8006944:	d0f0      	beq.n	8006928 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	00030d40 	.word	0x00030d40

08006958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3301      	adds	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a11      	ldr	r2, [pc, #68]	; (80069b4 <USB_FlushRxFifo+0x5c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d901      	bls.n	8006976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e018      	b.n	80069a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	daf2      	bge.n	8006964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2210      	movs	r2, #16
 8006986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <USB_FlushRxFifo+0x5c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e006      	b.n	80069a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	2b10      	cmp	r3, #16
 80069a4:	d0f0      	beq.n	8006988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	00030d40 	.word	0x00030d40

080069b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d8:	4313      	orrs	r3, r2
 80069da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a18:	f043 0302 	orr.w	r3, r3, #2
 8006a1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0301 	and.w	r3, r3, #1
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <USB_CoreReset+0x64>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d901      	bls.n	8006a66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e01b      	b.n	8006a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	daf2      	bge.n	8006a54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a09      	ldr	r2, [pc, #36]	; (8006aac <USB_CoreReset+0x64>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e006      	b.n	8006a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d0f0      	beq.n	8006a7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	00030d40 	.word	0x00030d40

08006ab0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ac2:	2b84      	cmp	r3, #132	; 0x84
 8006ac4:	d005      	beq.n	8006ad2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	3303      	adds	r3, #3
 8006ad0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae6:	f3ef 8305 	mrs	r3, IPSR
 8006aea:	607b      	str	r3, [r7, #4]
  return(result);
 8006aec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bf14      	ite	ne
 8006af2:	2301      	movne	r3, #1
 8006af4:	2300      	moveq	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b08:	f001 f926 	bl	8007d58 <vTaskStartScheduler>
  
  return osOK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b14:	b089      	sub	sp, #36	; 0x24
 8006b16:	af04      	add	r7, sp, #16
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <osThreadCreate+0x54>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01c      	beq.n	8006b66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685c      	ldr	r4, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681d      	ldr	r5, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691e      	ldr	r6, [r3, #16]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff ffb6 	bl	8006ab0 <makeFreeRtosPriority>
 8006b44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b4e:	9202      	str	r2, [sp, #8]
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	9100      	str	r1, [sp, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4632      	mov	r2, r6
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 ff1e 	bl	800799c <xTaskCreateStatic>
 8006b60:	4603      	mov	r3, r0
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e01c      	b.n	8006ba0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685c      	ldr	r4, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b72:	b29e      	uxth	r6, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff ff98 	bl	8006ab0 <makeFreeRtosPriority>
 8006b80:	4602      	mov	r2, r0
 8006b82:	f107 030c 	add.w	r3, r7, #12
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	9200      	str	r2, [sp, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 ff60 	bl	8007a56 <xTaskCreate>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d001      	beq.n	8006ba0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e000      	b.n	8006ba2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006baa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <osDelay+0x16>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	e000      	b.n	8006bc2 <osDelay+0x18>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 f894 	bl	8007cf0 <vTaskDelay>
  
  return osOK;
 8006bc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b086      	sub	sp, #24
 8006bd6:	af02      	add	r7, sp, #8
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00f      	beq.n	8006c04 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10a      	bne.n	8006c00 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	9200      	str	r2, [sp, #0]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f000 f9be 	bl	8006f78 <xQueueGenericCreateStatic>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	e016      	b.n	8006c2e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e014      	b.n	8006c2e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d110      	bne.n	8006c2c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	2001      	movs	r0, #1
 8006c10:	f000 fa2a 	bl	8007068 <xQueueGenericCreate>
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <osSemaphoreCreate+0x56>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fa7a 	bl	800711c <xQueueGenericSend>
      return sema;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e000      	b.n	8006c2e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006c2c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	e03a      	b.n	8006cc6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d103      	bne.n	8006c64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e009      	b.n	8006c78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <osSemaphoreWait+0x40>
      ticks = 1;
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006c78:	f7ff ff32 	bl	8006ae0 <inHandlerMode>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	461a      	mov	r2, r3
 8006c88:	2100      	movs	r1, #0
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fcde 	bl	800764c <xQueueReceiveFromISR>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d001      	beq.n	8006c9a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	e015      	b.n	8006cc6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d011      	beq.n	8006cc4 <osSemaphoreWait+0x8c>
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <osSemaphoreWait+0x98>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	e008      	b.n	8006cc4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fbbd 	bl	8007434 <xQueueSemaphoreTake>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d001      	beq.n	8006cc4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006cc0:	23ff      	movs	r3, #255	; 0xff
 8006cc2:	e000      	b.n	8006cc6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006ce4:	f7ff fefc 	bl	8006ae0 <inHandlerMode>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d016      	beq.n	8006d1c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fb0f 	bl	8007318 <xQueueGiveFromISR>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d001      	beq.n	8006d04 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006d00:	23ff      	movs	r3, #255	; 0xff
 8006d02:	e017      	b.n	8006d34 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d013      	beq.n	8006d32 <osSemaphoreRelease+0x5e>
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <osSemaphoreRelease+0x68>)
 8006d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	e00a      	b.n	8006d32 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2100      	movs	r1, #0
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9fa 	bl	800711c <xQueueGenericSend>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d001      	beq.n	8006d32 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006d2e:	23ff      	movs	r3, #255	; 0xff
 8006d30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f103 0208 	add.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f103 0208 	add.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e00c      	b.n	8006e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3308      	adds	r3, #8
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e002      	b.n	8006e10 <vListInsert+0x2e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d2f6      	bcs.n	8006e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6852      	ldr	r2, [r2, #4]
 8006e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d103      	bne.n	8006e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ed2:	f001 fe9f 	bl	8008c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	3b01      	subs	r3, #1
 8006f04:	68f9      	ldr	r1, [r7, #12]
 8006f06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	22ff      	movs	r2, #255	; 0xff
 8006f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d114      	bne.n	8006f52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01a      	beq.n	8006f66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3310      	adds	r3, #16
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f961 	bl	80081fc <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <xQueueGenericReset+0xcc>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	e009      	b.n	8006f66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3310      	adds	r3, #16
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fef2 	bl	8006d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff feed 	bl	8006d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f66:	f001 fe85 	bl	8008c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f6a:	2301      	movs	r3, #1
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08e      	sub	sp, #56	; 0x38
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <xQueueGenericCreateStatic+0x52>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <xQueueGenericCreateStatic+0x56>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <xQueueGenericCreateStatic+0x58>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	623b      	str	r3, [r7, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <xQueueGenericCreateStatic+0x7e>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <xQueueGenericCreateStatic+0x82>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <xQueueGenericCreateStatic+0x84>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	61fb      	str	r3, [r7, #28]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007016:	2348      	movs	r3, #72	; 0x48
 8007018:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b48      	cmp	r3, #72	; 0x48
 800701e:	d00a      	beq.n	8007036 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	61bb      	str	r3, [r7, #24]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007036:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800704a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f83f 	bl	80070dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007060:	4618      	mov	r0, r3
 8007062:	3730      	adds	r7, #48	; 0x30
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xQueueGenericCreate+0x2a>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	613b      	str	r3, [r7, #16]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	3348      	adds	r3, #72	; 0x48
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fed9 	bl	8008e58 <pvPortMalloc>
 80070a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d011      	beq.n	80070d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3348      	adds	r3, #72	; 0x48
 80070b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070c0:	79fa      	ldrb	r2, [r7, #7]
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f805 	bl	80070dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070d2:	69bb      	ldr	r3, [r7, #24]
	}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e002      	b.n	80070fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800710a:	2101      	movs	r1, #1
 800710c:	69b8      	ldr	r0, [r7, #24]
 800710e:	f7ff fecb 	bl	8006ea8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08e      	sub	sp, #56	; 0x38
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800712a:	2300      	movs	r3, #0
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xQueueGenericSend+0x32>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d103      	bne.n	800715c <xQueueGenericSend+0x40>
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <xQueueGenericSend+0x44>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <xQueueGenericSend+0x46>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <xQueueGenericSend+0x60>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d103      	bne.n	800718a <xQueueGenericSend+0x6e>
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <xQueueGenericSend+0x72>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueGenericSend+0x74>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <xQueueGenericSend+0x8e>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	623b      	str	r3, [r7, #32]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071aa:	f001 f9e7 	bl	800857c <xTaskGetSchedulerState>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <xQueueGenericSend+0x9e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueGenericSend+0xa2>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericSend+0xa4>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueGenericSend+0xbe>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61fb      	str	r3, [r7, #28]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071da:	f001 fd1b 	bl	8008c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d302      	bcc.n	80071f0 <xQueueGenericSend+0xd4>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d129      	bne.n	8007244 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f6:	f000 fac1 	bl	800777c <prvCopyDataToQueue>
 80071fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d010      	beq.n	8007226 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fff7 	bl	80081fc <xTaskRemoveFromEventList>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d013      	beq.n	800723c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007214:	4b3f      	ldr	r3, [pc, #252]	; (8007314 <xQueueGenericSend+0x1f8>)
 8007216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	e00a      	b.n	800723c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d007      	beq.n	800723c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800722c:	4b39      	ldr	r3, [pc, #228]	; (8007314 <xQueueGenericSend+0x1f8>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800723c:	f001 fd1a 	bl	8008c74 <vPortExitCritical>
				return pdPASS;
 8007240:	2301      	movs	r3, #1
 8007242:	e063      	b.n	800730c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800724a:	f001 fd13 	bl	8008c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800724e:	2300      	movs	r3, #0
 8007250:	e05c      	b.n	800730c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007258:	f107 0314 	add.w	r3, r7, #20
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f82f 	bl	80082c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007262:	2301      	movs	r3, #1
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007266:	f001 fd05 	bl	8008c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800726a:	f000 fddf 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800726e:	f001 fcd1 	bl	8008c14 <vPortEnterCritical>
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007278:	b25b      	sxtb	r3, r3
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d103      	bne.n	8007288 <xQueueGenericSend+0x16c>
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800728e:	b25b      	sxtb	r3, r3
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d103      	bne.n	800729e <xQueueGenericSend+0x182>
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800729e:	f001 fce9 	bl	8008c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072a2:	1d3a      	adds	r2, r7, #4
 80072a4:	f107 0314 	add.w	r3, r7, #20
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f81e 	bl	80082ec <xTaskCheckForTimeOut>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d124      	bne.n	8007300 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b8:	f000 fb58 	bl	800796c <prvIsQueueFull>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d018      	beq.n	80072f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	3310      	adds	r3, #16
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ff72 	bl	80081b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d2:	f000 fae3 	bl	800789c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072d6:	f000 fdb7 	bl	8007e48 <xTaskResumeAll>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f47f af7c 	bne.w	80071da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072e2:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <xQueueGenericSend+0x1f8>)
 80072e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	e772      	b.n	80071da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072f6:	f000 fad1 	bl	800789c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072fa:	f000 fda5 	bl	8007e48 <xTaskResumeAll>
 80072fe:	e76c      	b.n	80071da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007302:	f000 facb 	bl	800789c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007306:	f000 fd9f 	bl	8007e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800730a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800730c:	4618      	mov	r0, r3
 800730e:	3738      	adds	r7, #56	; 0x38
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	e000ed04 	.word	0xe000ed04

08007318 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08e      	sub	sp, #56	; 0x38
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <xQueueGiveFromISR+0x48>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	61fb      	str	r3, [r7, #28]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <xQueueGiveFromISR+0x58>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <xQueueGiveFromISR+0x5c>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <xQueueGiveFromISR+0x5e>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <xQueueGiveFromISR+0x78>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	61bb      	str	r3, [r7, #24]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007390:	f001 fd22 	bl	8008dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007394:	f3ef 8211 	mrs	r2, BASEPRI
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	617a      	str	r2, [r7, #20]
 80073aa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073bc:	429a      	cmp	r2, r3
 80073be:	d22b      	bcs.n	8007418 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d112      	bne.n	8007402 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d016      	beq.n	8007412 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 ff07 	bl	80081fc <xTaskRemoveFromEventList>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00e      	beq.n	8007412 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2201      	movs	r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e007      	b.n	8007412 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007406:	3301      	adds	r3, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	b25a      	sxtb	r2, r3
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007412:	2301      	movs	r3, #1
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
 8007416:	e001      	b.n	800741c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007418:	2300      	movs	r3, #0
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007426:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800742a:	4618      	mov	r0, r3
 800742c:	3738      	adds	r7, #56	; 0x38
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08e      	sub	sp, #56	; 0x38
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007484:	f001 f87a 	bl	800857c <xTaskGetSchedulerState>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <xQueueSemaphoreTake+0x60>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <xQueueSemaphoreTake+0x64>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <xQueueSemaphoreTake+0x66>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	61bb      	str	r3, [r7, #24]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074b4:	f001 fbae 	bl	8008c14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d024      	beq.n	800750e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	1e5a      	subs	r2, r3, #1
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074d4:	f001 f9fa 	bl	80088cc <pvTaskIncrementMutexHeldCount>
 80074d8:	4602      	mov	r2, r0
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00f      	beq.n	8007506 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	3310      	adds	r3, #16
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fe86 	bl	80081fc <xTaskRemoveFromEventList>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074f6:	4b54      	ldr	r3, [pc, #336]	; (8007648 <xQueueSemaphoreTake+0x214>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007506:	f001 fbb5 	bl	8008c74 <vPortExitCritical>
				return pdPASS;
 800750a:	2301      	movs	r3, #1
 800750c:	e097      	b.n	800763e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d111      	bne.n	8007538 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	617b      	str	r3, [r7, #20]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007530:	f001 fba0 	bl	8008c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007534:	2300      	movs	r3, #0
 8007536:	e082      	b.n	800763e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800753e:	f107 030c 	add.w	r3, r7, #12
 8007542:	4618      	mov	r0, r3
 8007544:	f000 febc 	bl	80082c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800754c:	f001 fb92 	bl	8008c74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007550:	f000 fc6c 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007554:	f001 fb5e 	bl	8008c14 <vPortEnterCritical>
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800755e:	b25b      	sxtb	r3, r3
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d103      	bne.n	800756e <xQueueSemaphoreTake+0x13a>
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007574:	b25b      	sxtb	r3, r3
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d103      	bne.n	8007584 <xQueueSemaphoreTake+0x150>
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007584:	f001 fb76 	bl	8008c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007588:	463a      	mov	r2, r7
 800758a:	f107 030c 	add.w	r3, r7, #12
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f000 feab 	bl	80082ec <xTaskCheckForTimeOut>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d132      	bne.n	8007602 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800759c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800759e:	f000 f9cf 	bl	8007940 <prvIsQueueEmpty>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d026      	beq.n	80075f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075b0:	f001 fb30 	bl	8008c14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fffd 	bl	80085b8 <xTaskPriorityInherit>
 80075be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075c0:	f001 fb58 	bl	8008c74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	4611      	mov	r1, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fdf1 	bl	80081b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075d4:	f000 f962 	bl	800789c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075d8:	f000 fc36 	bl	8007e48 <xTaskResumeAll>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f47f af68 	bne.w	80074b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <xQueueSemaphoreTake+0x214>)
 80075e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	e75e      	b.n	80074b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075f8:	f000 f950 	bl	800789c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075fc:	f000 fc24 	bl	8007e48 <xTaskResumeAll>
 8007600:	e758      	b.n	80074b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007604:	f000 f94a 	bl	800789c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007608:	f000 fc1e 	bl	8007e48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800760c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800760e:	f000 f997 	bl	8007940 <prvIsQueueEmpty>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	f43f af4d 	beq.w	80074b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007620:	f001 faf8 	bl	8008c14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007626:	f000 f891 	bl	800774c <prvGetDisinheritPriorityAfterTimeout>
 800762a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f8bc 	bl	80087b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007638:	f001 fb1c 	bl	8008c74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800763c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800763e:	4618      	mov	r0, r3
 8007640:	3738      	adds	r7, #56	; 0x38
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	623b      	str	r3, [r7, #32]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <xQueueReceiveFromISR+0x3a>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <xQueueReceiveFromISR+0x3e>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <xQueueReceiveFromISR+0x40>
 800768a:	2300      	movs	r3, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	61fb      	str	r3, [r7, #28]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a6:	f001 fb97 	bl	8008dd8 <vPortValidateInterruptPriority>
	__asm volatile
 80076aa:	f3ef 8211 	mrs	r2, BASEPRI
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	61ba      	str	r2, [r7, #24]
 80076c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d02f      	beq.n	8007732 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e0:	f000 f8b6 	bl	8007850 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d112      	bne.n	800771c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	3310      	adds	r3, #16
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fd7a 	bl	80081fc <xTaskRemoveFromEventList>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e007      	b.n	800772c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800771c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007720:	3301      	adds	r3, #1
 8007722:	b2db      	uxtb	r3, r3
 8007724:	b25a      	sxtb	r2, r3
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800772c:	2301      	movs	r3, #1
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
 8007730:	e001      	b.n	8007736 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f383 8811 	msr	BASEPRI, r3
}
 8007740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007744:	4618      	mov	r0, r3
 8007746:	3738      	adds	r7, #56	; 0x38
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d006      	beq.n	800776a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f1c3 0307 	rsb	r3, r3, #7
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e001      	b.n	800776e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800776e:	68fb      	ldr	r3, [r7, #12]
	}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10d      	bne.n	80077b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d14d      	bne.n	800783e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 ff7c 	bl	80086a4 <xTaskPriorityDisinherit>
 80077ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	e043      	b.n	800783e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d119      	bne.n	80077f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6858      	ldr	r0, [r3, #4]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	461a      	mov	r2, r3
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	f001 fd5c 	bl	8009284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d32b      	bcc.n	800783e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	e026      	b.n	800783e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68d8      	ldr	r0, [r3, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	461a      	mov	r2, r3
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	f001 fd42 	bl	8009284 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	425b      	negs	r3, r3
 800780a:	441a      	add	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68da      	ldr	r2, [r3, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d207      	bcs.n	800782c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	425b      	negs	r3, r3
 8007826:	441a      	add	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d105      	bne.n	800783e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	3b01      	subs	r3, #1
 800783c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007846:	697b      	ldr	r3, [r7, #20]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d018      	beq.n	8007894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	441a      	add	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	d303      	bcc.n	8007884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68d9      	ldr	r1, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	461a      	mov	r2, r3
 800788e:	6838      	ldr	r0, [r7, #0]
 8007890:	f001 fcf8 	bl	8009284 <memcpy>
	}
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078a4:	f001 f9b6 	bl	8008c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078b0:	e011      	b.n	80078d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d012      	beq.n	80078e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3324      	adds	r3, #36	; 0x24
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fc9c 	bl	80081fc <xTaskRemoveFromEventList>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078ca:	f000 fd71 	bl	80083b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dce9      	bgt.n	80078b2 <prvUnlockQueue+0x16>
 80078de:	e000      	b.n	80078e2 <prvUnlockQueue+0x46>
					break;
 80078e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	22ff      	movs	r2, #255	; 0xff
 80078e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078ea:	f001 f9c3 	bl	8008c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078ee:	f001 f991 	bl	8008c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078fa:	e011      	b.n	8007920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d012      	beq.n	800792a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3310      	adds	r3, #16
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fc77 	bl	80081fc <xTaskRemoveFromEventList>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007914:	f000 fd4c 	bl	80083b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	3b01      	subs	r3, #1
 800791c:	b2db      	uxtb	r3, r3
 800791e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	dce9      	bgt.n	80078fc <prvUnlockQueue+0x60>
 8007928:	e000      	b.n	800792c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800792a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	22ff      	movs	r2, #255	; 0xff
 8007930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007934:	f001 f99e 	bl	8008c74 <vPortExitCritical>
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007948:	f001 f964 	bl	8008c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	e001      	b.n	800795e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800795e:	f001 f989 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 8007962:	68fb      	ldr	r3, [r7, #12]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007974:	f001 f94e 	bl	8008c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007980:	429a      	cmp	r2, r3
 8007982:	d102      	bne.n	800798a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e001      	b.n	800798e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800798e:	f001 f971 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 8007992:	68fb      	ldr	r3, [r7, #12]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08e      	sub	sp, #56	; 0x38
 80079a0:	af04      	add	r7, sp, #16
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	623b      	str	r3, [r7, #32]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	61fb      	str	r3, [r7, #28]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079e2:	23b4      	movs	r3, #180	; 0xb4
 80079e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2bb4      	cmp	r3, #180	; 0xb4
 80079ea:	d00a      	beq.n	8007a02 <xTaskCreateStatic+0x66>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	61bb      	str	r3, [r7, #24]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d01e      	beq.n	8007a48 <xTaskCreateStatic+0xac>
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01b      	beq.n	8007a48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a22:	2300      	movs	r3, #0
 8007a24:	9303      	str	r3, [sp, #12]
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	9302      	str	r3, [sp, #8]
 8007a2a:	f107 0314 	add.w	r3, r7, #20
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f850 	bl	8007ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a42:	f000 f8eb 	bl	8007c1c <prvAddNewTaskToReadyList>
 8007a46:	e001      	b.n	8007a4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a4c:	697b      	ldr	r3, [r7, #20]
	}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3728      	adds	r7, #40	; 0x28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b08c      	sub	sp, #48	; 0x30
 8007a5a:	af04      	add	r7, sp, #16
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	603b      	str	r3, [r7, #0]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 f9f4 	bl	8008e58 <pvPortMalloc>
 8007a70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a78:	20b4      	movs	r0, #180	; 0xb4
 8007a7a:	f001 f9ed 	bl	8008e58 <pvPortMalloc>
 8007a7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a8c:	e005      	b.n	8007a9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a8e:	6978      	ldr	r0, [r7, #20]
 8007a90:	f001 faae 	bl	8008ff0 <vPortFree>
 8007a94:	e001      	b.n	8007a9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	9302      	str	r3, [sp, #8]
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f80e 	bl	8007ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ac4:	69f8      	ldr	r0, [r7, #28]
 8007ac6:	f000 f8a9 	bl	8007c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	e002      	b.n	8007ad6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007af8:	3b01      	subs	r3, #1
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f023 0307 	bic.w	r3, r3, #7
 8007b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	617b      	str	r3, [r7, #20]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01f      	beq.n	8007b6e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e012      	b.n	8007b5a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	7819      	ldrb	r1, [r3, #0]
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	4413      	add	r3, r2
 8007b42:	3334      	adds	r3, #52	; 0x34
 8007b44:	460a      	mov	r2, r1
 8007b46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	3301      	adds	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	2b0f      	cmp	r3, #15
 8007b5e:	d9e9      	bls.n	8007b34 <prvInitialiseNewTask+0x54>
 8007b60:	e000      	b.n	8007b64 <prvInitialiseNewTask+0x84>
			{
				break;
 8007b62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b6c:	e003      	b.n	8007b76 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	2b06      	cmp	r3, #6
 8007b7a:	d901      	bls.n	8007b80 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b7c:	2306      	movs	r3, #6
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	2200      	movs	r2, #0
 8007b90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	3304      	adds	r3, #4
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff f8f2 	bl	8006d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	3318      	adds	r3, #24
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff f8ed 	bl	8006d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007baa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f1c3 0207 	rsb	r2, r3, #7
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	334c      	adds	r3, #76	; 0x4c
 8007bd0:	2260      	movs	r2, #96	; 0x60
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 fb63 	bl	80092a0 <memset>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <prvInitialiseNewTask+0x130>)
 8007bde:	651a      	str	r2, [r3, #80]	; 0x50
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	4a0c      	ldr	r2, [pc, #48]	; (8007c14 <prvInitialiseNewTask+0x134>)
 8007be4:	655a      	str	r2, [r3, #84]	; 0x54
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	4a0b      	ldr	r2, [pc, #44]	; (8007c18 <prvInitialiseNewTask+0x138>)
 8007bea:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	68f9      	ldr	r1, [r7, #12]
 8007bf0:	69b8      	ldr	r0, [r7, #24]
 8007bf2:	f000 fee5 	bl	80089c0 <pxPortInitialiseStack>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c08:	bf00      	nop
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	08009e00 	.word	0x08009e00
 8007c14:	08009e20 	.word	0x08009e20
 8007c18:	08009de0 	.word	0x08009de0

08007c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c24:	f000 fff6 	bl	8008c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c28:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <prvAddNewTaskToReadyList+0xb8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <prvAddNewTaskToReadyList+0xb8>)
 8007c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c32:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <prvAddNewTaskToReadyList+0xbc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c3a:	4a27      	ldr	r2, [pc, #156]	; (8007cd8 <prvAddNewTaskToReadyList+0xbc>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c40:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <prvAddNewTaskToReadyList+0xb8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d110      	bne.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c48:	f000 fbd6 	bl	80083f8 <prvInitialiseTaskLists>
 8007c4c:	e00d      	b.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c4e:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <prvAddNewTaskToReadyList+0xc0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c56:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <prvAddNewTaskToReadyList+0xbc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d802      	bhi.n	8007c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c64:	4a1c      	ldr	r2, [pc, #112]	; (8007cd8 <prvAddNewTaskToReadyList+0xbc>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <prvAddNewTaskToReadyList+0xc4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <prvAddNewTaskToReadyList+0xc4>)
 8007c72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	2201      	movs	r2, #1
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	4b19      	ldr	r3, [pc, #100]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <prvAddNewTaskToReadyList+0xc8>)
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <prvAddNewTaskToReadyList+0xcc>)
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7ff f87c 	bl	8006d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ca2:	f000 ffe7 	bl	8008c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <prvAddNewTaskToReadyList+0xc0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cae:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <prvAddNewTaskToReadyList+0xbc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d207      	bcs.n	8007ccc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <prvAddNewTaskToReadyList+0xd0>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20000e84 	.word	0x20000e84
 8007cd8:	20000d84 	.word	0x20000d84
 8007cdc:	20000e90 	.word	0x20000e90
 8007ce0:	20000ea0 	.word	0x20000ea0
 8007ce4:	20000e8c 	.word	0x20000e8c
 8007ce8:	20000d88 	.word	0x20000d88
 8007cec:	e000ed04 	.word	0xe000ed04

08007cf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d017      	beq.n	8007d32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <vTaskDelay+0x60>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <vTaskDelay+0x30>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	60bb      	str	r3, [r7, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d20:	f000 f884 	bl	8007e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d24:	2100      	movs	r1, #0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fde4 	bl	80088f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d2c:	f000 f88c 	bl	8007e48 <xTaskResumeAll>
 8007d30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d107      	bne.n	8007d48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <vTaskDelay+0x64>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000eac 	.word	0x20000eac
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d66:	463a      	mov	r2, r7
 8007d68:	1d39      	adds	r1, r7, #4
 8007d6a:	f107 0308 	add.w	r3, r7, #8
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f8 fde4 	bl	800093c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	9202      	str	r2, [sp, #8]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	460a      	mov	r2, r1
 8007d86:	4921      	ldr	r1, [pc, #132]	; (8007e0c <vTaskStartScheduler+0xb4>)
 8007d88:	4821      	ldr	r0, [pc, #132]	; (8007e10 <vTaskStartScheduler+0xb8>)
 8007d8a:	f7ff fe07 	bl	800799c <xTaskCreateStatic>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4a20      	ldr	r2, [pc, #128]	; (8007e14 <vTaskStartScheduler+0xbc>)
 8007d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d94:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <vTaskStartScheduler+0xbc>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e001      	b.n	8007da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d11b      	bne.n	8007de4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	613b      	str	r3, [r7, #16]
}
 8007dbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dc0:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <vTaskStartScheduler+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	334c      	adds	r3, #76	; 0x4c
 8007dc6:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <vTaskStartScheduler+0xc4>)
 8007dc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <vTaskStartScheduler+0xc8>)
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dd2:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <vTaskStartScheduler+0xcc>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd8:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <vTaskStartScheduler+0xd0>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dde:	f000 fe77 	bl	8008ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007de2:	e00e      	b.n	8007e02 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d10a      	bne.n	8007e02 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60fb      	str	r3, [r7, #12]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <vTaskStartScheduler+0xa8>
}
 8007e02:	bf00      	nop
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	08009d90 	.word	0x08009d90
 8007e10:	080083c9 	.word	0x080083c9
 8007e14:	20000ea8 	.word	0x20000ea8
 8007e18:	20000d84 	.word	0x20000d84
 8007e1c:	2000014c 	.word	0x2000014c
 8007e20:	20000ea4 	.word	0x20000ea4
 8007e24:	20000e90 	.word	0x20000e90
 8007e28:	20000e88 	.word	0x20000e88

08007e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <vTaskSuspendAll+0x18>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a03      	ldr	r2, [pc, #12]	; (8007e44 <vTaskSuspendAll+0x18>)
 8007e38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e3a:	bf00      	nop
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	20000eac 	.word	0x20000eac

08007e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e56:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10a      	bne.n	8007e74 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	603b      	str	r3, [r7, #0]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e74:	f000 fece 	bl	8008c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e78:	4b38      	ldr	r3, [pc, #224]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4a37      	ldr	r2, [pc, #220]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <xTaskResumeAll+0x114>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d161      	bne.n	8007f4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e8a:	4b35      	ldr	r3, [pc, #212]	; (8007f60 <xTaskResumeAll+0x118>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d05d      	beq.n	8007f4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e92:	e02e      	b.n	8007ef2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e94:	4b33      	ldr	r3, [pc, #204]	; (8007f64 <xTaskResumeAll+0x11c>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe ffd7 	bl	8006e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe ffd2 	bl	8006e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	4b2b      	ldr	r3, [pc, #172]	; (8007f68 <xTaskResumeAll+0x120>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	4a2a      	ldr	r2, [pc, #168]	; (8007f68 <xTaskResumeAll+0x120>)
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <xTaskResumeAll+0x124>)
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7fe ff5e 	bl	8006d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee2:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <xTaskResumeAll+0x128>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007eec:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <xTaskResumeAll+0x12c>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <xTaskResumeAll+0x11c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1cc      	bne.n	8007e94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f00:	f000 fb1c 	bl	800853c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f04:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <xTaskResumeAll+0x130>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f10:	f000 f836 	bl	8007f80 <xTaskIncrementTick>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <xTaskResumeAll+0x12c>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f1      	bne.n	8007f10 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007f2c:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <xTaskResumeAll+0x130>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <xTaskResumeAll+0x12c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <xTaskResumeAll+0x134>)
 8007f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f4e:	f000 fe91 	bl	8008c74 <vPortExitCritical>

	return xAlreadyYielded;
 8007f52:	68bb      	ldr	r3, [r7, #8]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000eac 	.word	0x20000eac
 8007f60:	20000e84 	.word	0x20000e84
 8007f64:	20000e44 	.word	0x20000e44
 8007f68:	20000e8c 	.word	0x20000e8c
 8007f6c:	20000d88 	.word	0x20000d88
 8007f70:	20000d84 	.word	0x20000d84
 8007f74:	20000e98 	.word	0x20000e98
 8007f78:	20000e94 	.word	0x20000e94
 8007f7c:	e000ed04 	.word	0xe000ed04

08007f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8a:	4b4e      	ldr	r3, [pc, #312]	; (80080c4 <xTaskIncrementTick+0x144>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 808e 	bne.w	80080b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f94:	4b4c      	ldr	r3, [pc, #304]	; (80080c8 <xTaskIncrementTick+0x148>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f9c:	4a4a      	ldr	r2, [pc, #296]	; (80080c8 <xTaskIncrementTick+0x148>)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d120      	bne.n	8007fea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa8:	4b48      	ldr	r3, [pc, #288]	; (80080cc <xTaskIncrementTick+0x14c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	603b      	str	r3, [r7, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	e7fe      	b.n	8007fc6 <xTaskIncrementTick+0x46>
 8007fc8:	4b40      	ldr	r3, [pc, #256]	; (80080cc <xTaskIncrementTick+0x14c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	4b40      	ldr	r3, [pc, #256]	; (80080d0 <xTaskIncrementTick+0x150>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a3e      	ldr	r2, [pc, #248]	; (80080cc <xTaskIncrementTick+0x14c>)
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	4a3e      	ldr	r2, [pc, #248]	; (80080d0 <xTaskIncrementTick+0x150>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4b3d      	ldr	r3, [pc, #244]	; (80080d4 <xTaskIncrementTick+0x154>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	4a3c      	ldr	r2, [pc, #240]	; (80080d4 <xTaskIncrementTick+0x154>)
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	f000 faa9 	bl	800853c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fea:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <xTaskIncrementTick+0x158>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d348      	bcc.n	8008086 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff4:	4b35      	ldr	r3, [pc, #212]	; (80080cc <xTaskIncrementTick+0x14c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffe:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <xTaskIncrementTick+0x158>)
 8008000:	f04f 32ff 	mov.w	r2, #4294967295
 8008004:	601a      	str	r2, [r3, #0]
					break;
 8008006:	e03e      	b.n	8008086 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008008:	4b30      	ldr	r3, [pc, #192]	; (80080cc <xTaskIncrementTick+0x14c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d203      	bcs.n	8008028 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008020:	4a2d      	ldr	r2, [pc, #180]	; (80080d8 <xTaskIncrementTick+0x158>)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008026:	e02e      	b.n	8008086 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3304      	adds	r3, #4
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe ff11 	bl	8006e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	2b00      	cmp	r3, #0
 8008038:	d004      	beq.n	8008044 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3318      	adds	r3, #24
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe ff08 	bl	8006e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	2201      	movs	r2, #1
 800804a:	409a      	lsls	r2, r3
 800804c:	4b23      	ldr	r3, [pc, #140]	; (80080dc <xTaskIncrementTick+0x15c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4313      	orrs	r3, r2
 8008052:	4a22      	ldr	r2, [pc, #136]	; (80080dc <xTaskIncrementTick+0x15c>)
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <xTaskIncrementTick+0x160>)
 8008064:	441a      	add	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	3304      	adds	r3, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f7fe fe94 	bl	8006d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008076:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <xTaskIncrementTick+0x164>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	429a      	cmp	r2, r3
 800807e:	d3b9      	bcc.n	8007ff4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008084:	e7b6      	b.n	8007ff4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008086:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <xTaskIncrementTick+0x164>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808c:	4914      	ldr	r1, [pc, #80]	; (80080e0 <xTaskIncrementTick+0x160>)
 800808e:	4613      	mov	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d901      	bls.n	80080a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800809e:	2301      	movs	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <xTaskIncrementTick+0x168>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80080aa:	2301      	movs	r3, #1
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	e004      	b.n	80080ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080b0:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <xTaskIncrementTick+0x16c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3301      	adds	r3, #1
 80080b6:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <xTaskIncrementTick+0x16c>)
 80080b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080ba:	697b      	ldr	r3, [r7, #20]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000eac 	.word	0x20000eac
 80080c8:	20000e88 	.word	0x20000e88
 80080cc:	20000e3c 	.word	0x20000e3c
 80080d0:	20000e40 	.word	0x20000e40
 80080d4:	20000e9c 	.word	0x20000e9c
 80080d8:	20000ea4 	.word	0x20000ea4
 80080dc:	20000e8c 	.word	0x20000e8c
 80080e0:	20000d88 	.word	0x20000d88
 80080e4:	20000d84 	.word	0x20000d84
 80080e8:	20000e98 	.word	0x20000e98
 80080ec:	20000e94 	.word	0x20000e94

080080f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080f6:	4b29      	ldr	r3, [pc, #164]	; (800819c <vTaskSwitchContext+0xac>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080fe:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <vTaskSwitchContext+0xb0>)
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008104:	e044      	b.n	8008190 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008106:	4b26      	ldr	r3, [pc, #152]	; (80081a0 <vTaskSwitchContext+0xb0>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810c:	4b25      	ldr	r3, [pc, #148]	; (80081a4 <vTaskSwitchContext+0xb4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	fab3 f383 	clz	r3, r3
 8008118:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800811a:	7afb      	ldrb	r3, [r7, #11]
 800811c:	f1c3 031f 	rsb	r3, r3, #31
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	4921      	ldr	r1, [pc, #132]	; (80081a8 <vTaskSwitchContext+0xb8>)
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	607b      	str	r3, [r7, #4]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <vTaskSwitchContext+0x5a>
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4a14      	ldr	r2, [pc, #80]	; (80081a8 <vTaskSwitchContext+0xb8>)
 8008158:	4413      	add	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	605a      	str	r2, [r3, #4]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3308      	adds	r3, #8
 800816e:	429a      	cmp	r2, r3
 8008170:	d104      	bne.n	800817c <vTaskSwitchContext+0x8c>
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	605a      	str	r2, [r3, #4]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <vTaskSwitchContext+0xbc>)
 8008184:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <vTaskSwitchContext+0xbc>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	334c      	adds	r3, #76	; 0x4c
 800818c:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <vTaskSwitchContext+0xc0>)
 800818e:	6013      	str	r3, [r2, #0]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20000eac 	.word	0x20000eac
 80081a0:	20000e98 	.word	0x20000e98
 80081a4:	20000e8c 	.word	0x20000e8c
 80081a8:	20000d88 	.word	0x20000d88
 80081ac:	20000d84 	.word	0x20000d84
 80081b0:	2000014c 	.word	0x2000014c

080081b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	60fb      	str	r3, [r7, #12]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081da:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <vTaskPlaceOnEventList+0x44>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3318      	adds	r3, #24
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7fe fdfd 	bl	8006de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081e8:	2101      	movs	r1, #1
 80081ea:	6838      	ldr	r0, [r7, #0]
 80081ec:	f000 fb82 	bl	80088f4 <prvAddCurrentTaskToDelayedList>
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000d84 	.word	0x20000d84

080081fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60fb      	str	r3, [r7, #12]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3318      	adds	r3, #24
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fe11 	bl	8006e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008232:	4b1d      	ldr	r3, [pc, #116]	; (80082a8 <xTaskRemoveFromEventList+0xac>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d11c      	bne.n	8008274 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	3304      	adds	r3, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fe08 	bl	8006e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	2201      	movs	r2, #1
 800824a:	409a      	lsls	r2, r3
 800824c:	4b17      	ldr	r3, [pc, #92]	; (80082ac <xTaskRemoveFromEventList+0xb0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4313      	orrs	r3, r2
 8008252:	4a16      	ldr	r2, [pc, #88]	; (80082ac <xTaskRemoveFromEventList+0xb0>)
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <xTaskRemoveFromEventList+0xb4>)
 8008264:	441a      	add	r2, r3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3304      	adds	r3, #4
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f7fe fd94 	bl	8006d9a <vListInsertEnd>
 8008272:	e005      	b.n	8008280 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	3318      	adds	r3, #24
 8008278:	4619      	mov	r1, r3
 800827a:	480e      	ldr	r0, [pc, #56]	; (80082b4 <xTaskRemoveFromEventList+0xb8>)
 800827c:	f7fe fd8d 	bl	8006d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <xTaskRemoveFromEventList+0xbc>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	429a      	cmp	r2, r3
 800828c:	d905      	bls.n	800829a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800828e:	2301      	movs	r3, #1
 8008290:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <xTaskRemoveFromEventList+0xc0>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e001      	b.n	800829e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800829e:	697b      	ldr	r3, [r7, #20]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000eac 	.word	0x20000eac
 80082ac:	20000e8c 	.word	0x20000e8c
 80082b0:	20000d88 	.word	0x20000d88
 80082b4:	20000e44 	.word	0x20000e44
 80082b8:	20000d84 	.word	0x20000d84
 80082bc:	20000e98 	.word	0x20000e98

080082c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082c8:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <vTaskInternalSetTimeOutState+0x24>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <vTaskInternalSetTimeOutState+0x28>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	605a      	str	r2, [r3, #4]
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	20000e9c 	.word	0x20000e9c
 80082e8:	20000e88 	.word	0x20000e88

080082ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	613b      	str	r3, [r7, #16]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	60fb      	str	r3, [r7, #12]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800832e:	f000 fc71 	bl	8008c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008332:	4b1d      	ldr	r3, [pc, #116]	; (80083a8 <xTaskCheckForTimeOut+0xbc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d102      	bne.n	8008352 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800834c:	2300      	movs	r3, #0
 800834e:	61fb      	str	r3, [r7, #28]
 8008350:	e023      	b.n	800839a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b15      	ldr	r3, [pc, #84]	; (80083ac <xTaskCheckForTimeOut+0xc0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d007      	beq.n	800836e <xTaskCheckForTimeOut+0x82>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	429a      	cmp	r2, r3
 8008366:	d302      	bcc.n	800836e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008368:	2301      	movs	r3, #1
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e015      	b.n	800839a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	429a      	cmp	r2, r3
 8008376:	d20b      	bcs.n	8008390 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff9b 	bl	80082c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800838a:	2300      	movs	r3, #0
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	e004      	b.n	800839a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008396:	2301      	movs	r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800839a:	f000 fc6b 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 800839e:	69fb      	ldr	r3, [r7, #28]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000e88 	.word	0x20000e88
 80083ac:	20000e9c 	.word	0x20000e9c

080083b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083b4:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <vTaskMissedYield+0x14>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20000e98 	.word	0x20000e98

080083c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083d0:	f000 f852 	bl	8008478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <prvIdleTask+0x28>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d9f9      	bls.n	80083d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <prvIdleTask+0x2c>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083ec:	e7f0      	b.n	80083d0 <prvIdleTask+0x8>
 80083ee:	bf00      	nop
 80083f0:	20000d88 	.word	0x20000d88
 80083f4:	e000ed04 	.word	0xe000ed04

080083f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083fe:	2300      	movs	r3, #0
 8008400:	607b      	str	r3, [r7, #4]
 8008402:	e00c      	b.n	800841e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4a12      	ldr	r2, [pc, #72]	; (8008458 <prvInitialiseTaskLists+0x60>)
 8008410:	4413      	add	r3, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fc94 	bl	8006d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3301      	adds	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b06      	cmp	r3, #6
 8008422:	d9ef      	bls.n	8008404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008424:	480d      	ldr	r0, [pc, #52]	; (800845c <prvInitialiseTaskLists+0x64>)
 8008426:	f7fe fc8b 	bl	8006d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800842a:	480d      	ldr	r0, [pc, #52]	; (8008460 <prvInitialiseTaskLists+0x68>)
 800842c:	f7fe fc88 	bl	8006d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008430:	480c      	ldr	r0, [pc, #48]	; (8008464 <prvInitialiseTaskLists+0x6c>)
 8008432:	f7fe fc85 	bl	8006d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008436:	480c      	ldr	r0, [pc, #48]	; (8008468 <prvInitialiseTaskLists+0x70>)
 8008438:	f7fe fc82 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800843c:	480b      	ldr	r0, [pc, #44]	; (800846c <prvInitialiseTaskLists+0x74>)
 800843e:	f7fe fc7f 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008442:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <prvInitialiseTaskLists+0x78>)
 8008444:	4a05      	ldr	r2, [pc, #20]	; (800845c <prvInitialiseTaskLists+0x64>)
 8008446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <prvInitialiseTaskLists+0x7c>)
 800844a:	4a05      	ldr	r2, [pc, #20]	; (8008460 <prvInitialiseTaskLists+0x68>)
 800844c:	601a      	str	r2, [r3, #0]
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000d88 	.word	0x20000d88
 800845c:	20000e14 	.word	0x20000e14
 8008460:	20000e28 	.word	0x20000e28
 8008464:	20000e44 	.word	0x20000e44
 8008468:	20000e58 	.word	0x20000e58
 800846c:	20000e70 	.word	0x20000e70
 8008470:	20000e3c 	.word	0x20000e3c
 8008474:	20000e40 	.word	0x20000e40

08008478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800847e:	e019      	b.n	80084b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008480:	f000 fbc8 	bl	8008c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <prvCheckTasksWaitingTermination+0x50>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3304      	adds	r3, #4
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fcdf 	bl	8006e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008496:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <prvCheckTasksWaitingTermination+0x54>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3b01      	subs	r3, #1
 800849c:	4a0b      	ldr	r2, [pc, #44]	; (80084cc <prvCheckTasksWaitingTermination+0x54>)
 800849e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <prvCheckTasksWaitingTermination+0x58>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <prvCheckTasksWaitingTermination+0x58>)
 80084a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084aa:	f000 fbe3 	bl	8008c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f810 	bl	80084d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084b4:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <prvCheckTasksWaitingTermination+0x58>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e1      	bne.n	8008480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000e58 	.word	0x20000e58
 80084cc:	20000e84 	.word	0x20000e84
 80084d0:	20000e6c 	.word	0x20000e6c

080084d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	334c      	adds	r3, #76	; 0x4c
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 ff87 	bl	80093f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d108      	bne.n	8008502 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fd7b 	bl	8008ff0 <vPortFree>
				vPortFree( pxTCB );
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fd78 	bl	8008ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008500:	e018      	b.n	8008534 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008508:	2b01      	cmp	r3, #1
 800850a:	d103      	bne.n	8008514 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fd6f 	bl	8008ff0 <vPortFree>
	}
 8008512:	e00f      	b.n	8008534 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800851a:	2b02      	cmp	r3, #2
 800851c:	d00a      	beq.n	8008534 <prvDeleteTCB+0x60>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <prvDeleteTCB+0x5e>
	}
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <prvResetNextTaskUnblockTime+0x38>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d104      	bne.n	8008556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <prvResetNextTaskUnblockTime+0x3c>)
 800854e:	f04f 32ff 	mov.w	r2, #4294967295
 8008552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008554:	e008      	b.n	8008568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <prvResetNextTaskUnblockTime+0x38>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4a04      	ldr	r2, [pc, #16]	; (8008578 <prvResetNextTaskUnblockTime+0x3c>)
 8008566:	6013      	str	r3, [r2, #0]
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	20000e3c 	.word	0x20000e3c
 8008578:	20000ea4 	.word	0x20000ea4

0800857c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008582:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <xTaskGetSchedulerState+0x34>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800858a:	2301      	movs	r3, #1
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	e008      	b.n	80085a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008590:	4b08      	ldr	r3, [pc, #32]	; (80085b4 <xTaskGetSchedulerState+0x38>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008598:	2302      	movs	r3, #2
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	e001      	b.n	80085a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800859e:	2300      	movs	r3, #0
 80085a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085a2:	687b      	ldr	r3, [r7, #4]
	}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	20000e90 	.word	0x20000e90
 80085b4:	20000eac 	.word	0x20000eac

080085b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d05e      	beq.n	800868c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d2:	4b31      	ldr	r3, [pc, #196]	; (8008698 <xTaskPriorityInherit+0xe0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	429a      	cmp	r2, r3
 80085da:	d24e      	bcs.n	800867a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db06      	blt.n	80085f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e4:	4b2c      	ldr	r3, [pc, #176]	; (8008698 <xTaskPriorityInherit+0xe0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	f1c3 0207 	rsb	r2, r3, #7
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6959      	ldr	r1, [r3, #20]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4a26      	ldr	r2, [pc, #152]	; (800869c <xTaskPriorityInherit+0xe4>)
 8008604:	4413      	add	r3, r2
 8008606:	4299      	cmp	r1, r3
 8008608:	d12f      	bne.n	800866a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3304      	adds	r3, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fc20 	bl	8006e54 <uxListRemove>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10a      	bne.n	8008630 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	2201      	movs	r2, #1
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	43da      	mvns	r2, r3
 8008626:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <xTaskPriorityInherit+0xe8>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4013      	ands	r3, r2
 800862c:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <xTaskPriorityInherit+0xe8>)
 800862e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008630:	4b19      	ldr	r3, [pc, #100]	; (8008698 <xTaskPriorityInherit+0xe0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	2201      	movs	r2, #1
 8008640:	409a      	lsls	r2, r3
 8008642:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <xTaskPriorityInherit+0xe8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4313      	orrs	r3, r2
 8008648:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <xTaskPriorityInherit+0xe8>)
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4a10      	ldr	r2, [pc, #64]	; (800869c <xTaskPriorityInherit+0xe4>)
 800865a:	441a      	add	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3304      	adds	r3, #4
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7fe fb99 	bl	8006d9a <vListInsertEnd>
 8008668:	e004      	b.n	8008674 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800866a:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <xTaskPriorityInherit+0xe0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008674:	2301      	movs	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e008      	b.n	800868c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <xTaskPriorityInherit+0xe0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	429a      	cmp	r2, r3
 8008686:	d201      	bcs.n	800868c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800868c:	68fb      	ldr	r3, [r7, #12]
	}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000d84 	.word	0x20000d84
 800869c:	20000d88 	.word	0x20000d88
 80086a0:	20000e8c 	.word	0x20000e8c

080086a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d06e      	beq.n	8008798 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086ba:	4b3a      	ldr	r3, [pc, #232]	; (80087a4 <xTaskPriorityDisinherit+0x100>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d00a      	beq.n	80086da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	60fb      	str	r3, [r7, #12]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60bb      	str	r3, [r7, #8]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fc:	1e5a      	subs	r2, r3, #1
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	429a      	cmp	r2, r3
 800870c:	d044      	beq.n	8008798 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008712:	2b00      	cmp	r3, #0
 8008714:	d140      	bne.n	8008798 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3304      	adds	r3, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fb9a 	bl	8006e54 <uxListRemove>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d115      	bne.n	8008752 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872a:	491f      	ldr	r1, [pc, #124]	; (80087a8 <xTaskPriorityDisinherit+0x104>)
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <xTaskPriorityDisinherit+0xae>
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	2201      	movs	r2, #1
 8008742:	fa02 f303 	lsl.w	r3, r2, r3
 8008746:	43da      	mvns	r2, r3
 8008748:	4b18      	ldr	r3, [pc, #96]	; (80087ac <xTaskPriorityDisinherit+0x108>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4013      	ands	r3, r2
 800874e:	4a17      	ldr	r2, [pc, #92]	; (80087ac <xTaskPriorityDisinherit+0x108>)
 8008750:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	f1c3 0207 	rsb	r2, r3, #7
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	2201      	movs	r2, #1
 800876c:	409a      	lsls	r2, r3
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <xTaskPriorityDisinherit+0x108>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4313      	orrs	r3, r2
 8008774:	4a0d      	ldr	r2, [pc, #52]	; (80087ac <xTaskPriorityDisinherit+0x108>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a08      	ldr	r2, [pc, #32]	; (80087a8 <xTaskPriorityDisinherit+0x104>)
 8008786:	441a      	add	r2, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	3304      	adds	r3, #4
 800878c:	4619      	mov	r1, r3
 800878e:	4610      	mov	r0, r2
 8008790:	f7fe fb03 	bl	8006d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008798:	697b      	ldr	r3, [r7, #20]
	}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000d84 	.word	0x20000d84
 80087a8:	20000d88 	.word	0x20000d88
 80087ac:	20000e8c 	.word	0x20000e8c

080087b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087be:	2301      	movs	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d077      	beq.n	80088b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	60fb      	str	r3, [r7, #12]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d902      	bls.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	e002      	b.n	80087fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	429a      	cmp	r2, r3
 8008804:	d058      	beq.n	80088b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	429a      	cmp	r2, r3
 800880e:	d153      	bne.n	80088b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008810:	4b2b      	ldr	r3, [pc, #172]	; (80088c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	429a      	cmp	r2, r3
 8008818:	d10a      	bne.n	8008830 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60bb      	str	r3, [r7, #8]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	2b00      	cmp	r3, #0
 8008842:	db04      	blt.n	800884e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f1c3 0207 	rsb	r2, r3, #7
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	6959      	ldr	r1, [r3, #20]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4a19      	ldr	r2, [pc, #100]	; (80088c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800885e:	4413      	add	r3, r2
 8008860:	4299      	cmp	r1, r3
 8008862:	d129      	bne.n	80088b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe faf3 	bl	8006e54 <uxListRemove>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	2201      	movs	r2, #1
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	43da      	mvns	r2, r3
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4013      	ands	r3, r2
 8008886:	4a10      	ldr	r2, [pc, #64]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008888:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	2201      	movs	r2, #1
 8008890:	409a      	lsls	r2, r3
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4313      	orrs	r3, r2
 8008898:	4a0b      	ldr	r2, [pc, #44]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4a06      	ldr	r2, [pc, #24]	; (80088c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80088aa:	441a      	add	r2, r3
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fe fa71 	bl	8006d9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088b8:	bf00      	nop
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000d84 	.word	0x20000d84
 80088c4:	20000d88 	.word	0x20000d88
 80088c8:	20000e8c 	.word	0x20000e8c

080088cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088de:	3201      	adds	r2, #1
 80088e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80088e2:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80088e4:	681b      	ldr	r3, [r3, #0]
	}
 80088e6:	4618      	mov	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000d84 	.word	0x20000d84

080088f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088fe:	4b29      	ldr	r3, [pc, #164]	; (80089a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008904:	4b28      	ldr	r3, [pc, #160]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3304      	adds	r3, #4
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe faa2 	bl	8006e54 <uxListRemove>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008916:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43da      	mvns	r2, r3
 8008924:	4b21      	ldr	r3, [pc, #132]	; (80089ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4013      	ands	r3, r2
 800892a:	4a20      	ldr	r2, [pc, #128]	; (80089ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800892c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d10a      	bne.n	800894c <prvAddCurrentTaskToDelayedList+0x58>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893c:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3304      	adds	r3, #4
 8008942:	4619      	mov	r1, r3
 8008944:	481a      	ldr	r0, [pc, #104]	; (80089b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008946:	f7fe fa28 	bl	8006d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800894a:	e026      	b.n	800899a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d209      	bcs.n	8008978 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008964:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe fa36 	bl	8006de2 <vListInsert>
}
 8008976:	e010      	b.n	800899a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe fa2c 	bl	8006de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	429a      	cmp	r2, r3
 8008992:	d202      	bcs.n	800899a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008994:	4a09      	ldr	r2, [pc, #36]	; (80089bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6013      	str	r3, [r2, #0]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000e88 	.word	0x20000e88
 80089a8:	20000d84 	.word	0x20000d84
 80089ac:	20000e8c 	.word	0x20000e8c
 80089b0:	20000e70 	.word	0x20000e70
 80089b4:	20000e40 	.word	0x20000e40
 80089b8:	20000e3c 	.word	0x20000e3c
 80089bc:	20000ea4 	.word	0x20000ea4

080089c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3b04      	subs	r3, #4
 80089d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3b04      	subs	r3, #4
 80089de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f023 0201 	bic.w	r2, r3, #1
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089f0:	4a0c      	ldr	r2, [pc, #48]	; (8008a24 <pxPortInitialiseStack+0x64>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3b14      	subs	r3, #20
 80089fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3b04      	subs	r3, #4
 8008a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f06f 0202 	mvn.w	r2, #2
 8008a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3b20      	subs	r3, #32
 8008a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a16:	68fb      	ldr	r3, [r7, #12]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	08008a29 	.word	0x08008a29

08008a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <prvTaskExitError+0x54>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3a:	d00a      	beq.n	8008a52 <prvTaskExitError+0x2a>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	60fb      	str	r3, [r7, #12]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <prvTaskExitError+0x28>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60bb      	str	r3, [r7, #8]
}
 8008a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a66:	bf00      	nop
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0fc      	beq.n	8008a68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a6e:	bf00      	nop
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20000148 	.word	0x20000148

08008a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <pxCurrentTCBConst2>)
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	6808      	ldr	r0, [r1, #0]
 8008a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8a:	f380 8809 	msr	PSP, r0
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8811 	msr	BASEPRI, r0
 8008a9a:	4770      	bx	lr
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst2>:
 8008aa0:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008aa8:	4808      	ldr	r0, [pc, #32]	; (8008acc <prvPortStartFirstTask+0x24>)
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f380 8808 	msr	MSP, r0
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8814 	msr	CONTROL, r0
 8008aba:	b662      	cpsie	i
 8008abc:	b661      	cpsie	f
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	df00      	svc	0
 8008ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aca:	bf00      	nop
 8008acc:	e000ed08 	.word	0xe000ed08

08008ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ad6:	4b46      	ldr	r3, [pc, #280]	; (8008bf0 <xPortStartScheduler+0x120>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a46      	ldr	r2, [pc, #280]	; (8008bf4 <xPortStartScheduler+0x124>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10a      	bne.n	8008af6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
}
 8008af2:	bf00      	nop
 8008af4:	e7fe      	b.n	8008af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008af6:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <xPortStartScheduler+0x120>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a3f      	ldr	r2, [pc, #252]	; (8008bf8 <xPortStartScheduler+0x128>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d10a      	bne.n	8008b16 <xPortStartScheduler+0x46>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60fb      	str	r3, [r7, #12]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b16:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <xPortStartScheduler+0x12c>)
 8008b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	22ff      	movs	r2, #255	; 0xff
 8008b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <xPortStartScheduler+0x130>)
 8008b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b3e:	4b31      	ldr	r3, [pc, #196]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b44:	e009      	b.n	8008b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b46:	4b2f      	ldr	r3, [pc, #188]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	4a2d      	ldr	r2, [pc, #180]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d0ef      	beq.n	8008b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b66:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1c3 0307 	rsb	r3, r3, #7
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d00a      	beq.n	8008b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60bb      	str	r3, [r7, #8]
}
 8008b84:	bf00      	nop
 8008b86:	e7fe      	b.n	8008b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b88:	4b1e      	ldr	r3, [pc, #120]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b9a:	4a1a      	ldr	r2, [pc, #104]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <xPortStartScheduler+0x138>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a17      	ldr	r2, [pc, #92]	; (8008c08 <xPortStartScheduler+0x138>)
 8008bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bb2:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <xPortStartScheduler+0x138>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a14      	ldr	r2, [pc, #80]	; (8008c08 <xPortStartScheduler+0x138>)
 8008bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bbe:	f000 f8dd 	bl	8008d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <xPortStartScheduler+0x13c>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bc8:	f000 f8fc 	bl	8008dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bcc:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <xPortStartScheduler+0x140>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a0f      	ldr	r2, [pc, #60]	; (8008c10 <xPortStartScheduler+0x140>)
 8008bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bd8:	f7ff ff66 	bl	8008aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bdc:	f7ff fa88 	bl	80080f0 <vTaskSwitchContext>
	prvTaskExitError();
 8008be0:	f7ff ff22 	bl	8008a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	e000ed00 	.word	0xe000ed00
 8008bf4:	410fc271 	.word	0x410fc271
 8008bf8:	410fc270 	.word	0x410fc270
 8008bfc:	e000e400 	.word	0xe000e400
 8008c00:	20000eb0 	.word	0x20000eb0
 8008c04:	20000eb4 	.word	0x20000eb4
 8008c08:	e000ed20 	.word	0xe000ed20
 8008c0c:	20000148 	.word	0x20000148
 8008c10:	e000ef34 	.word	0xe000ef34

08008c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <vPortEnterCritical+0x58>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <vPortEnterCritical+0x58>)
 8008c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c38:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <vPortEnterCritical+0x58>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d10f      	bne.n	8008c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <vPortEnterCritical+0x5c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	603b      	str	r3, [r7, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	e7fe      	b.n	8008c5e <vPortEnterCritical+0x4a>
	}
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000148 	.word	0x20000148
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <vPortExitCritical+0x50>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <vPortExitCritical+0x24>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	607b      	str	r3, [r7, #4]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <vPortExitCritical+0x50>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <vPortExitCritical+0x50>)
 8008ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ca2:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <vPortExitCritical+0x50>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <vPortExitCritical+0x42>
 8008caa:	2300      	movs	r3, #0
 8008cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	f383 8811 	msr	BASEPRI, r3
}
 8008cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20000148 	.word	0x20000148
	...

08008cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cd0:	f3ef 8009 	mrs	r0, PSP
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <pxCurrentTCBConst>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f01e 0f10 	tst.w	lr, #16
 8008ce0:	bf08      	it	eq
 8008ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cea:	6010      	str	r0, [r2, #0]
 8008cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cf4:	f380 8811 	msr	BASEPRI, r0
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f7ff f9f6 	bl	80080f0 <vTaskSwitchContext>
 8008d04:	f04f 0000 	mov.w	r0, #0
 8008d08:	f380 8811 	msr	BASEPRI, r0
 8008d0c:	bc09      	pop	{r0, r3}
 8008d0e:	6819      	ldr	r1, [r3, #0]
 8008d10:	6808      	ldr	r0, [r1, #0]
 8008d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d16:	f01e 0f10 	tst.w	lr, #16
 8008d1a:	bf08      	it	eq
 8008d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d20:	f380 8809 	msr	PSP, r0
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst>:
 8008d30:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
}
 8008d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d52:	f7ff f915 	bl	8007f80 <xTaskIncrementTick>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <SysTick_Handler+0x40>)
 8008d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	2300      	movs	r3, #0
 8008d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f383 8811 	msr	BASEPRI, r3
}
 8008d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <vPortSetupTimerInterrupt+0x34>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <vPortSetupTimerInterrupt+0x38>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <vPortSetupTimerInterrupt+0x3c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <vPortSetupTimerInterrupt+0x40>)
 8008d92:	fba2 2303 	umull	r2, r3, r2, r3
 8008d96:	099b      	lsrs	r3, r3, #6
 8008d98:	4a09      	ldr	r2, [pc, #36]	; (8008dc0 <vPortSetupTimerInterrupt+0x44>)
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <vPortSetupTimerInterrupt+0x34>)
 8008da0:	2207      	movs	r2, #7
 8008da2:	601a      	str	r2, [r3, #0]
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	e000e010 	.word	0xe000e010
 8008db4:	e000e018 	.word	0xe000e018
 8008db8:	20000120 	.word	0x20000120
 8008dbc:	10624dd3 	.word	0x10624dd3
 8008dc0:	e000e014 	.word	0xe000e014

08008dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008dd4 <vPortEnableVFP+0x10>
 8008dc8:	6801      	ldr	r1, [r0, #0]
 8008dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dce:	6001      	str	r1, [r0, #0]
 8008dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008dd2:	bf00      	nop
 8008dd4:	e000ed88 	.word	0xe000ed88

08008dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dde:	f3ef 8305 	mrs	r3, IPSR
 8008de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b0f      	cmp	r3, #15
 8008de8:	d914      	bls.n	8008e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dea:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <vPortValidateInterruptPriority+0x70>)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008df4:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <vPortValidateInterruptPriority+0x74>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	7afa      	ldrb	r2, [r7, #11]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d20a      	bcs.n	8008e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e14:	4b0e      	ldr	r3, [pc, #56]	; (8008e50 <vPortValidateInterruptPriority+0x78>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <vPortValidateInterruptPriority+0x7c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d90a      	bls.n	8008e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	603b      	str	r3, [r7, #0]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <vPortValidateInterruptPriority+0x60>
	}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	e000e3f0 	.word	0xe000e3f0
 8008e4c:	20000eb0 	.word	0x20000eb0
 8008e50:	e000ed0c 	.word	0xe000ed0c
 8008e54:	20000eb4 	.word	0x20000eb4

08008e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e64:	f7fe ffe2 	bl	8007e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e68:	4b5b      	ldr	r3, [pc, #364]	; (8008fd8 <pvPortMalloc+0x180>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e70:	f000 f920 	bl	80090b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e74:	4b59      	ldr	r3, [pc, #356]	; (8008fdc <pvPortMalloc+0x184>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8093 	bne.w	8008fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01d      	beq.n	8008ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e88:	2208      	movs	r2, #8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d014      	beq.n	8008ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f023 0307 	bic.w	r3, r3, #7
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	617b      	str	r3, [r7, #20]
}
 8008ec0:	bf00      	nop
 8008ec2:	e7fe      	b.n	8008ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d06e      	beq.n	8008fa8 <pvPortMalloc+0x150>
 8008eca:	4b45      	ldr	r3, [pc, #276]	; (8008fe0 <pvPortMalloc+0x188>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d869      	bhi.n	8008fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ed4:	4b43      	ldr	r3, [pc, #268]	; (8008fe4 <pvPortMalloc+0x18c>)
 8008ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ed8:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <pvPortMalloc+0x18c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ede:	e004      	b.n	8008eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d903      	bls.n	8008efc <pvPortMalloc+0xa4>
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f1      	bne.n	8008ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008efc:	4b36      	ldr	r3, [pc, #216]	; (8008fd8 <pvPortMalloc+0x180>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d050      	beq.n	8008fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2208      	movs	r2, #8
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	2308      	movs	r3, #8
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d91f      	bls.n	8008f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <pvPortMalloc+0xf8>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	613b      	str	r3, [r7, #16]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f62:	69b8      	ldr	r0, [r7, #24]
 8008f64:	f000 f908 	bl	8009178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f68:	4b1d      	ldr	r3, [pc, #116]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f76:	4b1a      	ldr	r3, [pc, #104]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <pvPortMalloc+0x190>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d203      	bcs.n	8008f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f82:	4b17      	ldr	r3, [pc, #92]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a18      	ldr	r2, [pc, #96]	; (8008fe8 <pvPortMalloc+0x190>)
 8008f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <pvPortMalloc+0x184>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <pvPortMalloc+0x194>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	4a11      	ldr	r2, [pc, #68]	; (8008fec <pvPortMalloc+0x194>)
 8008fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fa8:	f7fe ff4e 	bl	8007e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <pvPortMalloc+0x174>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <pvPortMalloc+0x172>
	return pvReturn;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20001a78 	.word	0x20001a78
 8008fdc:	20001a8c 	.word	0x20001a8c
 8008fe0:	20001a7c 	.word	0x20001a7c
 8008fe4:	20001a70 	.word	0x20001a70
 8008fe8:	20001a80 	.word	0x20001a80
 8008fec:	20001a84 	.word	0x20001a84

08008ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d04d      	beq.n	800909e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009002:	2308      	movs	r3, #8
 8009004:	425b      	negs	r3, r3
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4413      	add	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <vPortFree+0xb8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <vPortFree+0x44>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <vPortFree+0x62>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60bb      	str	r3, [r7, #8]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <vPortFree+0xb8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01e      	beq.n	800909e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11a      	bne.n	800909e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <vPortFree+0xb8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	43db      	mvns	r3, r3
 8009072:	401a      	ands	r2, r3
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009078:	f7fe fed8 	bl	8007e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <vPortFree+0xbc>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4413      	add	r3, r2
 8009086:	4a09      	ldr	r2, [pc, #36]	; (80090ac <vPortFree+0xbc>)
 8009088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800908a:	6938      	ldr	r0, [r7, #16]
 800908c:	f000 f874 	bl	8009178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <vPortFree+0xc0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a06      	ldr	r2, [pc, #24]	; (80090b0 <vPortFree+0xc0>)
 8009098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800909a:	f7fe fed5 	bl	8007e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800909e:	bf00      	nop
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20001a8c 	.word	0x20001a8c
 80090ac:	20001a7c 	.word	0x20001a7c
 80090b0:	20001a88 	.word	0x20001a88

080090b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80090be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090c0:	4b27      	ldr	r3, [pc, #156]	; (8009160 <prvHeapInit+0xac>)
 80090c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3307      	adds	r3, #7
 80090d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <prvHeapInit+0xac>)
 80090e4:	4413      	add	r3, r2
 80090e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090ec:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <prvHeapInit+0xb0>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090f2:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <prvHeapInit+0xb0>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009100:	2208      	movs	r2, #8
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a15      	ldr	r2, [pc, #84]	; (8009168 <prvHeapInit+0xb4>)
 8009114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <prvHeapInit+0xb4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <prvHeapInit+0xb4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009134:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <prvHeapInit+0xb4>)
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a0a      	ldr	r2, [pc, #40]	; (800916c <prvHeapInit+0xb8>)
 8009142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4a09      	ldr	r2, [pc, #36]	; (8009170 <prvHeapInit+0xbc>)
 800914a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <prvHeapInit+0xc0>)
 800914e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20000eb8 	.word	0x20000eb8
 8009164:	20001a70 	.word	0x20001a70
 8009168:	20001a78 	.word	0x20001a78
 800916c:	20001a80 	.word	0x20001a80
 8009170:	20001a7c 	.word	0x20001a7c
 8009174:	20001a8c 	.word	0x20001a8c

08009178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009180:	4b28      	ldr	r3, [pc, #160]	; (8009224 <prvInsertBlockIntoFreeList+0xac>)
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e002      	b.n	800918c <prvInsertBlockIntoFreeList+0x14>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d8f7      	bhi.n	8009186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d108      	bne.n	80091ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	441a      	add	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d118      	bne.n	8009200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b15      	ldr	r3, [pc, #84]	; (8009228 <prvInsertBlockIntoFreeList+0xb0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d00d      	beq.n	80091f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	441a      	add	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e008      	b.n	8009208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091f6:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvInsertBlockIntoFreeList+0xb0>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e003      	b.n	8009208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d002      	beq.n	8009216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009216:	bf00      	nop
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	20001a70 	.word	0x20001a70
 8009228:	20001a78 	.word	0x20001a78

0800922c <__errno>:
 800922c:	4b01      	ldr	r3, [pc, #4]	; (8009234 <__errno+0x8>)
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	2000014c 	.word	0x2000014c

08009238 <__libc_init_array>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4d0d      	ldr	r5, [pc, #52]	; (8009270 <__libc_init_array+0x38>)
 800923c:	4c0d      	ldr	r4, [pc, #52]	; (8009274 <__libc_init_array+0x3c>)
 800923e:	1b64      	subs	r4, r4, r5
 8009240:	10a4      	asrs	r4, r4, #2
 8009242:	2600      	movs	r6, #0
 8009244:	42a6      	cmp	r6, r4
 8009246:	d109      	bne.n	800925c <__libc_init_array+0x24>
 8009248:	4d0b      	ldr	r5, [pc, #44]	; (8009278 <__libc_init_array+0x40>)
 800924a:	4c0c      	ldr	r4, [pc, #48]	; (800927c <__libc_init_array+0x44>)
 800924c:	f000 fd3e 	bl	8009ccc <_init>
 8009250:	1b64      	subs	r4, r4, r5
 8009252:	10a4      	asrs	r4, r4, #2
 8009254:	2600      	movs	r6, #0
 8009256:	42a6      	cmp	r6, r4
 8009258:	d105      	bne.n	8009266 <__libc_init_array+0x2e>
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009260:	4798      	blx	r3
 8009262:	3601      	adds	r6, #1
 8009264:	e7ee      	b.n	8009244 <__libc_init_array+0xc>
 8009266:	f855 3b04 	ldr.w	r3, [r5], #4
 800926a:	4798      	blx	r3
 800926c:	3601      	adds	r6, #1
 800926e:	e7f2      	b.n	8009256 <__libc_init_array+0x1e>
 8009270:	08009e7c 	.word	0x08009e7c
 8009274:	08009e7c 	.word	0x08009e7c
 8009278:	08009e7c 	.word	0x08009e7c
 800927c:	08009e80 	.word	0x08009e80

08009280 <__retarget_lock_acquire_recursive>:
 8009280:	4770      	bx	lr

08009282 <__retarget_lock_release_recursive>:
 8009282:	4770      	bx	lr

08009284 <memcpy>:
 8009284:	440a      	add	r2, r1
 8009286:	4291      	cmp	r1, r2
 8009288:	f100 33ff 	add.w	r3, r0, #4294967295
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	4770      	bx	lr
 8009290:	b510      	push	{r4, lr}
 8009292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929a:	4291      	cmp	r1, r2
 800929c:	d1f9      	bne.n	8009292 <memcpy+0xe>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <memset>:
 80092a0:	4402      	add	r2, r0
 80092a2:	4603      	mov	r3, r0
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d100      	bne.n	80092aa <memset+0xa>
 80092a8:	4770      	bx	lr
 80092aa:	f803 1b01 	strb.w	r1, [r3], #1
 80092ae:	e7f9      	b.n	80092a4 <memset+0x4>

080092b0 <sbrk_aligned>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	4e0e      	ldr	r6, [pc, #56]	; (80092ec <sbrk_aligned+0x3c>)
 80092b4:	460c      	mov	r4, r1
 80092b6:	6831      	ldr	r1, [r6, #0]
 80092b8:	4605      	mov	r5, r0
 80092ba:	b911      	cbnz	r1, 80092c2 <sbrk_aligned+0x12>
 80092bc:	f000 f8f6 	bl	80094ac <_sbrk_r>
 80092c0:	6030      	str	r0, [r6, #0]
 80092c2:	4621      	mov	r1, r4
 80092c4:	4628      	mov	r0, r5
 80092c6:	f000 f8f1 	bl	80094ac <_sbrk_r>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	d00a      	beq.n	80092e4 <sbrk_aligned+0x34>
 80092ce:	1cc4      	adds	r4, r0, #3
 80092d0:	f024 0403 	bic.w	r4, r4, #3
 80092d4:	42a0      	cmp	r0, r4
 80092d6:	d007      	beq.n	80092e8 <sbrk_aligned+0x38>
 80092d8:	1a21      	subs	r1, r4, r0
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 f8e6 	bl	80094ac <_sbrk_r>
 80092e0:	3001      	adds	r0, #1
 80092e2:	d101      	bne.n	80092e8 <sbrk_aligned+0x38>
 80092e4:	f04f 34ff 	mov.w	r4, #4294967295
 80092e8:	4620      	mov	r0, r4
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	20001a98 	.word	0x20001a98

080092f0 <_malloc_r>:
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	1ccd      	adds	r5, r1, #3
 80092f6:	f025 0503 	bic.w	r5, r5, #3
 80092fa:	3508      	adds	r5, #8
 80092fc:	2d0c      	cmp	r5, #12
 80092fe:	bf38      	it	cc
 8009300:	250c      	movcc	r5, #12
 8009302:	2d00      	cmp	r5, #0
 8009304:	4607      	mov	r7, r0
 8009306:	db01      	blt.n	800930c <_malloc_r+0x1c>
 8009308:	42a9      	cmp	r1, r5
 800930a:	d905      	bls.n	8009318 <_malloc_r+0x28>
 800930c:	230c      	movs	r3, #12
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	2600      	movs	r6, #0
 8009312:	4630      	mov	r0, r6
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	4e2e      	ldr	r6, [pc, #184]	; (80093d4 <_malloc_r+0xe4>)
 800931a:	f000 f90b 	bl	8009534 <__malloc_lock>
 800931e:	6833      	ldr	r3, [r6, #0]
 8009320:	461c      	mov	r4, r3
 8009322:	bb34      	cbnz	r4, 8009372 <_malloc_r+0x82>
 8009324:	4629      	mov	r1, r5
 8009326:	4638      	mov	r0, r7
 8009328:	f7ff ffc2 	bl	80092b0 <sbrk_aligned>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	4604      	mov	r4, r0
 8009330:	d14d      	bne.n	80093ce <_malloc_r+0xde>
 8009332:	6834      	ldr	r4, [r6, #0]
 8009334:	4626      	mov	r6, r4
 8009336:	2e00      	cmp	r6, #0
 8009338:	d140      	bne.n	80093bc <_malloc_r+0xcc>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	4631      	mov	r1, r6
 800933e:	4638      	mov	r0, r7
 8009340:	eb04 0803 	add.w	r8, r4, r3
 8009344:	f000 f8b2 	bl	80094ac <_sbrk_r>
 8009348:	4580      	cmp	r8, r0
 800934a:	d13a      	bne.n	80093c2 <_malloc_r+0xd2>
 800934c:	6821      	ldr	r1, [r4, #0]
 800934e:	3503      	adds	r5, #3
 8009350:	1a6d      	subs	r5, r5, r1
 8009352:	f025 0503 	bic.w	r5, r5, #3
 8009356:	3508      	adds	r5, #8
 8009358:	2d0c      	cmp	r5, #12
 800935a:	bf38      	it	cc
 800935c:	250c      	movcc	r5, #12
 800935e:	4629      	mov	r1, r5
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff ffa5 	bl	80092b0 <sbrk_aligned>
 8009366:	3001      	adds	r0, #1
 8009368:	d02b      	beq.n	80093c2 <_malloc_r+0xd2>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	442b      	add	r3, r5
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	e00e      	b.n	8009390 <_malloc_r+0xa0>
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	1b52      	subs	r2, r2, r5
 8009376:	d41e      	bmi.n	80093b6 <_malloc_r+0xc6>
 8009378:	2a0b      	cmp	r2, #11
 800937a:	d916      	bls.n	80093aa <_malloc_r+0xba>
 800937c:	1961      	adds	r1, r4, r5
 800937e:	42a3      	cmp	r3, r4
 8009380:	6025      	str	r5, [r4, #0]
 8009382:	bf18      	it	ne
 8009384:	6059      	strne	r1, [r3, #4]
 8009386:	6863      	ldr	r3, [r4, #4]
 8009388:	bf08      	it	eq
 800938a:	6031      	streq	r1, [r6, #0]
 800938c:	5162      	str	r2, [r4, r5]
 800938e:	604b      	str	r3, [r1, #4]
 8009390:	4638      	mov	r0, r7
 8009392:	f104 060b 	add.w	r6, r4, #11
 8009396:	f000 f8d3 	bl	8009540 <__malloc_unlock>
 800939a:	f026 0607 	bic.w	r6, r6, #7
 800939e:	1d23      	adds	r3, r4, #4
 80093a0:	1af2      	subs	r2, r6, r3
 80093a2:	d0b6      	beq.n	8009312 <_malloc_r+0x22>
 80093a4:	1b9b      	subs	r3, r3, r6
 80093a6:	50a3      	str	r3, [r4, r2]
 80093a8:	e7b3      	b.n	8009312 <_malloc_r+0x22>
 80093aa:	6862      	ldr	r2, [r4, #4]
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	bf0c      	ite	eq
 80093b0:	6032      	streq	r2, [r6, #0]
 80093b2:	605a      	strne	r2, [r3, #4]
 80093b4:	e7ec      	b.n	8009390 <_malloc_r+0xa0>
 80093b6:	4623      	mov	r3, r4
 80093b8:	6864      	ldr	r4, [r4, #4]
 80093ba:	e7b2      	b.n	8009322 <_malloc_r+0x32>
 80093bc:	4634      	mov	r4, r6
 80093be:	6876      	ldr	r6, [r6, #4]
 80093c0:	e7b9      	b.n	8009336 <_malloc_r+0x46>
 80093c2:	230c      	movs	r3, #12
 80093c4:	603b      	str	r3, [r7, #0]
 80093c6:	4638      	mov	r0, r7
 80093c8:	f000 f8ba 	bl	8009540 <__malloc_unlock>
 80093cc:	e7a1      	b.n	8009312 <_malloc_r+0x22>
 80093ce:	6025      	str	r5, [r4, #0]
 80093d0:	e7de      	b.n	8009390 <_malloc_r+0xa0>
 80093d2:	bf00      	nop
 80093d4:	20001a94 	.word	0x20001a94

080093d8 <cleanup_glue>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	460c      	mov	r4, r1
 80093dc:	6809      	ldr	r1, [r1, #0]
 80093de:	4605      	mov	r5, r0
 80093e0:	b109      	cbz	r1, 80093e6 <cleanup_glue+0xe>
 80093e2:	f7ff fff9 	bl	80093d8 <cleanup_glue>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ee:	f000 b8ad 	b.w	800954c <_free_r>
	...

080093f4 <_reclaim_reent>:
 80093f4:	4b2c      	ldr	r3, [pc, #176]	; (80094a8 <_reclaim_reent+0xb4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4283      	cmp	r3, r0
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	4604      	mov	r4, r0
 80093fe:	d051      	beq.n	80094a4 <_reclaim_reent+0xb0>
 8009400:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009402:	b143      	cbz	r3, 8009416 <_reclaim_reent+0x22>
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d14a      	bne.n	80094a0 <_reclaim_reent+0xac>
 800940a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800940c:	6819      	ldr	r1, [r3, #0]
 800940e:	b111      	cbz	r1, 8009416 <_reclaim_reent+0x22>
 8009410:	4620      	mov	r0, r4
 8009412:	f000 f89b 	bl	800954c <_free_r>
 8009416:	6961      	ldr	r1, [r4, #20]
 8009418:	b111      	cbz	r1, 8009420 <_reclaim_reent+0x2c>
 800941a:	4620      	mov	r0, r4
 800941c:	f000 f896 	bl	800954c <_free_r>
 8009420:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009422:	b111      	cbz	r1, 800942a <_reclaim_reent+0x36>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f891 	bl	800954c <_free_r>
 800942a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800942c:	b111      	cbz	r1, 8009434 <_reclaim_reent+0x40>
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f88c 	bl	800954c <_free_r>
 8009434:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009436:	b111      	cbz	r1, 800943e <_reclaim_reent+0x4a>
 8009438:	4620      	mov	r0, r4
 800943a:	f000 f887 	bl	800954c <_free_r>
 800943e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009440:	b111      	cbz	r1, 8009448 <_reclaim_reent+0x54>
 8009442:	4620      	mov	r0, r4
 8009444:	f000 f882 	bl	800954c <_free_r>
 8009448:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800944a:	b111      	cbz	r1, 8009452 <_reclaim_reent+0x5e>
 800944c:	4620      	mov	r0, r4
 800944e:	f000 f87d 	bl	800954c <_free_r>
 8009452:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009454:	b111      	cbz	r1, 800945c <_reclaim_reent+0x68>
 8009456:	4620      	mov	r0, r4
 8009458:	f000 f878 	bl	800954c <_free_r>
 800945c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800945e:	b111      	cbz	r1, 8009466 <_reclaim_reent+0x72>
 8009460:	4620      	mov	r0, r4
 8009462:	f000 f873 	bl	800954c <_free_r>
 8009466:	69a3      	ldr	r3, [r4, #24]
 8009468:	b1e3      	cbz	r3, 80094a4 <_reclaim_reent+0xb0>
 800946a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800946c:	4620      	mov	r0, r4
 800946e:	4798      	blx	r3
 8009470:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009472:	b1b9      	cbz	r1, 80094a4 <_reclaim_reent+0xb0>
 8009474:	4620      	mov	r0, r4
 8009476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800947a:	f7ff bfad 	b.w	80093d8 <cleanup_glue>
 800947e:	5949      	ldr	r1, [r1, r5]
 8009480:	b941      	cbnz	r1, 8009494 <_reclaim_reent+0xa0>
 8009482:	3504      	adds	r5, #4
 8009484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009486:	2d80      	cmp	r5, #128	; 0x80
 8009488:	68d9      	ldr	r1, [r3, #12]
 800948a:	d1f8      	bne.n	800947e <_reclaim_reent+0x8a>
 800948c:	4620      	mov	r0, r4
 800948e:	f000 f85d 	bl	800954c <_free_r>
 8009492:	e7ba      	b.n	800940a <_reclaim_reent+0x16>
 8009494:	680e      	ldr	r6, [r1, #0]
 8009496:	4620      	mov	r0, r4
 8009498:	f000 f858 	bl	800954c <_free_r>
 800949c:	4631      	mov	r1, r6
 800949e:	e7ef      	b.n	8009480 <_reclaim_reent+0x8c>
 80094a0:	2500      	movs	r5, #0
 80094a2:	e7ef      	b.n	8009484 <_reclaim_reent+0x90>
 80094a4:	bd70      	pop	{r4, r5, r6, pc}
 80094a6:	bf00      	nop
 80094a8:	2000014c 	.word	0x2000014c

080094ac <_sbrk_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d06      	ldr	r5, [pc, #24]	; (80094c8 <_sbrk_r+0x1c>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f8 fb0c 	bl	8001ad4 <_sbrk>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_sbrk_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_sbrk_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	20001a9c 	.word	0x20001a9c

080094cc <sniprintf>:
 80094cc:	b40c      	push	{r2, r3}
 80094ce:	b530      	push	{r4, r5, lr}
 80094d0:	4b17      	ldr	r3, [pc, #92]	; (8009530 <sniprintf+0x64>)
 80094d2:	1e0c      	subs	r4, r1, #0
 80094d4:	681d      	ldr	r5, [r3, #0]
 80094d6:	b09d      	sub	sp, #116	; 0x74
 80094d8:	da08      	bge.n	80094ec <sniprintf+0x20>
 80094da:	238b      	movs	r3, #139	; 0x8b
 80094dc:	602b      	str	r3, [r5, #0]
 80094de:	f04f 30ff 	mov.w	r0, #4294967295
 80094e2:	b01d      	add	sp, #116	; 0x74
 80094e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094e8:	b002      	add	sp, #8
 80094ea:	4770      	bx	lr
 80094ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094f4:	bf14      	ite	ne
 80094f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094fa:	4623      	moveq	r3, r4
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	9307      	str	r3, [sp, #28]
 8009500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009504:	9002      	str	r0, [sp, #8]
 8009506:	9006      	str	r0, [sp, #24]
 8009508:	f8ad 3016 	strh.w	r3, [sp, #22]
 800950c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800950e:	ab21      	add	r3, sp, #132	; 0x84
 8009510:	a902      	add	r1, sp, #8
 8009512:	4628      	mov	r0, r5
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	f000 f8c1 	bl	800969c <_svfiprintf_r>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	bfbc      	itt	lt
 800951e:	238b      	movlt	r3, #139	; 0x8b
 8009520:	602b      	strlt	r3, [r5, #0]
 8009522:	2c00      	cmp	r4, #0
 8009524:	d0dd      	beq.n	80094e2 <sniprintf+0x16>
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	e7d9      	b.n	80094e2 <sniprintf+0x16>
 800952e:	bf00      	nop
 8009530:	2000014c 	.word	0x2000014c

08009534 <__malloc_lock>:
 8009534:	4801      	ldr	r0, [pc, #4]	; (800953c <__malloc_lock+0x8>)
 8009536:	f7ff bea3 	b.w	8009280 <__retarget_lock_acquire_recursive>
 800953a:	bf00      	nop
 800953c:	20001a90 	.word	0x20001a90

08009540 <__malloc_unlock>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__malloc_unlock+0x8>)
 8009542:	f7ff be9e 	b.w	8009282 <__retarget_lock_release_recursive>
 8009546:	bf00      	nop
 8009548:	20001a90 	.word	0x20001a90

0800954c <_free_r>:
 800954c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800954e:	2900      	cmp	r1, #0
 8009550:	d044      	beq.n	80095dc <_free_r+0x90>
 8009552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009556:	9001      	str	r0, [sp, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f1a1 0404 	sub.w	r4, r1, #4
 800955e:	bfb8      	it	lt
 8009560:	18e4      	addlt	r4, r4, r3
 8009562:	f7ff ffe7 	bl	8009534 <__malloc_lock>
 8009566:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <_free_r+0x94>)
 8009568:	9801      	ldr	r0, [sp, #4]
 800956a:	6813      	ldr	r3, [r2, #0]
 800956c:	b933      	cbnz	r3, 800957c <_free_r+0x30>
 800956e:	6063      	str	r3, [r4, #4]
 8009570:	6014      	str	r4, [r2, #0]
 8009572:	b003      	add	sp, #12
 8009574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009578:	f7ff bfe2 	b.w	8009540 <__malloc_unlock>
 800957c:	42a3      	cmp	r3, r4
 800957e:	d908      	bls.n	8009592 <_free_r+0x46>
 8009580:	6825      	ldr	r5, [r4, #0]
 8009582:	1961      	adds	r1, r4, r5
 8009584:	428b      	cmp	r3, r1
 8009586:	bf01      	itttt	eq
 8009588:	6819      	ldreq	r1, [r3, #0]
 800958a:	685b      	ldreq	r3, [r3, #4]
 800958c:	1949      	addeq	r1, r1, r5
 800958e:	6021      	streq	r1, [r4, #0]
 8009590:	e7ed      	b.n	800956e <_free_r+0x22>
 8009592:	461a      	mov	r2, r3
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	b10b      	cbz	r3, 800959c <_free_r+0x50>
 8009598:	42a3      	cmp	r3, r4
 800959a:	d9fa      	bls.n	8009592 <_free_r+0x46>
 800959c:	6811      	ldr	r1, [r2, #0]
 800959e:	1855      	adds	r5, r2, r1
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d10b      	bne.n	80095bc <_free_r+0x70>
 80095a4:	6824      	ldr	r4, [r4, #0]
 80095a6:	4421      	add	r1, r4
 80095a8:	1854      	adds	r4, r2, r1
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	6011      	str	r1, [r2, #0]
 80095ae:	d1e0      	bne.n	8009572 <_free_r+0x26>
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	6053      	str	r3, [r2, #4]
 80095b6:	4421      	add	r1, r4
 80095b8:	6011      	str	r1, [r2, #0]
 80095ba:	e7da      	b.n	8009572 <_free_r+0x26>
 80095bc:	d902      	bls.n	80095c4 <_free_r+0x78>
 80095be:	230c      	movs	r3, #12
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	e7d6      	b.n	8009572 <_free_r+0x26>
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	1961      	adds	r1, r4, r5
 80095c8:	428b      	cmp	r3, r1
 80095ca:	bf04      	itt	eq
 80095cc:	6819      	ldreq	r1, [r3, #0]
 80095ce:	685b      	ldreq	r3, [r3, #4]
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	bf04      	itt	eq
 80095d4:	1949      	addeq	r1, r1, r5
 80095d6:	6021      	streq	r1, [r4, #0]
 80095d8:	6054      	str	r4, [r2, #4]
 80095da:	e7ca      	b.n	8009572 <_free_r+0x26>
 80095dc:	b003      	add	sp, #12
 80095de:	bd30      	pop	{r4, r5, pc}
 80095e0:	20001a94 	.word	0x20001a94

080095e4 <__ssputs_r>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	688e      	ldr	r6, [r1, #8]
 80095ea:	429e      	cmp	r6, r3
 80095ec:	4682      	mov	sl, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	4690      	mov	r8, r2
 80095f2:	461f      	mov	r7, r3
 80095f4:	d838      	bhi.n	8009668 <__ssputs_r+0x84>
 80095f6:	898a      	ldrh	r2, [r1, #12]
 80095f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095fc:	d032      	beq.n	8009664 <__ssputs_r+0x80>
 80095fe:	6825      	ldr	r5, [r4, #0]
 8009600:	6909      	ldr	r1, [r1, #16]
 8009602:	eba5 0901 	sub.w	r9, r5, r1
 8009606:	6965      	ldr	r5, [r4, #20]
 8009608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800960c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009610:	3301      	adds	r3, #1
 8009612:	444b      	add	r3, r9
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	429d      	cmp	r5, r3
 8009618:	bf38      	it	cc
 800961a:	461d      	movcc	r5, r3
 800961c:	0553      	lsls	r3, r2, #21
 800961e:	d531      	bpl.n	8009684 <__ssputs_r+0xa0>
 8009620:	4629      	mov	r1, r5
 8009622:	f7ff fe65 	bl	80092f0 <_malloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	b950      	cbnz	r0, 8009640 <__ssputs_r+0x5c>
 800962a:	230c      	movs	r3, #12
 800962c:	f8ca 3000 	str.w	r3, [sl]
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009640:	6921      	ldr	r1, [r4, #16]
 8009642:	464a      	mov	r2, r9
 8009644:	f7ff fe1e 	bl	8009284 <memcpy>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800964e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	6126      	str	r6, [r4, #16]
 8009656:	6165      	str	r5, [r4, #20]
 8009658:	444e      	add	r6, r9
 800965a:	eba5 0509 	sub.w	r5, r5, r9
 800965e:	6026      	str	r6, [r4, #0]
 8009660:	60a5      	str	r5, [r4, #8]
 8009662:	463e      	mov	r6, r7
 8009664:	42be      	cmp	r6, r7
 8009666:	d900      	bls.n	800966a <__ssputs_r+0x86>
 8009668:	463e      	mov	r6, r7
 800966a:	6820      	ldr	r0, [r4, #0]
 800966c:	4632      	mov	r2, r6
 800966e:	4641      	mov	r1, r8
 8009670:	f000 faa8 	bl	8009bc4 <memmove>
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	1b9b      	subs	r3, r3, r6
 8009678:	60a3      	str	r3, [r4, #8]
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	4433      	add	r3, r6
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	2000      	movs	r0, #0
 8009682:	e7db      	b.n	800963c <__ssputs_r+0x58>
 8009684:	462a      	mov	r2, r5
 8009686:	f000 fab7 	bl	8009bf8 <_realloc_r>
 800968a:	4606      	mov	r6, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	d1e1      	bne.n	8009654 <__ssputs_r+0x70>
 8009690:	6921      	ldr	r1, [r4, #16]
 8009692:	4650      	mov	r0, sl
 8009694:	f7ff ff5a 	bl	800954c <_free_r>
 8009698:	e7c7      	b.n	800962a <__ssputs_r+0x46>
	...

0800969c <_svfiprintf_r>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	4698      	mov	r8, r3
 80096a2:	898b      	ldrh	r3, [r1, #12]
 80096a4:	061b      	lsls	r3, r3, #24
 80096a6:	b09d      	sub	sp, #116	; 0x74
 80096a8:	4607      	mov	r7, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	4614      	mov	r4, r2
 80096ae:	d50e      	bpl.n	80096ce <_svfiprintf_r+0x32>
 80096b0:	690b      	ldr	r3, [r1, #16]
 80096b2:	b963      	cbnz	r3, 80096ce <_svfiprintf_r+0x32>
 80096b4:	2140      	movs	r1, #64	; 0x40
 80096b6:	f7ff fe1b 	bl	80092f0 <_malloc_r>
 80096ba:	6028      	str	r0, [r5, #0]
 80096bc:	6128      	str	r0, [r5, #16]
 80096be:	b920      	cbnz	r0, 80096ca <_svfiprintf_r+0x2e>
 80096c0:	230c      	movs	r3, #12
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	e0d1      	b.n	800986e <_svfiprintf_r+0x1d2>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	616b      	str	r3, [r5, #20]
 80096ce:	2300      	movs	r3, #0
 80096d0:	9309      	str	r3, [sp, #36]	; 0x24
 80096d2:	2320      	movs	r3, #32
 80096d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096dc:	2330      	movs	r3, #48	; 0x30
 80096de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009888 <_svfiprintf_r+0x1ec>
 80096e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e6:	f04f 0901 	mov.w	r9, #1
 80096ea:	4623      	mov	r3, r4
 80096ec:	469a      	mov	sl, r3
 80096ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f2:	b10a      	cbz	r2, 80096f8 <_svfiprintf_r+0x5c>
 80096f4:	2a25      	cmp	r2, #37	; 0x25
 80096f6:	d1f9      	bne.n	80096ec <_svfiprintf_r+0x50>
 80096f8:	ebba 0b04 	subs.w	fp, sl, r4
 80096fc:	d00b      	beq.n	8009716 <_svfiprintf_r+0x7a>
 80096fe:	465b      	mov	r3, fp
 8009700:	4622      	mov	r2, r4
 8009702:	4629      	mov	r1, r5
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff ff6d 	bl	80095e4 <__ssputs_r>
 800970a:	3001      	adds	r0, #1
 800970c:	f000 80aa 	beq.w	8009864 <_svfiprintf_r+0x1c8>
 8009710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009712:	445a      	add	r2, fp
 8009714:	9209      	str	r2, [sp, #36]	; 0x24
 8009716:	f89a 3000 	ldrb.w	r3, [sl]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80a2 	beq.w	8009864 <_svfiprintf_r+0x1c8>
 8009720:	2300      	movs	r3, #0
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800972a:	f10a 0a01 	add.w	sl, sl, #1
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009736:	931a      	str	r3, [sp, #104]	; 0x68
 8009738:	4654      	mov	r4, sl
 800973a:	2205      	movs	r2, #5
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	4851      	ldr	r0, [pc, #324]	; (8009888 <_svfiprintf_r+0x1ec>)
 8009742:	f7f6 fd45 	bl	80001d0 <memchr>
 8009746:	9a04      	ldr	r2, [sp, #16]
 8009748:	b9d8      	cbnz	r0, 8009782 <_svfiprintf_r+0xe6>
 800974a:	06d0      	lsls	r0, r2, #27
 800974c:	bf44      	itt	mi
 800974e:	2320      	movmi	r3, #32
 8009750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009754:	0711      	lsls	r1, r2, #28
 8009756:	bf44      	itt	mi
 8009758:	232b      	movmi	r3, #43	; 0x2b
 800975a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975e:	f89a 3000 	ldrb.w	r3, [sl]
 8009762:	2b2a      	cmp	r3, #42	; 0x2a
 8009764:	d015      	beq.n	8009792 <_svfiprintf_r+0xf6>
 8009766:	9a07      	ldr	r2, [sp, #28]
 8009768:	4654      	mov	r4, sl
 800976a:	2000      	movs	r0, #0
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4621      	mov	r1, r4
 8009772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009776:	3b30      	subs	r3, #48	; 0x30
 8009778:	2b09      	cmp	r3, #9
 800977a:	d94e      	bls.n	800981a <_svfiprintf_r+0x17e>
 800977c:	b1b0      	cbz	r0, 80097ac <_svfiprintf_r+0x110>
 800977e:	9207      	str	r2, [sp, #28]
 8009780:	e014      	b.n	80097ac <_svfiprintf_r+0x110>
 8009782:	eba0 0308 	sub.w	r3, r0, r8
 8009786:	fa09 f303 	lsl.w	r3, r9, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	46a2      	mov	sl, r4
 8009790:	e7d2      	b.n	8009738 <_svfiprintf_r+0x9c>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9103      	str	r1, [sp, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfbb      	ittet	lt
 800979e:	425b      	neglt	r3, r3
 80097a0:	f042 0202 	orrlt.w	r2, r2, #2
 80097a4:	9307      	strge	r3, [sp, #28]
 80097a6:	9307      	strlt	r3, [sp, #28]
 80097a8:	bfb8      	it	lt
 80097aa:	9204      	strlt	r2, [sp, #16]
 80097ac:	7823      	ldrb	r3, [r4, #0]
 80097ae:	2b2e      	cmp	r3, #46	; 0x2e
 80097b0:	d10c      	bne.n	80097cc <_svfiprintf_r+0x130>
 80097b2:	7863      	ldrb	r3, [r4, #1]
 80097b4:	2b2a      	cmp	r3, #42	; 0x2a
 80097b6:	d135      	bne.n	8009824 <_svfiprintf_r+0x188>
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	9203      	str	r2, [sp, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	bfb8      	it	lt
 80097c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097c8:	3402      	adds	r4, #2
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009898 <_svfiprintf_r+0x1fc>
 80097d0:	7821      	ldrb	r1, [r4, #0]
 80097d2:	2203      	movs	r2, #3
 80097d4:	4650      	mov	r0, sl
 80097d6:	f7f6 fcfb 	bl	80001d0 <memchr>
 80097da:	b140      	cbz	r0, 80097ee <_svfiprintf_r+0x152>
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	eba0 000a 	sub.w	r0, r0, sl
 80097e2:	fa03 f000 	lsl.w	r0, r3, r0
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	4303      	orrs	r3, r0
 80097ea:	3401      	adds	r4, #1
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f2:	4826      	ldr	r0, [pc, #152]	; (800988c <_svfiprintf_r+0x1f0>)
 80097f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097f8:	2206      	movs	r2, #6
 80097fa:	f7f6 fce9 	bl	80001d0 <memchr>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d038      	beq.n	8009874 <_svfiprintf_r+0x1d8>
 8009802:	4b23      	ldr	r3, [pc, #140]	; (8009890 <_svfiprintf_r+0x1f4>)
 8009804:	bb1b      	cbnz	r3, 800984e <_svfiprintf_r+0x1b2>
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	3307      	adds	r3, #7
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	3308      	adds	r3, #8
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	4433      	add	r3, r6
 8009816:	9309      	str	r3, [sp, #36]	; 0x24
 8009818:	e767      	b.n	80096ea <_svfiprintf_r+0x4e>
 800981a:	fb0c 3202 	mla	r2, ip, r2, r3
 800981e:	460c      	mov	r4, r1
 8009820:	2001      	movs	r0, #1
 8009822:	e7a5      	b.n	8009770 <_svfiprintf_r+0xd4>
 8009824:	2300      	movs	r3, #0
 8009826:	3401      	adds	r4, #1
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	4619      	mov	r1, r3
 800982c:	f04f 0c0a 	mov.w	ip, #10
 8009830:	4620      	mov	r0, r4
 8009832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009836:	3a30      	subs	r2, #48	; 0x30
 8009838:	2a09      	cmp	r2, #9
 800983a:	d903      	bls.n	8009844 <_svfiprintf_r+0x1a8>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0c5      	beq.n	80097cc <_svfiprintf_r+0x130>
 8009840:	9105      	str	r1, [sp, #20]
 8009842:	e7c3      	b.n	80097cc <_svfiprintf_r+0x130>
 8009844:	fb0c 2101 	mla	r1, ip, r1, r2
 8009848:	4604      	mov	r4, r0
 800984a:	2301      	movs	r3, #1
 800984c:	e7f0      	b.n	8009830 <_svfiprintf_r+0x194>
 800984e:	ab03      	add	r3, sp, #12
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	462a      	mov	r2, r5
 8009854:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <_svfiprintf_r+0x1f8>)
 8009856:	a904      	add	r1, sp, #16
 8009858:	4638      	mov	r0, r7
 800985a:	f3af 8000 	nop.w
 800985e:	1c42      	adds	r2, r0, #1
 8009860:	4606      	mov	r6, r0
 8009862:	d1d6      	bne.n	8009812 <_svfiprintf_r+0x176>
 8009864:	89ab      	ldrh	r3, [r5, #12]
 8009866:	065b      	lsls	r3, r3, #25
 8009868:	f53f af2c 	bmi.w	80096c4 <_svfiprintf_r+0x28>
 800986c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800986e:	b01d      	add	sp, #116	; 0x74
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	ab03      	add	r3, sp, #12
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	462a      	mov	r2, r5
 800987a:	4b06      	ldr	r3, [pc, #24]	; (8009894 <_svfiprintf_r+0x1f8>)
 800987c:	a904      	add	r1, sp, #16
 800987e:	4638      	mov	r0, r7
 8009880:	f000 f87a 	bl	8009978 <_printf_i>
 8009884:	e7eb      	b.n	800985e <_svfiprintf_r+0x1c2>
 8009886:	bf00      	nop
 8009888:	08009e40 	.word	0x08009e40
 800988c:	08009e4a 	.word	0x08009e4a
 8009890:	00000000 	.word	0x00000000
 8009894:	080095e5 	.word	0x080095e5
 8009898:	08009e46 	.word	0x08009e46

0800989c <_printf_common>:
 800989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a0:	4616      	mov	r6, r2
 80098a2:	4699      	mov	r9, r3
 80098a4:	688a      	ldr	r2, [r1, #8]
 80098a6:	690b      	ldr	r3, [r1, #16]
 80098a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098ac:	4293      	cmp	r3, r2
 80098ae:	bfb8      	it	lt
 80098b0:	4613      	movlt	r3, r2
 80098b2:	6033      	str	r3, [r6, #0]
 80098b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b8:	4607      	mov	r7, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	b10a      	cbz	r2, 80098c2 <_printf_common+0x26>
 80098be:	3301      	adds	r3, #1
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	0699      	lsls	r1, r3, #26
 80098c6:	bf42      	ittt	mi
 80098c8:	6833      	ldrmi	r3, [r6, #0]
 80098ca:	3302      	addmi	r3, #2
 80098cc:	6033      	strmi	r3, [r6, #0]
 80098ce:	6825      	ldr	r5, [r4, #0]
 80098d0:	f015 0506 	ands.w	r5, r5, #6
 80098d4:	d106      	bne.n	80098e4 <_printf_common+0x48>
 80098d6:	f104 0a19 	add.w	sl, r4, #25
 80098da:	68e3      	ldr	r3, [r4, #12]
 80098dc:	6832      	ldr	r2, [r6, #0]
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	42ab      	cmp	r3, r5
 80098e2:	dc26      	bgt.n	8009932 <_printf_common+0x96>
 80098e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098e8:	1e13      	subs	r3, r2, #0
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	bf18      	it	ne
 80098ee:	2301      	movne	r3, #1
 80098f0:	0692      	lsls	r2, r2, #26
 80098f2:	d42b      	bmi.n	800994c <_printf_common+0xb0>
 80098f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f8:	4649      	mov	r1, r9
 80098fa:	4638      	mov	r0, r7
 80098fc:	47c0      	blx	r8
 80098fe:	3001      	adds	r0, #1
 8009900:	d01e      	beq.n	8009940 <_printf_common+0xa4>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	68e5      	ldr	r5, [r4, #12]
 8009906:	6832      	ldr	r2, [r6, #0]
 8009908:	f003 0306 	and.w	r3, r3, #6
 800990c:	2b04      	cmp	r3, #4
 800990e:	bf08      	it	eq
 8009910:	1aad      	subeq	r5, r5, r2
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	6922      	ldr	r2, [r4, #16]
 8009916:	bf0c      	ite	eq
 8009918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800991c:	2500      	movne	r5, #0
 800991e:	4293      	cmp	r3, r2
 8009920:	bfc4      	itt	gt
 8009922:	1a9b      	subgt	r3, r3, r2
 8009924:	18ed      	addgt	r5, r5, r3
 8009926:	2600      	movs	r6, #0
 8009928:	341a      	adds	r4, #26
 800992a:	42b5      	cmp	r5, r6
 800992c:	d11a      	bne.n	8009964 <_printf_common+0xc8>
 800992e:	2000      	movs	r0, #0
 8009930:	e008      	b.n	8009944 <_printf_common+0xa8>
 8009932:	2301      	movs	r3, #1
 8009934:	4652      	mov	r2, sl
 8009936:	4649      	mov	r1, r9
 8009938:	4638      	mov	r0, r7
 800993a:	47c0      	blx	r8
 800993c:	3001      	adds	r0, #1
 800993e:	d103      	bne.n	8009948 <_printf_common+0xac>
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009948:	3501      	adds	r5, #1
 800994a:	e7c6      	b.n	80098da <_printf_common+0x3e>
 800994c:	18e1      	adds	r1, r4, r3
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	2030      	movs	r0, #48	; 0x30
 8009952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009956:	4422      	add	r2, r4
 8009958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800995c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009960:	3302      	adds	r3, #2
 8009962:	e7c7      	b.n	80098f4 <_printf_common+0x58>
 8009964:	2301      	movs	r3, #1
 8009966:	4622      	mov	r2, r4
 8009968:	4649      	mov	r1, r9
 800996a:	4638      	mov	r0, r7
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d0e6      	beq.n	8009940 <_printf_common+0xa4>
 8009972:	3601      	adds	r6, #1
 8009974:	e7d9      	b.n	800992a <_printf_common+0x8e>
	...

08009978 <_printf_i>:
 8009978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800997c:	7e0f      	ldrb	r7, [r1, #24]
 800997e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009980:	2f78      	cmp	r7, #120	; 0x78
 8009982:	4691      	mov	r9, r2
 8009984:	4680      	mov	r8, r0
 8009986:	460c      	mov	r4, r1
 8009988:	469a      	mov	sl, r3
 800998a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800998e:	d807      	bhi.n	80099a0 <_printf_i+0x28>
 8009990:	2f62      	cmp	r7, #98	; 0x62
 8009992:	d80a      	bhi.n	80099aa <_printf_i+0x32>
 8009994:	2f00      	cmp	r7, #0
 8009996:	f000 80d8 	beq.w	8009b4a <_printf_i+0x1d2>
 800999a:	2f58      	cmp	r7, #88	; 0x58
 800999c:	f000 80a3 	beq.w	8009ae6 <_printf_i+0x16e>
 80099a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a8:	e03a      	b.n	8009a20 <_printf_i+0xa8>
 80099aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ae:	2b15      	cmp	r3, #21
 80099b0:	d8f6      	bhi.n	80099a0 <_printf_i+0x28>
 80099b2:	a101      	add	r1, pc, #4	; (adr r1, 80099b8 <_printf_i+0x40>)
 80099b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099b8:	08009a11 	.word	0x08009a11
 80099bc:	08009a25 	.word	0x08009a25
 80099c0:	080099a1 	.word	0x080099a1
 80099c4:	080099a1 	.word	0x080099a1
 80099c8:	080099a1 	.word	0x080099a1
 80099cc:	080099a1 	.word	0x080099a1
 80099d0:	08009a25 	.word	0x08009a25
 80099d4:	080099a1 	.word	0x080099a1
 80099d8:	080099a1 	.word	0x080099a1
 80099dc:	080099a1 	.word	0x080099a1
 80099e0:	080099a1 	.word	0x080099a1
 80099e4:	08009b31 	.word	0x08009b31
 80099e8:	08009a55 	.word	0x08009a55
 80099ec:	08009b13 	.word	0x08009b13
 80099f0:	080099a1 	.word	0x080099a1
 80099f4:	080099a1 	.word	0x080099a1
 80099f8:	08009b53 	.word	0x08009b53
 80099fc:	080099a1 	.word	0x080099a1
 8009a00:	08009a55 	.word	0x08009a55
 8009a04:	080099a1 	.word	0x080099a1
 8009a08:	080099a1 	.word	0x080099a1
 8009a0c:	08009b1b 	.word	0x08009b1b
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	1d1a      	adds	r2, r3, #4
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	602a      	str	r2, [r5, #0]
 8009a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a20:	2301      	movs	r3, #1
 8009a22:	e0a3      	b.n	8009b6c <_printf_i+0x1f4>
 8009a24:	6820      	ldr	r0, [r4, #0]
 8009a26:	6829      	ldr	r1, [r5, #0]
 8009a28:	0606      	lsls	r6, r0, #24
 8009a2a:	f101 0304 	add.w	r3, r1, #4
 8009a2e:	d50a      	bpl.n	8009a46 <_printf_i+0xce>
 8009a30:	680e      	ldr	r6, [r1, #0]
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	2e00      	cmp	r6, #0
 8009a36:	da03      	bge.n	8009a40 <_printf_i+0xc8>
 8009a38:	232d      	movs	r3, #45	; 0x2d
 8009a3a:	4276      	negs	r6, r6
 8009a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a40:	485e      	ldr	r0, [pc, #376]	; (8009bbc <_printf_i+0x244>)
 8009a42:	230a      	movs	r3, #10
 8009a44:	e019      	b.n	8009a7a <_printf_i+0x102>
 8009a46:	680e      	ldr	r6, [r1, #0]
 8009a48:	602b      	str	r3, [r5, #0]
 8009a4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a4e:	bf18      	it	ne
 8009a50:	b236      	sxthne	r6, r6
 8009a52:	e7ef      	b.n	8009a34 <_printf_i+0xbc>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	1d19      	adds	r1, r3, #4
 8009a5a:	6029      	str	r1, [r5, #0]
 8009a5c:	0601      	lsls	r1, r0, #24
 8009a5e:	d501      	bpl.n	8009a64 <_printf_i+0xec>
 8009a60:	681e      	ldr	r6, [r3, #0]
 8009a62:	e002      	b.n	8009a6a <_printf_i+0xf2>
 8009a64:	0646      	lsls	r6, r0, #25
 8009a66:	d5fb      	bpl.n	8009a60 <_printf_i+0xe8>
 8009a68:	881e      	ldrh	r6, [r3, #0]
 8009a6a:	4854      	ldr	r0, [pc, #336]	; (8009bbc <_printf_i+0x244>)
 8009a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a6e:	bf0c      	ite	eq
 8009a70:	2308      	moveq	r3, #8
 8009a72:	230a      	movne	r3, #10
 8009a74:	2100      	movs	r1, #0
 8009a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a7a:	6865      	ldr	r5, [r4, #4]
 8009a7c:	60a5      	str	r5, [r4, #8]
 8009a7e:	2d00      	cmp	r5, #0
 8009a80:	bfa2      	ittt	ge
 8009a82:	6821      	ldrge	r1, [r4, #0]
 8009a84:	f021 0104 	bicge.w	r1, r1, #4
 8009a88:	6021      	strge	r1, [r4, #0]
 8009a8a:	b90e      	cbnz	r6, 8009a90 <_printf_i+0x118>
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	d04d      	beq.n	8009b2c <_printf_i+0x1b4>
 8009a90:	4615      	mov	r5, r2
 8009a92:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a96:	fb03 6711 	mls	r7, r3, r1, r6
 8009a9a:	5dc7      	ldrb	r7, [r0, r7]
 8009a9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009aa0:	4637      	mov	r7, r6
 8009aa2:	42bb      	cmp	r3, r7
 8009aa4:	460e      	mov	r6, r1
 8009aa6:	d9f4      	bls.n	8009a92 <_printf_i+0x11a>
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d10b      	bne.n	8009ac4 <_printf_i+0x14c>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07de      	lsls	r6, r3, #31
 8009ab0:	d508      	bpl.n	8009ac4 <_printf_i+0x14c>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	6861      	ldr	r1, [r4, #4]
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	bfde      	ittt	le
 8009aba:	2330      	movle	r3, #48	; 0x30
 8009abc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ac0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ac4:	1b52      	subs	r2, r2, r5
 8009ac6:	6122      	str	r2, [r4, #16]
 8009ac8:	f8cd a000 	str.w	sl, [sp]
 8009acc:	464b      	mov	r3, r9
 8009ace:	aa03      	add	r2, sp, #12
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff fee2 	bl	800989c <_printf_common>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d14c      	bne.n	8009b76 <_printf_i+0x1fe>
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	b004      	add	sp, #16
 8009ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae6:	4835      	ldr	r0, [pc, #212]	; (8009bbc <_printf_i+0x244>)
 8009ae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009aec:	6829      	ldr	r1, [r5, #0]
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009af4:	6029      	str	r1, [r5, #0]
 8009af6:	061d      	lsls	r5, r3, #24
 8009af8:	d514      	bpl.n	8009b24 <_printf_i+0x1ac>
 8009afa:	07df      	lsls	r7, r3, #31
 8009afc:	bf44      	itt	mi
 8009afe:	f043 0320 	orrmi.w	r3, r3, #32
 8009b02:	6023      	strmi	r3, [r4, #0]
 8009b04:	b91e      	cbnz	r6, 8009b0e <_printf_i+0x196>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	f023 0320 	bic.w	r3, r3, #32
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	2310      	movs	r3, #16
 8009b10:	e7b0      	b.n	8009a74 <_printf_i+0xfc>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f043 0320 	orr.w	r3, r3, #32
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	2378      	movs	r3, #120	; 0x78
 8009b1c:	4828      	ldr	r0, [pc, #160]	; (8009bc0 <_printf_i+0x248>)
 8009b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b22:	e7e3      	b.n	8009aec <_printf_i+0x174>
 8009b24:	0659      	lsls	r1, r3, #25
 8009b26:	bf48      	it	mi
 8009b28:	b2b6      	uxthmi	r6, r6
 8009b2a:	e7e6      	b.n	8009afa <_printf_i+0x182>
 8009b2c:	4615      	mov	r5, r2
 8009b2e:	e7bb      	b.n	8009aa8 <_printf_i+0x130>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	6826      	ldr	r6, [r4, #0]
 8009b34:	6961      	ldr	r1, [r4, #20]
 8009b36:	1d18      	adds	r0, r3, #4
 8009b38:	6028      	str	r0, [r5, #0]
 8009b3a:	0635      	lsls	r5, r6, #24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0x1cc>
 8009b40:	6019      	str	r1, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <_printf_i+0x1d2>
 8009b44:	0670      	lsls	r0, r6, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0x1c8>
 8009b48:	8019      	strh	r1, [r3, #0]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	4615      	mov	r5, r2
 8009b50:	e7ba      	b.n	8009ac8 <_printf_i+0x150>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	602a      	str	r2, [r5, #0]
 8009b58:	681d      	ldr	r5, [r3, #0]
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f7f6 fb36 	bl	80001d0 <memchr>
 8009b64:	b108      	cbz	r0, 8009b6a <_printf_i+0x1f2>
 8009b66:	1b40      	subs	r0, r0, r5
 8009b68:	6060      	str	r0, [r4, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b74:	e7a8      	b.n	8009ac8 <_printf_i+0x150>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	47d0      	blx	sl
 8009b80:	3001      	adds	r0, #1
 8009b82:	d0ab      	beq.n	8009adc <_printf_i+0x164>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	d413      	bmi.n	8009bb2 <_printf_i+0x23a>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bfb8      	it	lt
 8009b92:	4618      	movlt	r0, r3
 8009b94:	e7a4      	b.n	8009ae0 <_printf_i+0x168>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d09b      	beq.n	8009adc <_printf_i+0x164>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	9903      	ldr	r1, [sp, #12]
 8009baa:	1a5b      	subs	r3, r3, r1
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dcf2      	bgt.n	8009b96 <_printf_i+0x21e>
 8009bb0:	e7eb      	b.n	8009b8a <_printf_i+0x212>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	f104 0619 	add.w	r6, r4, #25
 8009bb8:	e7f5      	b.n	8009ba6 <_printf_i+0x22e>
 8009bba:	bf00      	nop
 8009bbc:	08009e51 	.word	0x08009e51
 8009bc0:	08009e62 	.word	0x08009e62

08009bc4 <memmove>:
 8009bc4:	4288      	cmp	r0, r1
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	eb01 0402 	add.w	r4, r1, r2
 8009bcc:	d902      	bls.n	8009bd4 <memmove+0x10>
 8009bce:	4284      	cmp	r4, r0
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	d807      	bhi.n	8009be4 <memmove+0x20>
 8009bd4:	1e43      	subs	r3, r0, #1
 8009bd6:	42a1      	cmp	r1, r4
 8009bd8:	d008      	beq.n	8009bec <memmove+0x28>
 8009bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009be2:	e7f8      	b.n	8009bd6 <memmove+0x12>
 8009be4:	4402      	add	r2, r0
 8009be6:	4601      	mov	r1, r0
 8009be8:	428a      	cmp	r2, r1
 8009bea:	d100      	bne.n	8009bee <memmove+0x2a>
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf6:	e7f7      	b.n	8009be8 <memmove+0x24>

08009bf8 <_realloc_r>:
 8009bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	4614      	mov	r4, r2
 8009c00:	460e      	mov	r6, r1
 8009c02:	b921      	cbnz	r1, 8009c0e <_realloc_r+0x16>
 8009c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c08:	4611      	mov	r1, r2
 8009c0a:	f7ff bb71 	b.w	80092f0 <_malloc_r>
 8009c0e:	b92a      	cbnz	r2, 8009c1c <_realloc_r+0x24>
 8009c10:	f7ff fc9c 	bl	800954c <_free_r>
 8009c14:	4625      	mov	r5, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c1c:	f000 f81b 	bl	8009c56 <_malloc_usable_size_r>
 8009c20:	4284      	cmp	r4, r0
 8009c22:	4607      	mov	r7, r0
 8009c24:	d802      	bhi.n	8009c2c <_realloc_r+0x34>
 8009c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c2a:	d812      	bhi.n	8009c52 <_realloc_r+0x5a>
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4640      	mov	r0, r8
 8009c30:	f7ff fb5e 	bl	80092f0 <_malloc_r>
 8009c34:	4605      	mov	r5, r0
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d0ed      	beq.n	8009c16 <_realloc_r+0x1e>
 8009c3a:	42bc      	cmp	r4, r7
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4631      	mov	r1, r6
 8009c40:	bf28      	it	cs
 8009c42:	463a      	movcs	r2, r7
 8009c44:	f7ff fb1e 	bl	8009284 <memcpy>
 8009c48:	4631      	mov	r1, r6
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	f7ff fc7e 	bl	800954c <_free_r>
 8009c50:	e7e1      	b.n	8009c16 <_realloc_r+0x1e>
 8009c52:	4635      	mov	r5, r6
 8009c54:	e7df      	b.n	8009c16 <_realloc_r+0x1e>

08009c56 <_malloc_usable_size_r>:
 8009c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5a:	1f18      	subs	r0, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbc      	itt	lt
 8009c60:	580b      	ldrlt	r3, [r1, r0]
 8009c62:	18c0      	addlt	r0, r0, r3
 8009c64:	4770      	bx	lr
	...

08009c68 <trunc>:
 8009c68:	ec51 0b10 	vmov	r0, r1, d0
 8009c6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c70:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009c74:	2b13      	cmp	r3, #19
 8009c76:	b5d0      	push	{r4, r6, r7, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	dc10      	bgt.n	8009c9e <trunc+0x36>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bfa5      	ittet	ge
 8009c80:	4a11      	ldrge	r2, [pc, #68]	; (8009cc8 <trunc+0x60>)
 8009c82:	fa42 f303 	asrge.w	r3, r2, r3
 8009c86:	2100      	movlt	r1, #0
 8009c88:	2100      	movge	r1, #0
 8009c8a:	bfb9      	ittee	lt
 8009c8c:	2000      	movlt	r0, #0
 8009c8e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8009c92:	2000      	movge	r0, #0
 8009c94:	ea24 0103 	bicge.w	r1, r4, r3
 8009c98:	ec41 0b10 	vmov	d0, r0, r1
 8009c9c:	bdd0      	pop	{r4, r6, r7, pc}
 8009c9e:	2b33      	cmp	r3, #51	; 0x33
 8009ca0:	dd08      	ble.n	8009cb4 <trunc+0x4c>
 8009ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca6:	d1f7      	bne.n	8009c98 <trunc+0x30>
 8009ca8:	ee10 2a10 	vmov	r2, s0
 8009cac:	460b      	mov	r3, r1
 8009cae:	f7f6 fae5 	bl	800027c <__adddf3>
 8009cb2:	e7f1      	b.n	8009c98 <trunc+0x30>
 8009cb4:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	fa23 f202 	lsr.w	r2, r3, r2
 8009cc0:	ea20 0602 	bic.w	r6, r0, r2
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	e7e7      	b.n	8009c98 <trunc+0x30>
 8009cc8:	000fffff 	.word	0x000fffff

08009ccc <_init>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr

08009cd8 <_fini>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr
