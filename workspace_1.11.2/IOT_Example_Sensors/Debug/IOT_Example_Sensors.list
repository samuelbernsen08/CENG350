
IOT_Example_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a370  0800a370  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a378  0800a378  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800a380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002698  200000d0  0800a450  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002768  0800a450  00022768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b006  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000579c  00000000  00000000  0004b106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  000508a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c8  00000000  00000000  00052bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd3a  00000000  00000000  00054ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4d0  00000000  00000000  000829da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d6c2  00000000  00000000  000adeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb56c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d8  00000000  00000000  001bb5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a12c 	.word	0x0800a12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800a12c 	.word	0x0800a12c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <vApplicationGetIdleTaskMemory+0x2c>)
 800094c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <vApplicationGetIdleTaskMemory+0x30>)
 8000952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	200000ec 	.word	0x200000ec
 800096c:	200001a0 	.word	0x200001a0

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b09e      	sub	sp, #120	; 0x78
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f001 feed 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f883 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 fa13 	bl	8000da8 <MX_GPIO_Init>
  //MX_DFSDM1_Init();
  MX_I2C2_Init();
 8000982:	f000 f8e1 	bl	8000b48 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000986:	f000 f91d 	bl	8000bc4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800098a:	f000 f941 	bl	8000c10 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800098e:	f000 f97d 	bl	8000c8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000992:	f000 f9ab 	bl	8000cec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000996:	f000 f9d9 	bl	8000d4c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */

  BSP_TSENSOR_Init();
 800099a:	f001 fb3b 	bl	8002014 <BSP_TSENSOR_Init>
  BSP_PSENSOR_Init();
 800099e:	f001 fb0b 	bl	8001fb8 <BSP_PSENSOR_Init>
  BSP_HSENSOR_Init();
 80009a2:	f001 fadb 	bl	8001f5c <BSP_HSENSOR_Init>
  BSP_ACCELERO_Init();
 80009a6:	f001 fa83 	bl	8001eb0 <BSP_ACCELERO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80009aa:	2300      	movs	r3, #0
 80009ac:	673b      	str	r3, [r7, #112]	; 0x70
 80009ae:	2300      	movs	r3, #0
 80009b0:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80009b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009b6:	2101      	movs	r1, #1
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fb3a 	bl	8007032 <osSemaphoreCreate>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <main+0xf0>)
 80009c2:	6013      	str	r3, [r2, #0]
  /* definition and creation of buttonTask */
  //osThreadDef(buttonTask, StartButtonTask, osPriorityAboveNormal, 0, 128);
  //buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);

  /* definition and creation of tempTask */
  osThreadDef(tempTask, StartTempTask, osPriorityNormal, 0, 128);
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <main+0xf4>)
 80009c6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80009ca:	461d      	mov	r5, r3
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tempTaskHandle = osThreadCreate(osThread(tempTask), NULL);
 80009d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f006 fac7 	bl	8006f72 <osThreadCreate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <main+0xf8>)
 80009e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureTask */
  osThreadDef(pressureTask, StartPressureTask, osPriorityNormal, 0, 128);
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <main+0xfc>)
 80009ec:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009f0:	461d      	mov	r5, r3
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureTaskHandle = osThreadCreate(osThread(pressureTask), NULL);
 80009fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f006 fab4 	bl	8006f72 <osThreadCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <main+0x100>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of humidityTask */
  osThreadDef(humidityTask, StartHumidityTask, osPriorityNormal, 0, 128);
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <main+0x104>)
 8000a12:	f107 041c 	add.w	r4, r7, #28
 8000a16:	461d      	mov	r5, r3
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  humidityTaskHandle = osThreadCreate(osThread(humidityTask), NULL);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 faa1 	bl	8006f72 <osThreadCreate>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <main+0x108>)
 8000a34:	6013      	str	r3, [r2, #0]

  /* definition and creation of accelerometerTa */
  osThreadDef(accelerometerTa, StartAccelerometerTask, osPriorityNormal, 0, 128);
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <main+0x10c>)
 8000a38:	463c      	mov	r4, r7
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  accelerometerTaHandle = osThreadCreate(osThread(accelerometerTa), NULL);
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 fa90 	bl	8006f72 <osThreadCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <main+0x110>)
 8000a56:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a58:	f006 fa84 	bl	8006f64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0xec>
 8000a5e:	bf00      	nop
 8000a60:	20000ac0 	.word	0x20000ac0
 8000a64:	0800a180 	.word	0x0800a180
 8000a68:	20000ab0 	.word	0x20000ab0
 8000a6c:	0800a19c 	.word	0x0800a19c
 8000a70:	20000ab4 	.word	0x20000ab4
 8000a74:	0800a1b8 	.word	0x0800a1b8
 8000a78:	20000ab8 	.word	0x20000ab8
 8000a7c:	0800a1d4 	.word	0x0800a1d4
 8000a80:	20000abc 	.word	0x20000abc

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	; 0x58
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2244      	movs	r2, #68	; 0x44
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f008 fe34 	bl	8009700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aaa:	f003 fa9f 	bl	8003fec <HAL_PWREx_ControlVoltageScaling>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ab4:	f000 fcee 	bl	8001494 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ab8:	f003 fa7a 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <SystemClock_Config+0xc0>)
 8000abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ac2:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <SystemClock_Config+0xc0>)
 8000ac4:	f023 0318 	bic.w	r3, r3, #24
 8000ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000acc:	2314      	movs	r3, #20
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000adc:	2360      	movs	r3, #96	; 0x60
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000aec:	2328      	movs	r3, #40	; 0x28
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fb95 	bl	8004230 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b0c:	f000 fcc2 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b10:	230f      	movs	r3, #15
 8000b12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b14:	2303      	movs	r3, #3
 8000b16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	2104      	movs	r1, #4
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 ff5d 	bl	80049e8 <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b34:	f000 fcae 	bl	8001494 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b38:	f004 fc96 	bl	8005468 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b3c:	bf00      	nop
 8000b3e:	3758      	adds	r7, #88	; 0x58
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_I2C2_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b54:	f640 6214 	movw	r2, #3604	; 0xe14
 8000b58:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b86:	f002 faa1 	bl	80030cc <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 fc80 	bl	8001494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000b98:	f003 f82a 	bl	8003bf0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ba2:	f000 fc77 	bl	8001494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_I2C2_Init+0x74>)
 8000baa:	f003 f86c 	bl	8003c86 <HAL_I2CEx_ConfigDigitalFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 fc6e 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200003a0 	.word	0x200003a0
 8000bc0:	40005800 	.word	0x40005800

08000bc4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <MX_QUADSPI_Init+0x48>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000be2:	2217      	movs	r2, #23
 8000be4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_QUADSPI_Init+0x44>)
 8000bf4:	f003 fa60 	bl	80040b8 <HAL_QSPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000bfe:	f000 fc49 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200003f4 	.word	0x200003f4
 8000c0c:	a0001000 	.word	0xa0001000

08000c10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_SPI3_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_SPI3_Init+0x74>)
 8000c70:	f004 fddc 	bl	800582c <HAL_SPI_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fc0b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000438 	.word	0x20000438
 8000c88:	40003c00 	.word	0x40003c00

08000c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_USART1_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cd0:	f005 f920 	bl	8005f14 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 fbdb 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000049c 	.word	0x2000049c
 8000ce8:	40013800 	.word	0x40013800

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART3_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d30:	f005 f8f0 	bl	8005f14 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 fbab 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000520 	.word	0x20000520
 8000d48:	40004800 	.word	0x40004800

08000d4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d66:	2202      	movs	r2, #2
 8000d68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d90:	f002 ffc5 	bl	8003d1e <HAL_PCD_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 fb7b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200005a4 	.word	0x200005a4

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	4bbd      	ldr	r3, [pc, #756]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4abc      	ldr	r2, [pc, #752]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4bba      	ldr	r3, [pc, #744]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4bb7      	ldr	r3, [pc, #732]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4ab6      	ldr	r2, [pc, #728]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4bb4      	ldr	r3, [pc, #720]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4bb1      	ldr	r3, [pc, #708]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4ab0      	ldr	r2, [pc, #704]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4bae      	ldr	r3, [pc, #696]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4bab      	ldr	r3, [pc, #684]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4aaa      	ldr	r2, [pc, #680]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4ba8      	ldr	r3, [pc, #672]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	4ba5      	ldr	r3, [pc, #660]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4aa4      	ldr	r2, [pc, #656]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4ba2      	ldr	r3, [pc, #648]	; (80010b4 <MX_GPIO_Init+0x30c>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e3c:	489e      	ldr	r0, [pc, #632]	; (80010b8 <MX_GPIO_Init+0x310>)
 8000e3e:	f002 f915 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f002 f90e 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e50:	2200      	movs	r2, #0
 8000e52:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e56:	4899      	ldr	r0, [pc, #612]	; (80010bc <MX_GPIO_Init+0x314>)
 8000e58:	f002 f908 	bl	800306c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e62:	4897      	ldr	r0, [pc, #604]	; (80010c0 <MX_GPIO_Init+0x318>)
 8000e64:	f002 f902 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	4894      	ldr	r0, [pc, #592]	; (80010c0 <MX_GPIO_Init+0x318>)
 8000e70:	f002 f8fc 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e7a:	4892      	ldr	r0, [pc, #584]	; (80010c4 <MX_GPIO_Init+0x31c>)
 8000e7c:	f002 f8f6 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2120      	movs	r1, #32
 8000e84:	488d      	ldr	r0, [pc, #564]	; (80010bc <MX_GPIO_Init+0x314>)
 8000e86:	f002 f8f1 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	488a      	ldr	r0, [pc, #552]	; (80010b8 <MX_GPIO_Init+0x310>)
 8000e90:	f002 f8ec 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e94:	f240 1315 	movw	r3, #277	; 0x115
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4882      	ldr	r0, [pc, #520]	; (80010b8 <MX_GPIO_Init+0x310>)
 8000eae:	f001 fe3f 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000eb2:	236a      	movs	r3, #106	; 0x6a
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	487c      	ldr	r0, [pc, #496]	; (80010b8 <MX_GPIO_Init+0x310>)
 8000ec8:	f001 fe32 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Button_Pin */
  GPIO_InitStruct.Pin = B1_Button_Pin;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_Button_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4878      	ldr	r0, [pc, #480]	; (80010c4 <MX_GPIO_Init+0x31c>)
 8000ee4:	f001 fe24 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ee8:	233f      	movs	r3, #63	; 0x3f
 8000eea:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eec:	230b      	movs	r3, #11
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4872      	ldr	r0, [pc, #456]	; (80010c4 <MX_GPIO_Init+0x31c>)
 8000efc:	f001 fe18 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000f00:	2303      	movs	r3, #3
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f10:	2308      	movs	r3, #8
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 fe07 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f22:	f248 1304 	movw	r3, #33028	; 0x8104
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f001 fdf7 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f42:	2308      	movs	r3, #8
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f52:	2301      	movs	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f001 fde6 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f64:	2310      	movs	r3, #16
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f68:	230b      	movs	r3, #11
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f001 fdd9 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f7e:	23e0      	movs	r3, #224	; 0xe0
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f001 fdc8 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4841      	ldr	r0, [pc, #260]	; (80010bc <MX_GPIO_Init+0x314>)
 8000fb6:	f001 fdbb 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fbe:	230b      	movs	r3, #11
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	483b      	ldr	r0, [pc, #236]	; (80010bc <MX_GPIO_Init+0x314>)
 8000fce:	f001 fdaf 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000fd2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000fd6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4834      	ldr	r0, [pc, #208]	; (80010bc <MX_GPIO_Init+0x314>)
 8000fec:	f001 fda0 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ff0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ff4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	482e      	ldr	r0, [pc, #184]	; (80010c0 <MX_GPIO_Init+0x318>)
 8001008:	f001 fd92 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800100c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4826      	ldr	r0, [pc, #152]	; (80010c0 <MX_GPIO_Init+0x318>)
 8001026:	f001 fd83 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800102a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4820      	ldr	r0, [pc, #128]	; (80010c4 <MX_GPIO_Init+0x31c>)
 8001044:	f001 fd74 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001048:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4819      	ldr	r0, [pc, #100]	; (80010c4 <MX_GPIO_Init+0x31c>)
 8001060:	f001 fd66 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001074:	2305      	movs	r3, #5
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <MX_GPIO_Init+0x318>)
 8001080:	f001 fd56 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001084:	2378      	movs	r3, #120	; 0x78
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001094:	2307      	movs	r3, #7
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x318>)
 80010a0:	f001 fd46 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80010a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010aa:	2312      	movs	r3, #18
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e00a      	b.n	80010c8 <MX_GPIO_Init+0x320>
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48001000 	.word	0x48001000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000c00 	.word	0x48000c00
 80010c4:	48000800 	.word	0x48000800
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <MX_GPIO_Init+0x360>)
 80010da:	f001 fd29 	bl	8002b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	2017      	movs	r0, #23
 80010e4:	f001 fc4a 	bl	800297c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e8:	2017      	movs	r0, #23
 80010ea:	f001 fc63 	bl	80029b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f001 fc42 	bl	800297c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f8:	2028      	movs	r0, #40	; 0x28
 80010fa:	f001 fc5b 	bl	80029b4 <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	48000400 	.word	0x48000400

0800110c <StartTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTempTask */
void StartTempTask(void const * argument)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTempTask */
  /* Infinite loop */
  for(;;)
  {
	  if (hits % 2 == 1)
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <StartTempTask+0xc0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	bfb8      	it	lt
 8001120:	425b      	neglt	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1f6      	bne.n	8001114 <StartTempTask+0x8>
	  {
	  		  temp_value = BSP_TSENSOR_ReadTemp();
 8001126:	f000 ff91 	bl	800204c <BSP_TSENSOR_ReadTemp>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <StartTempTask+0xc4>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
	  		  int tmpInt1 = temp_value;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <StartTempTask+0xc4>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113e:	ee17 3a90 	vmov	r3, s15
 8001142:	617b      	str	r3, [r7, #20]
	  		  float tmpFrac = temp_value - tmpInt1;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <StartTempTask+0xc4>)
 8001146:	ed93 7a00 	vldr	s14, [r3]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc7 7a04 	vstr	s15, [r7, #16]
	  		  int tmpInt2 = trunc(tmpFrac * 100);
 800115c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001160:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80011d4 <StartTempTask+0xc8>
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	ee17 0a90 	vmov	r0, s15
 800116c:	f7ff f9e4 	bl	8000538 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	ec43 2b10 	vmov	d0, r2, r3
 8001178:	f008 ffa6 	bl	800a0c8 <trunc>
 800117c:	ec53 2b10 	vmov	r2, r3, d0
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fa30 	bl	80005e8 <__aeabi_d2iz>
 8001188:	4603      	mov	r3, r0
 800118a:	60fb      	str	r3, [r7, #12]

	  		  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <StartTempTask+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	4618      	mov	r0, r3
 8001196:	f005 ff7f 	bl	8007098 <osSemaphoreWait>
	  		  snprintf(str_tmp,100,"TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <StartTempTask+0xd0>)
 80011a2:	2164      	movs	r1, #100	; 0x64
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <StartTempTask+0xd4>)
 80011a6:	f008 fbc1 	bl	800992c <sniprintf>
	  		  //osMessagePut(myQueue01Handle, (uint32_t)tmpInt2, osWaitForever);
	  		  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp, sizeof(str_tmp),1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	2264      	movs	r2, #100	; 0x64
 80011b0:	490b      	ldr	r1, [pc, #44]	; (80011e0 <StartTempTask+0xd4>)
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <StartTempTask+0xd8>)
 80011b4:	f004 fefc 	bl	8005fb0 <HAL_UART_Transmit>
	  		  osSemaphoreRelease(myBinarySem01Handle);
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <StartTempTask+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 ffb9 	bl	8007134 <osSemaphoreRelease>
	  		  osDelay(1000);
 80011c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c6:	f005 ff20 	bl	800700a <osDelay>
	  if (hits % 2 == 1)
 80011ca:	e7a3      	b.n	8001114 <StartTempTask+0x8>
 80011cc:	20000ac4 	.word	0x20000ac4
 80011d0:	20000ac8 	.word	0x20000ac8
 80011d4:	42c80000 	.word	0x42c80000
 80011d8:	20000ac0 	.word	0x20000ac0
 80011dc:	0800a1f0 	.word	0x0800a1f0
 80011e0:	20000acc 	.word	0x20000acc
 80011e4:	2000049c 	.word	0x2000049c

080011e8 <StartPressureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureTask */
void StartPressureTask(void const * argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureTask */
  /* Infinite loop */
  for(;;)
  {
	  if (hits % 2 == 1)
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <StartPressureTask+0xc0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	bfb8      	it	lt
 80011fc:	425b      	neglt	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d1f6      	bne.n	80011f0 <StartPressureTask+0x8>
	  {
		  pres_value = BSP_PSENSOR_ReadPressure();
 8001202:	f000 fef9 	bl	8001ff8 <BSP_PSENSOR_ReadPressure>
 8001206:	eef0 7a40 	vmov.f32	s15, s0
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <StartPressureTask+0xc4>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
		  int presInt1_1 = pres_value;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <StartPressureTask+0xc4>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	617b      	str	r3, [r7, #20]
		  float presFrac = pres_value - presInt1_1;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <StartPressureTask+0xc4>)
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	edc7 7a04 	vstr	s15, [r7, #16]
		  int presInt2_2 = trunc(presFrac * 100);
 8001238:	edd7 7a04 	vldr	s15, [r7, #16]
 800123c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80012b0 <StartPressureTask+0xc8>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f976 	bl	8000538 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	ec43 2b10 	vmov	d0, r2, r3
 8001254:	f008 ff38 	bl	800a0c8 <trunc>
 8001258:	ec53 2b10 	vmov	r2, r3, d0
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff f9c2 	bl	80005e8 <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]

		  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <StartPressureTask+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	4618      	mov	r0, r3
 8001272:	f005 ff11 	bl	8007098 <osSemaphoreWait>
		  //uint8_t msg[] = "Acquired Semaphore in Pressure Task !!!\r\n"; // Data to send
		  //HAL_UART_Transmit(&huart1, msg, sizeof(msg), 10); // Sending in normal mode
		  snprintf(str_pres,100,"Pressure = %d.%02d\n\r", presInt1_1, presInt2_2);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <StartPressureTask+0xd0>)
 800127e:	2164      	movs	r1, #100	; 0x64
 8001280:	480e      	ldr	r0, [pc, #56]	; (80012bc <StartPressureTask+0xd4>)
 8001282:	f008 fb53 	bl	800992c <sniprintf>
		  HAL_UART_Transmit(&huart1,( uint8_t * )str_pres, sizeof(str_pres),1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	2264      	movs	r2, #100	; 0x64
 800128c:	490b      	ldr	r1, [pc, #44]	; (80012bc <StartPressureTask+0xd4>)
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <StartPressureTask+0xd8>)
 8001290:	f004 fe8e 	bl	8005fb0 <HAL_UART_Transmit>
		  osSemaphoreRelease(myBinarySem01Handle);
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <StartPressureTask+0xcc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f005 ff4b 	bl	8007134 <osSemaphoreRelease>
		  osDelay(1000);
 800129e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a2:	f005 feb2 	bl	800700a <osDelay>
	  if (hits % 2 == 1)
 80012a6:	e7a3      	b.n	80011f0 <StartPressureTask+0x8>
 80012a8:	20000ac4 	.word	0x20000ac4
 80012ac:	20000b30 	.word	0x20000b30
 80012b0:	42c80000 	.word	0x42c80000
 80012b4:	20000ac0 	.word	0x20000ac0
 80012b8:	0800a208 	.word	0x0800a208
 80012bc:	20000b34 	.word	0x20000b34
 80012c0:	2000049c 	.word	0x2000049c

080012c4 <StartHumidityTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHumidityTask */
void StartHumidityTask(void const * argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHumidityTask */
  /* Infinite loop */
  for(;;)
  {
	  if (hits % 2 == 1)
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <StartHumidityTask+0xc0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	bfb8      	it	lt
 80012d8:	425b      	neglt	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d1f6      	bne.n	80012cc <StartHumidityTask+0x8>
	  	  {
			  humidity_value = BSP_HSENSOR_ReadHumidity();
 80012de:	f000 fe5d 	bl	8001f9c <BSP_HSENSOR_ReadHumidity>
 80012e2:	eef0 7a40 	vmov.f32	s15, s0
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <StartHumidityTask+0xc4>)
 80012e8:	edc3 7a00 	vstr	s15, [r3]
			  int humInt1_1 = humidity_value;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <StartHumidityTask+0xc4>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 3a90 	vmov	r3, s15
 80012fa:	617b      	str	r3, [r7, #20]
			  float humFrac = humidity_value - humInt1_1;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <StartHumidityTask+0xc4>)
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001310:	edc7 7a04 	vstr	s15, [r7, #16]
			  int humInt2_2 = trunc(humFrac * 100);
 8001314:	edd7 7a04 	vldr	s15, [r7, #16]
 8001318:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800138c <StartHumidityTask+0xc8>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	ee17 0a90 	vmov	r0, s15
 8001324:	f7ff f908 	bl	8000538 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	ec43 2b10 	vmov	d0, r2, r3
 8001330:	f008 feca 	bl	800a0c8 <trunc>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff f954 	bl	80005e8 <__aeabi_d2iz>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]

			  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <StartHumidityTask+0xcc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	4618      	mov	r0, r3
 800134e:	f005 fea3 	bl	8007098 <osSemaphoreWait>
			  //uint8_t msg[] = "Acquired Semaphore in Pressure Task !!!\r\n"; // Data to send
			  //HAL_UART_Transmit(&huart1, msg, sizeof(msg), 10); // Sending in normal mode
			  snprintf(str_hum,100,"Humidity = %d.%02d\n\r", humInt1_1, humInt2_2);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <StartHumidityTask+0xd0>)
 800135a:	2164      	movs	r1, #100	; 0x64
 800135c:	480e      	ldr	r0, [pc, #56]	; (8001398 <StartHumidityTask+0xd4>)
 800135e:	f008 fae5 	bl	800992c <sniprintf>
			  HAL_UART_Transmit(&huart1,( uint8_t * )str_hum, sizeof(str_hum),1000);
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	2264      	movs	r2, #100	; 0x64
 8001368:	490b      	ldr	r1, [pc, #44]	; (8001398 <StartHumidityTask+0xd4>)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <StartHumidityTask+0xd8>)
 800136c:	f004 fe20 	bl	8005fb0 <HAL_UART_Transmit>
			  osSemaphoreRelease(myBinarySem01Handle);
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <StartHumidityTask+0xcc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fedd 	bl	8007134 <osSemaphoreRelease>
			  osDelay(1000);
 800137a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137e:	f005 fe44 	bl	800700a <osDelay>
	  if (hits % 2 == 1)
 8001382:	e7a3      	b.n	80012cc <StartHumidityTask+0x8>
 8001384:	20000ac4 	.word	0x20000ac4
 8001388:	20000b98 	.word	0x20000b98
 800138c:	42c80000 	.word	0x42c80000
 8001390:	20000ac0 	.word	0x20000ac0
 8001394:	0800a220 	.word	0x0800a220
 8001398:	20000b9c 	.word	0x20000b9c
 800139c:	2000049c 	.word	0x2000049c

080013a0 <StartAccelerometerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerometerTask */
void StartAccelerometerTask(void const * argument)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerometerTask */
  /* Infinite loop */
  for(;;)
  {
	  if (hits % 2 == 1)
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <StartAccelerometerTask+0xa8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	bfb8      	it	lt
 80013b4:	425b      	neglt	r3, r3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1f6      	bne.n	80013a8 <StartAccelerometerTask+0x8>
	  	  	  {
	  			  BSP_ACCELERO_AccGetXYZ(accel_values);
 80013ba:	4824      	ldr	r0, [pc, #144]	; (800144c <StartAccelerometerTask+0xac>)
 80013bc:	f000 fdb6 	bl	8001f2c <BSP_ACCELERO_AccGetXYZ>
	  			  int accInt1_1 = accel_values[0];
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <StartAccelerometerTask+0xac>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	617b      	str	r3, [r7, #20]
	  			  int accInt1_2 = accel_values[1];
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <StartAccelerometerTask+0xac>)
 80013ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ce:	613b      	str	r3, [r7, #16]
	  			  int accInt1_3 = accel_values[2];
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <StartAccelerometerTask+0xac>)
 80013d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]

	  			  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <StartAccelerometerTask+0xb0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fe59 	bl	8007098 <osSemaphoreWait>
	  			  //uint8_t msg[] = "Acquired Semaphore in Pressure Task !!!\r\n"; // Data to send
	  			  //HAL_UART_Transmit(&huart1, msg, sizeof(msg), 10); // Sending in normal mode
	  			  snprintf(str_acc_1,100,"Acceleration in x = %d\n\r", accInt1_1);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <StartAccelerometerTask+0xb4>)
 80013ea:	2164      	movs	r1, #100	; 0x64
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <StartAccelerometerTask+0xb8>)
 80013ee:	f008 fa9d 	bl	800992c <sniprintf>
	  			  HAL_UART_Transmit(&huart1,( uint8_t * )str_acc_1, sizeof(str_acc_1),1000);
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	2264      	movs	r2, #100	; 0x64
 80013f8:	4917      	ldr	r1, [pc, #92]	; (8001458 <StartAccelerometerTask+0xb8>)
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <StartAccelerometerTask+0xbc>)
 80013fc:	f004 fdd8 	bl	8005fb0 <HAL_UART_Transmit>

	  			  snprintf(str_acc_2,100,"Acceleration in y = %d\n\r", accInt1_2);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <StartAccelerometerTask+0xc0>)
 8001404:	2164      	movs	r1, #100	; 0x64
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <StartAccelerometerTask+0xc4>)
 8001408:	f008 fa90 	bl	800992c <sniprintf>
	  			  HAL_UART_Transmit(&huart1,( uint8_t * )str_acc_2, sizeof(str_acc_2),1000);
 800140c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001410:	2264      	movs	r2, #100	; 0x64
 8001412:	4914      	ldr	r1, [pc, #80]	; (8001464 <StartAccelerometerTask+0xc4>)
 8001414:	4811      	ldr	r0, [pc, #68]	; (800145c <StartAccelerometerTask+0xbc>)
 8001416:	f004 fdcb 	bl	8005fb0 <HAL_UART_Transmit>

	  			  snprintf(str_acc_3,100,"Acceleration in z = %d\n\r", accInt1_3);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <StartAccelerometerTask+0xc8>)
 800141e:	2164      	movs	r1, #100	; 0x64
 8001420:	4812      	ldr	r0, [pc, #72]	; (800146c <StartAccelerometerTask+0xcc>)
 8001422:	f008 fa83 	bl	800992c <sniprintf>
	  			  HAL_UART_Transmit(&huart1,( uint8_t * )str_acc_3, sizeof(str_acc_3),1000);
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	2264      	movs	r2, #100	; 0x64
 800142c:	490f      	ldr	r1, [pc, #60]	; (800146c <StartAccelerometerTask+0xcc>)
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <StartAccelerometerTask+0xbc>)
 8001430:	f004 fdbe 	bl	8005fb0 <HAL_UART_Transmit>

	  			  osSemaphoreRelease(myBinarySem01Handle);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <StartAccelerometerTask+0xb0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fe7b 	bl	8007134 <osSemaphoreRelease>
	  			  osDelay(1000);
 800143e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001442:	f005 fde2 	bl	800700a <osDelay>
	  if (hits % 2 == 1)
 8001446:	e7af      	b.n	80013a8 <StartAccelerometerTask+0x8>
 8001448:	20000ac4 	.word	0x20000ac4
 800144c:	20000c00 	.word	0x20000c00
 8001450:	20000ac0 	.word	0x20000ac0
 8001454:	0800a238 	.word	0x0800a238
 8001458:	20000c08 	.word	0x20000c08
 800145c:	2000049c 	.word	0x2000049c
 8001460:	0800a254 	.word	0x0800a254
 8001464:	20000c6c 	.word	0x20000c6c
 8001468:	0800a270 	.word	0x0800a270
 800146c:	20000cd0 	.word	0x20000cd0

08001470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001482:	f001 f97f 	bl	8002784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40012c00 	.word	0x40012c00

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_MspInit+0x4c>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <HAL_MspInit+0x4c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6613      	str	r3, [r2, #96]	; 0x60
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_MspInit+0x4c>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_MspInit+0x4c>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_MspInit+0x4c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_MspInit+0x4c>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	210f      	movs	r1, #15
 80014da:	f06f 0001 	mvn.w	r0, #1
 80014de:	f001 fa4d 	bl	800297c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ac      	sub	sp, #176	; 0xb0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2288      	movs	r2, #136	; 0x88
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f008 f8f5 	bl	8009700 <memset>
  if(hi2c->Instance==I2C2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_I2C_MspInit+0xb0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13b      	bne.n	8001598 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fcb1 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001538:	f7ff ffac 	bl	8001494 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_I2C_MspInit+0xb4>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_I2C_MspInit+0xb4>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_I2C_MspInit+0xb4>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155c:	2312      	movs	r3, #18
 800155e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800156e:	2304      	movs	r3, #4
 8001570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	4619      	mov	r1, r3
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <HAL_I2C_MspInit+0xb8>)
 800157c:	f001 fad8 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_I2C_MspInit+0xb4>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_I2C_MspInit+0xb4>)
 8001586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800158a:	6593      	str	r3, [r2, #88]	; 0x58
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_I2C_MspInit+0xb4>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	37b0      	adds	r7, #176	; 0xb0
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40005800 	.word	0x40005800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400

080015ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_I2C_MspDeInit+0x3c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d10f      	bne.n	80015de <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_I2C_MspDeInit+0x40>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_I2C_MspDeInit+0x40>)
 80015c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015c8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <HAL_I2C_MspDeInit+0x44>)
 80015d0:	f001 fc58 	bl	8002e84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_I2C_MspDeInit+0x44>)
 80015da:	f001 fc53 	bl	8002e84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40005800 	.word	0x40005800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400

080015f4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_QSPI_MspInit+0x7c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d128      	bne.n	8001668 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_QSPI_MspInit+0x80>)
 8001618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_QSPI_MspInit+0x80>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6513      	str	r3, [r2, #80]	; 0x50
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_QSPI_MspInit+0x80>)
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_QSPI_MspInit+0x80>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <HAL_QSPI_MspInit+0x80>)
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_QSPI_MspInit+0x80>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001646:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800164a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001658:	230a      	movs	r3, #10
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_QSPI_MspInit+0x84>)
 8001664:	f001 fa64 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	a0001000 	.word	0xa0001000
 8001674:	40021000 	.word	0x40021000
 8001678:	48001000 	.word	0x48001000

0800167c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_SPI_MspInit+0x7c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d128      	bne.n	80016f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0x80>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	4a16      	ldr	r2, [pc, #88]	; (80016fc <HAL_SPI_MspInit+0x80>)
 80016a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_SPI_MspInit+0x80>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_SPI_MspInit+0x80>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_SPI_MspInit+0x80>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_SPI_MspInit+0x80>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80016ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e0:	2306      	movs	r3, #6
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_SPI_MspInit+0x84>)
 80016ec:	f001 fa20 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40003c00 	.word	0x40003c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000800 	.word	0x48000800

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0ae      	sub	sp, #184	; 0xb8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2288      	movs	r2, #136	; 0x88
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f007 ffeb 	bl	8009700 <memset>
  if(huart->Instance==USART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a42      	ldr	r2, [pc, #264]	; (8001838 <HAL_UART_MspInit+0x134>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d13b      	bne.n	80017ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001738:	2300      	movs	r3, #0
 800173a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fba7 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800174c:	f7ff fea2 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_UART_MspInit+0x138>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	4a39      	ldr	r2, [pc, #228]	; (800183c <HAL_UART_MspInit+0x138>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	6613      	str	r3, [r2, #96]	; 0x60
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_UART_MspInit+0x138>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_UART_MspInit+0x138>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	4a33      	ldr	r2, [pc, #204]	; (800183c <HAL_UART_MspInit+0x138>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_UART_MspInit+0x138>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001780:	23c0      	movs	r3, #192	; 0xc0
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001798:	2307      	movs	r3, #7
 800179a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4826      	ldr	r0, [pc, #152]	; (8001840 <HAL_UART_MspInit+0x13c>)
 80017a6:	f001 f9c3 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017aa:	e040      	b.n	800182e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a24      	ldr	r2, [pc, #144]	; (8001844 <HAL_UART_MspInit+0x140>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d13b      	bne.n	800182e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fb66 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80017ce:	f7ff fe61 	bl	8001494 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_UART_MspInit+0x138>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_UART_MspInit+0x138>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_UART_MspInit+0x138>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_UART_MspInit+0x138>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_UART_MspInit+0x138>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_MspInit+0x138>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800181c:	2307      	movs	r3, #7
 800181e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001822:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001826:	4619      	mov	r1, r3
 8001828:	4807      	ldr	r0, [pc, #28]	; (8001848 <HAL_UART_MspInit+0x144>)
 800182a:	f001 f981 	bl	8002b30 <HAL_GPIO_Init>
}
 800182e:	bf00      	nop
 8001830:	37b8      	adds	r7, #184	; 0xb8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40013800 	.word	0x40013800
 800183c:	40021000 	.word	0x40021000
 8001840:	48000400 	.word	0x48000400
 8001844:	40004800 	.word	0x40004800
 8001848:	48000c00 	.word	0x48000c00

0800184c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0ac      	sub	sp, #176	; 0xb0
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2288      	movs	r2, #136	; 0x88
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f007 ff47 	bl	8009700 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187a:	d17c      	bne.n	8001976 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001882:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001892:	2318      	movs	r3, #24
 8001894:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001896:	2307      	movs	r3, #7
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800189a:	2302      	movs	r3, #2
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80018a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 faf1 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80018b8:	f7ff fdec 	bl	8001494 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_PCD_MspInit+0x134>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <HAL_PCD_MspInit+0x134>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_PCD_MspInit+0x134>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f001 f91d 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80018f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001910:	230a      	movs	r3, #10
 8001912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f001 f906 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_PCD_MspInit+0x134>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <HAL_PCD_MspInit+0x134>)
 800192a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800192e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_PCD_MspInit+0x134>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_PCD_MspInit+0x134>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d114      	bne.n	8001972 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_PCD_MspInit+0x134>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_PCD_MspInit+0x134>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_PCD_MspInit+0x134>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001960:	f002 fb9a 	bl	8004098 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_PCD_MspInit+0x134>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PCD_MspInit+0x134>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001970:	e001      	b.n	8001976 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001972:	f002 fb91 	bl	8004098 <HAL_PWREx_EnableVddUSB>
}
 8001976:	bf00      	nop
 8001978:	37b0      	adds	r7, #176	; 0xb0
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	; 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_InitTick+0xc8>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <HAL_InitTick+0xc8>)
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_InitTick+0xc8>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019aa:	f107 020c 	add.w	r2, r7, #12
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 f9db 	bl	8004d70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019ba:	f003 f9c3 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 80019be:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <HAL_InitTick+0xcc>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9b      	lsrs	r3, r3, #18
 80019ca:	3b01      	subs	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_InitTick+0xd0>)
 80019d0:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_InitTick+0xd4>)
 80019d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_InitTick+0xd0>)
 80019d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019da:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_InitTick+0xd0>)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_InitTick+0xd0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_InitTick+0xd0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_InitTick+0xd0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <HAL_InitTick+0xd0>)
 80019f6:	f003 ffbc 	bl	8005972 <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11b      	bne.n	8001a40 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a08:	4812      	ldr	r0, [pc, #72]	; (8001a54 <HAL_InitTick+0xd0>)
 8001a0a:	f004 f813 	bl	8005a34 <HAL_TIM_Base_Start_IT>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d111      	bne.n	8001a40 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a1c:	2019      	movs	r0, #25
 8001a1e:	f000 ffc9 	bl	80029b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d808      	bhi.n	8001a3a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	2019      	movs	r0, #25
 8001a2e:	f000 ffa5 	bl	800297c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_InitTick+0xd8>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e002      	b.n	8001a40 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	20000d34 	.word	0x20000d34
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	20000060 	.word	0x20000060

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a90:	2020      	movs	r0, #32
 8001a92:	f001 fb03 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001a96:	2040      	movs	r0, #64	; 0x40
 8001a98:	f001 fb00 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001a9c:	2080      	movs	r0, #128	; 0x80
 8001a9e:	f001 fafd 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001aa2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001aa6:	f001 faf9 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ab6:	f004 f82d 	bl	8005b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000d34 	.word	0x20000d34

08001ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001ac8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001acc:	f001 fae6 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001ad0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ad4:	f001 fae2 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Button_Pin);
 8001ad8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001adc:	f001 fade 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ae0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ae4:	f001 fada 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ae8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001aec:	f001 fad6 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
	// BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	if (GPIO_Pin == B1_Button_Pin)
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b04:	d109      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0x26>
	{
		osSemaphoreRelease(myBinarySem01Handle);
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 fb12 	bl	8007134 <osSemaphoreRelease>
		hits += 1;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x34>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x34>)
 8001b18:	6013      	str	r3, [r2, #0]
		//osMessageGet(myQueue01Handle, osWaitForever);
		// xSemaphoreGiveFromISR(binSem, &xHigherPriorityTaskWoken);
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000ac0 	.word	0x20000ac0
 8001b28:	20000ac4 	.word	0x20000ac4

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f007 fd96 	bl	800968c <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20018000 	.word	0x20018000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20000d80 	.word	0x20000d80
 8001b94:	20002768 	.word	0x20002768

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f007 fd55 	bl	8009698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7fe febf 	bl	8000970 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001c00:	0800a380 	.word	0x0800a380
  ldr r2, =_sbss
 8001c04:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001c08:	20002768 	.word	0x20002768

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001c30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c36:	2312      	movs	r3, #18
 8001c38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001c42:	2304      	movs	r3, #4
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481b      	ldr	r0, [pc, #108]	; (8001cbc <I2Cx_MspInit+0xac>)
 8001c4e:	f000 ff6f 	bl	8002b30 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4818      	ldr	r0, [pc, #96]	; (8001cbc <I2Cx_MspInit+0xac>)
 8001c5a:	f000 ff69 	bl	8002b30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c80:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	210f      	movs	r1, #15
 8001c92:	2021      	movs	r0, #33	; 0x21
 8001c94:	f000 fe72 	bl	800297c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c98:	2021      	movs	r0, #33	; 0x21
 8001c9a:	f000 fe8b 	bl	80029b4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	2022      	movs	r0, #34	; 0x22
 8001ca4:	f000 fe6a 	bl	800297c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001ca8:	2022      	movs	r0, #34	; 0x22
 8001caa:	f000 fe83 	bl	80029b4 <HAL_NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <I2Cx_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <I2Cx_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff89 	bl	8001c10 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 f9e4 	bl	80030cc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001d04:	2100      	movs	r1, #0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f001 ff72 	bl	8003bf0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40005800 	.word	0x40005800
 8001d18:	00702681 	.word	0x00702681

08001d1c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	72fb      	strb	r3, [r7, #11]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	813b      	strh	r3, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	88f8      	ldrh	r0, [r7, #6]
 8001d40:	893a      	ldrh	r2, [r7, #8]
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4603      	mov	r3, r0
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f001 fb8c 	bl	8003470 <HAL_I2C_Mem_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	4619      	mov	r1, r3
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f832 	bl	8001dd0 <I2Cx_Error>
  }
  return status;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b08a      	sub	sp, #40	; 0x28
 8001d7a:	af04      	add	r7, sp, #16
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	72fb      	strb	r3, [r7, #11]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	813b      	strh	r3, [r7, #8]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	b299      	uxth	r1, r3
 8001d98:	88f8      	ldrh	r0, [r7, #6]
 8001d9a:	893a      	ldrh	r2, [r7, #8]
 8001d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4603      	mov	r3, r0
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f001 fa4b 	bl	8003248 <HAL_I2C_Mem_Write>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f805 	bl	8001dd0 <I2Cx_Error>
  }
  return status;
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f001 fa04 	bl	80031ea <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff6c 	bl	8001cc0 <I2Cx_Init>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <SENSOR_IO_Init+0x10>)
 8001df6:	f7ff ff63 	bl	8001cc0 <I2Cx_Init>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000d84 	.word	0x20000d84

08001e04 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	71bb      	strb	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	79f9      	ldrb	r1, [r7, #7]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	1d7b      	adds	r3, r7, #5
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2301      	movs	r3, #1
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <SENSOR_IO_Write+0x30>)
 8001e28:	f7ff ffa5 	bl	8001d76 <I2Cx_WriteMultiple>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000d84 	.word	0x20000d84

08001e38 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	79f9      	ldrb	r1, [r7, #7]
 8001e52:	2301      	movs	r3, #1
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	f107 030f 	add.w	r3, r7, #15
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <SENSOR_IO_Read+0x38>)
 8001e60:	f7ff ff5c 	bl	8001d1c <I2Cx_ReadMultiple>

  return read_value;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000d84 	.word	0x20000d84

08001e74 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	603a      	str	r2, [r7, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	460b      	mov	r3, r1
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	79f9      	ldrb	r1, [r7, #7]
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <SENSOR_IO_ReadMultiple+0x38>)
 8001e9c:	f7ff ff3e 	bl	8001d1c <I2Cx_ReadMultiple>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b29b      	uxth	r3, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000d84 	.word	0x20000d84

08001eb0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <BSP_ACCELERO_Init+0x74>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4798      	blx	r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b6a      	cmp	r3, #106	; 0x6a
 8001ec8:	d002      	beq.n	8001ed0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	e024      	b.n	8001f1a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <BSP_ACCELERO_Init+0x78>)
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <BSP_ACCELERO_Init+0x74>)
 8001ed4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001ed6:	2330      	movs	r3, #48	; 0x30
 8001ed8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001eee:	797a      	ldrb	r2, [r7, #5]
 8001ef0:	7abb      	ldrb	r3, [r7, #10]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001ef8:	7a3b      	ldrb	r3, [r7, #8]
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <BSP_ACCELERO_Init+0x78>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	89ba      	ldrh	r2, [r7, #12]
 8001f16:	4610      	mov	r0, r2
 8001f18:	4798      	blx	r3
  }  

  return ret;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2000002c 	.word	0x2000002c
 8001f28:	20000dd8 	.word	0x20000dd8

08001f2c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000dd8 	.word	0x20000dd8

08001f5c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <BSP_HSENSOR_Init+0x38>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	20be      	movs	r0, #190	; 0xbe
 8001f68:	4798      	blx	r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2bbc      	cmp	r3, #188	; 0xbc
 8001f6e:	d002      	beq.n	8001f76 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	e009      	b.n	8001f8a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <BSP_HSENSOR_Init+0x3c>)
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <BSP_HSENSOR_Init+0x38>)
 8001f7a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <BSP_HSENSOR_Init+0x3c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	20be      	movs	r0, #190	; 0xbe
 8001f84:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001f8a:	687b      	ldr	r3, [r7, #4]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000004 	.word	0x20000004
 8001f98:	20000ddc 	.word	0x20000ddc

08001f9c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	20be      	movs	r0, #190	; 0xbe
 8001fa8:	4798      	blx	r3
 8001faa:	eef0 7a40 	vmov.f32	s15, s0
}
 8001fae:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000ddc 	.word	0x20000ddc

08001fb8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <BSP_PSENSOR_Init+0x38>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	20ba      	movs	r0, #186	; 0xba
 8001fc4:	4798      	blx	r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2bb1      	cmp	r3, #177	; 0xb1
 8001fca:	d002      	beq.n	8001fd2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	e009      	b.n	8001fe6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <BSP_PSENSOR_Init+0x3c>)
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <BSP_PSENSOR_Init+0x38>)
 8001fd6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <BSP_PSENSOR_Init+0x3c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	20ba      	movs	r0, #186	; 0xba
 8001fe0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000020 	.word	0x20000020
 8001ff4:	20000de0 	.word	0x20000de0

08001ff8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <BSP_PSENSOR_ReadPressure+0x18>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	20ba      	movs	r0, #186	; 0xba
 8002004:	4798      	blx	r3
 8002006:	eef0 7a40 	vmov.f32	s15, s0
}
 800200a:	eeb0 0a67 	vmov.f32	s0, s15
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000de0 	.word	0x20000de0

08002014 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <BSP_TSENSOR_Init+0x30>)
 8002020:	4a09      	ldr	r2, [pc, #36]	; (8002048 <BSP_TSENSOR_Init+0x34>)
 8002022:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002024:	f7ff fee4 	bl	8001df0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <BSP_TSENSOR_Init+0x30>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2100      	movs	r1, #0
 8002030:	20be      	movs	r0, #190	; 0xbe
 8002032:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002038:	79fb      	ldrb	r3, [r7, #7]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000de4 	.word	0x20000de4
 8002048:	20000010 	.word	0x20000010

0800204c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <BSP_TSENSOR_ReadTemp+0x18>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	20be      	movs	r0, #190	; 0xbe
 8002058:	4798      	blx	r3
 800205a:	eef0 7a40 	vmov.f32	s15, s0
}
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000de4 	.word	0x20000de4

08002068 <DMA1_Channel4_IRQHandler>:
/**
  * @brief This function handles DFSDM Left DMA interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_DFSDM_DMAx_MIC1_IRQHandler(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[0].hdmaReg);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <DMA1_Channel4_IRQHandler+0x14>)
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fcad 	bl	80029d0 <HAL_DMA_IRQHandler>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000de8 	.word	0x20000de8

08002080 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2120      	movs	r1, #32
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fed1 	bl	8001e38 <SENSOR_IO_Read>
 8002096:	4603      	mov	r3, r0
 8002098:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	f023 0303 	bic.w	r3, r3, #3
 80020b0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020c0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	2120      	movs	r1, #32
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fe9a 	bl	8001e04 <SENSOR_IO_Write>
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80020e6:	f7ff fe83 	bl	8001df0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	210f      	movs	r1, #15
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fea1 	bl	8001e38 <SENSOR_IO_Read>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	b2d8      	uxtb	r0, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2302      	movs	r3, #2
 8002118:	21b0      	movs	r1, #176	; 0xb0
 800211a:	f7ff feab 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800211e:	7b3b      	ldrb	r3, [r7, #12]
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002126:	7b7b      	ldrb	r3, [r7, #13]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	b2d8      	uxtb	r0, r3
 8002132:	f107 020c 	add.w	r2, r7, #12
 8002136:	2302      	movs	r3, #2
 8002138:	21b6      	movs	r1, #182	; 0xb6
 800213a:	f7ff fe9b 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800213e:	7b7b      	ldrb	r3, [r7, #13]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b21a      	sxth	r2, r3
 8002144:	7b3b      	ldrb	r3, [r7, #12]
 8002146:	b21b      	sxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	f107 020c 	add.w	r2, r7, #12
 8002154:	2302      	movs	r3, #2
 8002156:	21ba      	movs	r1, #186	; 0xba
 8002158:	f7ff fe8c 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800215c:	7b7b      	ldrb	r3, [r7, #13]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2d8      	uxtb	r0, r3
 800216e:	f107 020c 	add.w	r2, r7, #12
 8002172:	2302      	movs	r3, #2
 8002174:	21a8      	movs	r1, #168	; 0xa8
 8002176:	f7ff fe7d 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800217a:	7b7b      	ldrb	r3, [r7, #13]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800218c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800219a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800219e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80021b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80021da:	edd7 7a04 	vldr	s15, [r7, #16]
 80021de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80021ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002234 <HTS221_H_ReadHumidity+0x130>
 80021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	dd01      	ble.n	8002200 <HTS221_H_ReadHumidity+0xfc>
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HTS221_H_ReadHumidity+0x134>)
 80021fe:	e00a      	b.n	8002216 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002200:	edd7 7a04 	vldr	s15, [r7, #16]
 8002204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d502      	bpl.n	8002214 <HTS221_H_ReadHumidity+0x110>
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e000      	b.n	8002216 <HTS221_H_ReadHumidity+0x112>
 8002214:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002216:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002218:	edd7 7a04 	vldr	s15, [r7, #16]
 800221c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002220:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002224:	eef0 7a66 	vmov.f32	s15, s13
}
 8002228:	eeb0 0a67 	vmov.f32	s0, s15
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	447a0000 	.word	0x447a0000
 8002238:	447a0000 	.word	0x447a0000

0800223c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2120      	movs	r1, #32
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fdf2 	bl	8001e38 <SENSOR_IO_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800227e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	2120      	movs	r1, #32
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fdbb 	bl	8001e04 <SENSOR_IO_Write>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b088      	sub	sp, #32
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	b2d8      	uxtb	r0, r3
 80022a4:	f107 0208 	add.w	r2, r7, #8
 80022a8:	2302      	movs	r3, #2
 80022aa:	21b2      	movs	r1, #178	; 0xb2
 80022ac:	f7ff fde2 	bl	8001e74 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2135      	movs	r1, #53	; 0x35
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fdbe 	bl	8001e38 <SENSOR_IO_Read>
 80022bc:	4603      	mov	r3, r0
 80022be:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	7a3b      	ldrb	r3, [r7, #8]
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80022d4:	7ffb      	ldrb	r3, [r7, #31]
 80022d6:	019b      	lsls	r3, r3, #6
 80022d8:	b21b      	sxth	r3, r3
 80022da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022de:	b21a      	sxth	r2, r3
 80022e0:	7a7b      	ldrb	r3, [r7, #9]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80022e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022ec:	10db      	asrs	r3, r3, #3
 80022ee:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80022f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80022f4:	10db      	asrs	r3, r3, #3
 80022f6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	b2d8      	uxtb	r0, r3
 80022fc:	f107 0208 	add.w	r2, r7, #8
 8002300:	2304      	movs	r3, #4
 8002302:	21bc      	movs	r1, #188	; 0xbc
 8002304:	f7ff fdb6 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002308:	7a7b      	ldrb	r3, [r7, #9]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b21a      	sxth	r2, r3
 800230e:	7a3b      	ldrb	r3, [r7, #8]
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21a      	sxth	r2, r3
 800231c:	7abb      	ldrb	r3, [r7, #10]
 800231e:	b21b      	sxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	b2d8      	uxtb	r0, r3
 8002328:	f107 0208 	add.w	r2, r7, #8
 800232c:	2302      	movs	r3, #2
 800232e:	21aa      	movs	r1, #170	; 0xaa
 8002330:	f7ff fda0 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002334:	7a7b      	ldrb	r3, [r7, #9]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	7a3b      	ldrb	r3, [r7, #8]
 800233c:	b21b      	sxth	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002342:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002346:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002354:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002358:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002366:	ee67 6a27 	vmul.f32	s13, s14, s15
 800236a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800236e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002380:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	ee07 3a90 	vmov	s15, r3
}
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f879 	bl	80024a8 <LPS22HB_Init>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80023cc:	f7ff fd10 	bl	8001df0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	210f      	movs	r1, #15
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fd2e 	bl	8001e38 <SENSOR_IO_Read>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	74fb      	strb	r3, [r7, #19]
 80023fe:	e013      	b.n	8002428 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	3328      	adds	r3, #40	; 0x28
 8002408:	b2db      	uxtb	r3, r3
 800240a:	7cfc      	ldrb	r4, [r7, #19]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7ff fd12 	bl	8001e38 <SENSOR_IO_Read>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	f104 0318 	add.w	r3, r4, #24
 800241c:	443b      	add	r3, r7
 800241e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	3301      	adds	r3, #1
 8002426:	74fb      	strb	r3, [r7, #19]
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d9e8      	bls.n	8002400 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800242e:	2300      	movs	r3, #0
 8002430:	74fb      	strb	r3, [r7, #19]
 8002432:	e00f      	b.n	8002454 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	3318      	adds	r3, #24
 8002438:	443b      	add	r3, r7
 800243a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800243e:	461a      	mov	r2, r3
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	3301      	adds	r3, #1
 8002452:	74fb      	strb	r3, [r7, #19]
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d9ec      	bls.n	8002434 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800246a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2264      	movs	r2, #100	; 0x64
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	da01      	bge.n	8002480 <LPS22HB_P_ReadPressure+0x94>
 800247c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002480:	131b      	asrs	r3, r3, #12
 8002482:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80024a4 <LPS22HB_P_ReadPressure+0xb8>
 8002492:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002496:	eef0 7a66 	vmov.f32	s15, s13
}
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}
 80024a4:	42c80000 	.word	0x42c80000

080024a8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	211a      	movs	r1, #26
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fcbd 	bl	8001e38 <SENSOR_IO_Read>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	211a      	movs	r1, #26
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fc92 	bl	8001e04 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2110      	movs	r1, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fca6 	bl	8001e38 <SENSOR_IO_Read>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	2110      	movs	r1, #16
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fc73 	bl	8001e04 <SENSOR_IO_Write>
}  
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002534:	2110      	movs	r1, #16
 8002536:	20d4      	movs	r0, #212	; 0xd4
 8002538:	f7ff fc7e 	bl	8001e38 <SENSOR_IO_Read>
 800253c:	4603      	mov	r3, r0
 800253e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800254c:	7bba      	ldrb	r2, [r7, #14]
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	4313      	orrs	r3, r2
 8002552:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	461a      	mov	r2, r3
 8002558:	2110      	movs	r1, #16
 800255a:	20d4      	movs	r0, #212	; 0xd4
 800255c:	f7ff fc52 	bl	8001e04 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002560:	2112      	movs	r1, #18
 8002562:	20d4      	movs	r0, #212	; 0xd4
 8002564:	f7ff fc68 	bl	8001e38 <SENSOR_IO_Read>
 8002568:	4603      	mov	r3, r0
 800256a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b29b      	uxth	r3, r3
 8002572:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800257a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800257c:	7bba      	ldrb	r2, [r7, #14]
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	4313      	orrs	r3, r2
 8002582:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	461a      	mov	r2, r3
 8002588:	2112      	movs	r1, #18
 800258a:	20d4      	movs	r0, #212	; 0xd4
 800258c:	f7ff fc3a 	bl	8001e04 <SENSOR_IO_Write>
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800259e:	2300      	movs	r3, #0
 80025a0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80025a2:	2110      	movs	r1, #16
 80025a4:	20d4      	movs	r0, #212	; 0xd4
 80025a6:	f7ff fc47 	bl	8001e38 <SENSOR_IO_Read>
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	461a      	mov	r2, r3
 80025ba:	2110      	movs	r1, #16
 80025bc:	20d4      	movs	r0, #212	; 0xd4
 80025be:	f7ff fc21 	bl	8001e04 <SENSOR_IO_Write>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80025ce:	f7ff fc0f 	bl	8001df0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80025d2:	210f      	movs	r1, #15
 80025d4:	20d4      	movs	r0, #212	; 0xd4
 80025d6:	f7ff fc2f 	bl	8001e38 <SENSOR_IO_Read>
 80025da:	4603      	mov	r3, r0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}

080025e0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80025ee:	2115      	movs	r1, #21
 80025f0:	20d4      	movs	r0, #212	; 0xd4
 80025f2:	f7ff fc21 	bl	8001e38 <SENSOR_IO_Read>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	f023 0310 	bic.w	r3, r3, #16
 8002600:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	461a      	mov	r2, r3
 8002614:	2115      	movs	r1, #21
 8002616:	20d4      	movs	r0, #212	; 0xd4
 8002618:	f7ff fbf4 	bl	8001e04 <SENSOR_IO_Write>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800263a:	2110      	movs	r1, #16
 800263c:	20d4      	movs	r0, #212	; 0xd4
 800263e:	f7ff fbfb 	bl	8001e38 <SENSOR_IO_Read>
 8002642:	4603      	mov	r3, r0
 8002644:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002646:	f107 0208 	add.w	r2, r7, #8
 800264a:	2306      	movs	r3, #6
 800264c:	2128      	movs	r1, #40	; 0x28
 800264e:	20d4      	movs	r0, #212	; 0xd4
 8002650:	f7ff fc10 	bl	8001e74 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]
 8002658:	e01c      	b.n	8002694 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	3301      	adds	r3, #1
 8002660:	3320      	adds	r3, #32
 8002662:	443b      	add	r3, r7
 8002664:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002668:	b29b      	uxth	r3, r3
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	b29a      	uxth	r2, r3
 800266e:	7ffb      	ldrb	r3, [r7, #31]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	3320      	adds	r3, #32
 8002674:	443b      	add	r3, r7
 8002676:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4413      	add	r3, r2
 800267e:	b29a      	uxth	r2, r3
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	b212      	sxth	r2, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	3320      	adds	r3, #32
 8002688:	443b      	add	r3, r7
 800268a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	3301      	adds	r3, #1
 8002692:	77fb      	strb	r3, [r7, #31]
 8002694:	7ffb      	ldrb	r3, [r7, #31]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d9df      	bls.n	800265a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d829      	bhi.n	80026f8 <LSM6DSL_AccReadXYZ+0xd4>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <LSM6DSL_AccReadXYZ+0x88>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026e1 	.word	0x080026e1
 80026b0:	080026f9 	.word	0x080026f9
 80026b4:	080026f9 	.word	0x080026f9
 80026b8:	080026f9 	.word	0x080026f9
 80026bc:	080026f3 	.word	0x080026f3
 80026c0:	080026f9 	.word	0x080026f9
 80026c4:	080026f9 	.word	0x080026f9
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	080026e7 	.word	0x080026e7
 80026d0:	080026f9 	.word	0x080026f9
 80026d4:	080026f9 	.word	0x080026f9
 80026d8:	080026f9 	.word	0x080026f9
 80026dc:	080026ed 	.word	0x080026ed
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <LSM6DSL_AccReadXYZ+0x120>)
 80026e2:	61bb      	str	r3, [r7, #24]
    break;
 80026e4:	e008      	b.n	80026f8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <LSM6DSL_AccReadXYZ+0x124>)
 80026e8:	61bb      	str	r3, [r7, #24]
    break;
 80026ea:	e005      	b.n	80026f8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <LSM6DSL_AccReadXYZ+0x128>)
 80026ee:	61bb      	str	r3, [r7, #24]
    break;
 80026f0:	e002      	b.n	80026f8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <LSM6DSL_AccReadXYZ+0x12c>)
 80026f4:	61bb      	str	r3, [r7, #24]
    break;    
 80026f6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e01a      	b.n	8002734 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	3320      	adds	r3, #32
 8002704:	443b      	add	r3, r7
 8002706:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002712:	edd7 7a06 	vldr	s15, [r7, #24]
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002726:	ee17 2a90 	vmov	r2, s15
 800272a:	b212      	sxth	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800272e:	7ffb      	ldrb	r3, [r7, #31]
 8002730:	3301      	adds	r3, #1
 8002732:	77fb      	strb	r3, [r7, #31]
 8002734:	7ffb      	ldrb	r3, [r7, #31]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d9e1      	bls.n	80026fe <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	3d79db23 	.word	0x3d79db23
 8002748:	3df9db23 	.word	0x3df9db23
 800274c:	3e79db23 	.word	0x3e79db23
 8002750:	3ef9db23 	.word	0x3ef9db23

08002754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275e:	2003      	movs	r0, #3
 8002760:	f000 f901 	bl	8002966 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002764:	200f      	movs	r0, #15
 8002766:	f7ff f90d 	bl	8001984 <HAL_InitTick>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	e001      	b.n	800277a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002776:	f7fe fe93 	bl	80014a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800277a:	79fb      	ldrb	r3, [r7, #7]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000064 	.word	0x20000064
 80027a8:	20000e90 	.word	0x20000e90

080027ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000e90 	.word	0x20000e90

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000064 	.word	0x20000064

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ff4c 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800298e:	f7ff ff61 	bl	8002854 <__NVIC_GetPriorityGrouping>
 8002992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f7ff ffb1 	bl	8002900 <NVIC_EncodePriority>
 800299e:	4602      	mov	r2, r0
 80029a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff80 	bl	80028ac <__NVIC_SetPriority>
}
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff54 	bl	8002870 <__NVIC_EnableIRQ>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f003 031c 	and.w	r3, r3, #28
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d026      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x7a>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d021      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 021c 	and.w	r2, r3, #28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2104      	movs	r1, #4
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d071      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	e06c      	b.n	8002b24 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 031c 	and.w	r3, r3, #28
 8002a52:	2202      	movs	r2, #2
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <HAL_DMA_IRQHandler+0xec>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d029      	beq.n	8002abc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020a 	bic.w	r2, r2, #10
 8002a84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f003 021c 	and.w	r2, r3, #28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d038      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002aba:	e033      	b.n	8002b24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 031c 	and.w	r3, r3, #28
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02a      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d025      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 020e 	bic.w	r2, r2, #14
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 021c 	and.w	r2, r3, #28
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
}
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3e:	e17f      	b.n	8002e40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8171 	beq.w	8002e3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x40>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d118      	bne.n	8002c10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d017      	beq.n	8002c4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	6939      	ldr	r1, [r7, #16]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ac 	beq.w	8002e3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6613      	str	r3, [r2, #96]	; 0x60
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x242>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x338>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x23e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x33c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x23a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x340>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x236>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x344>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x232>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x348>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x22e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x34c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x22a>
 8002d56:	2306      	movs	r3, #6
 8002d58:	e00c      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d5e:	2305      	movs	r3, #5
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d72:	2300      	movs	r3, #0
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db6:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f ae78 	bne.w	8002b40 <HAL_GPIO_Init+0x10>
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	48000c00 	.word	0x48000c00
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48001400 	.word	0x48001400
 8002e7c:	48001800 	.word	0x48001800
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e92:	e0cd      	b.n	8003030 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e94:	2201      	movs	r2, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80c0 	beq.w	800302a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002eaa:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_GPIO_DeInit+0x1c8>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed2:	d025      	beq.n	8002f20 <HAL_GPIO_DeInit+0x9c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_GPIO_DeInit+0x1cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01f      	beq.n	8002f1c <HAL_GPIO_DeInit+0x98>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_GPIO_DeInit+0x1d0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d019      	beq.n	8002f18 <HAL_GPIO_DeInit+0x94>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a5c      	ldr	r2, [pc, #368]	; (8003058 <HAL_GPIO_DeInit+0x1d4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_GPIO_DeInit+0x90>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a5b      	ldr	r2, [pc, #364]	; (800305c <HAL_GPIO_DeInit+0x1d8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00d      	beq.n	8002f10 <HAL_GPIO_DeInit+0x8c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_GPIO_DeInit+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <HAL_GPIO_DeInit+0x88>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a59      	ldr	r2, [pc, #356]	; (8003064 <HAL_GPIO_DeInit+0x1e0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_GPIO_DeInit+0x84>
 8002f04:	2306      	movs	r3, #6
 8002f06:	e00c      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f08:	2307      	movs	r3, #7
 8002f0a:	e00a      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	e008      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e006      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f14:	2303      	movs	r3, #3
 8002f16:	e004      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f20:	2300      	movs	r3, #0
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	f002 0203 	and.w	r2, r2, #3
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	4093      	lsls	r3, r2
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d132      	bne.n	8002f98 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002f32:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	494b      	ldr	r1, [pc, #300]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4947      	ldr	r1, [pc, #284]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f4e:	4b46      	ldr	r3, [pc, #280]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4944      	ldr	r1, [pc, #272]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	4940      	ldr	r1, [pc, #256]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_GPIO_DeInit+0x1c8>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	4830      	ldr	r0, [pc, #192]	; (800304c <HAL_GPIO_DeInit+0x1c8>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	400a      	ands	r2, r1
 8002f92:	3302      	adds	r3, #2
 8002f94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	08d2      	lsrs	r2, r2, #3
 8002fcc:	4019      	ands	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3208      	adds	r2, #8
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2103      	movs	r1, #3
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2103      	movs	r1, #3
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	2101      	movs	r1, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	401a      	ands	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af2b 	bne.w	8002e94 <HAL_GPIO_DeInit+0x10>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	48000400 	.word	0x48000400
 8003054:	48000800 	.word	0x48000800
 8003058:	48000c00 	.word	0x48000c00
 800305c:	48001000 	.word	0x48001000
 8003060:	48001400 	.word	0x48001400
 8003064:	48001800 	.word	0x48001800
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003088:	e002      	b.n	8003090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fd1a 	bl	8001af4 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e081      	b.n	80031e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe f9fc 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800311c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e006      	b.n	8003154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d104      	bne.n	8003166 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69d9      	ldr	r1, [r3, #28]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e021      	b.n	8003240 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	; 0x24
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fe f9c9 	bl	80015ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	f040 80f9 	bne.w	8003462 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_I2C_Mem_Write+0x34>
 8003276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0ed      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_I2C_Mem_Write+0x4e>
 8003292:	2302      	movs	r3, #2
 8003294:	e0e6      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800329e:	f7ff fa85 	bl	80027ac <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2319      	movs	r3, #25
 80032aa:	2201      	movs	r2, #1
 80032ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fac3 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d1      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2221      	movs	r2, #33	; 0x21
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	; 0x40
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e8:	88f8      	ldrh	r0, [r7, #6]
 80032ea:	893a      	ldrh	r2, [r7, #8]
 80032ec:	8979      	ldrh	r1, [r7, #10]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4603      	mov	r3, r0
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f9d3 	bl	80036a4 <I2C_RequestMemoryWrite>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0a9      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2bff      	cmp	r3, #255	; 0xff
 8003318:	d90e      	bls.n	8003338 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	22ff      	movs	r2, #255	; 0xff
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	b2da      	uxtb	r2, r3
 8003326:	8979      	ldrh	r1, [r7, #10]
 8003328:	2300      	movs	r3, #0
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fc2b 	bl	8003b8c <I2C_TransferConfig>
 8003336:	e00f      	b.n	8003358 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	b2da      	uxtb	r2, r3
 8003348:	8979      	ldrh	r1, [r7, #10]
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fc1a 	bl	8003b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 faad 	bl	80038bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e07b      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d034      	beq.n	8003410 <HAL_I2C_Mem_Write+0x1c8>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d130      	bne.n	8003410 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fa3f 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e04d      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2bff      	cmp	r3, #255	; 0xff
 80033d0:	d90e      	bls.n	80033f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fbcf 	bl	8003b8c <I2C_TransferConfig>
 80033ee:	e00f      	b.n	8003410 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	8979      	ldrh	r1, [r7, #10]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fbbe 	bl	8003b8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d19e      	bne.n	8003358 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fa8c 	bl	800393c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e01a      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_I2C_Mem_Write+0x224>)
 8003442:	400b      	ands	r3, r1
 8003444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	fe00e800 	.word	0xfe00e800

08003470 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	461a      	mov	r2, r3
 800347e:	4603      	mov	r3, r0
 8003480:	817b      	strh	r3, [r7, #10]
 8003482:	460b      	mov	r3, r1
 8003484:	813b      	strh	r3, [r7, #8]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b20      	cmp	r3, #32
 8003494:	f040 80fd 	bne.w	8003692 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_I2C_Mem_Read+0x34>
 800349e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0f1      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Mem_Read+0x4e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0ea      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034c6:	f7ff f971 	bl	80027ac <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2319      	movs	r3, #25
 80034d2:	2201      	movs	r2, #1
 80034d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f9af 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0d5      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2222      	movs	r2, #34	; 0x22
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a3a      	ldr	r2, [r7, #32]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003510:	88f8      	ldrh	r0, [r7, #6]
 8003512:	893a      	ldrh	r2, [r7, #8]
 8003514:	8979      	ldrh	r1, [r7, #10]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4603      	mov	r3, r0
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f913 	bl	800374c <I2C_RequestMemoryRead>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0ad      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2bff      	cmp	r3, #255	; 0xff
 8003540:	d90e      	bls.n	8003560 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	b2da      	uxtb	r2, r3
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_I2C_Mem_Read+0x22c>)
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fb17 	bl	8003b8c <I2C_TransferConfig>
 800355e:	e00f      	b.n	8003580 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	b2da      	uxtb	r2, r3
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_I2C_Mem_Read+0x22c>)
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fb06 	bl	8003b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	2200      	movs	r2, #0
 8003588:	2104      	movs	r1, #4
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f956 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07c      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d034      	beq.n	8003640 <HAL_I2C_Mem_Read+0x1d0>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d130      	bne.n	8003640 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f927 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e04d      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2bff      	cmp	r3, #255	; 0xff
 8003600:	d90e      	bls.n	8003620 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	b2da      	uxtb	r2, r3
 800360e:	8979      	ldrh	r1, [r7, #10]
 8003610:	2300      	movs	r3, #0
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fab7 	bl	8003b8c <I2C_TransferConfig>
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	b2da      	uxtb	r2, r3
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	2300      	movs	r3, #0
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 faa6 	bl	8003b8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d19a      	bne.n	8003580 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f974 	bl	800393c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e01a      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_I2C_Mem_Read+0x230>)
 8003672:	400b      	ands	r3, r1
 8003674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	80002400 	.word	0x80002400
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	8979      	ldrh	r1, [r7, #10]
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <I2C_RequestMemoryWrite+0xa4>)
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa5d 	bl	8003b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	69b9      	ldr	r1, [r7, #24]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8f0 	bl	80038bc <I2C_WaitOnTXISFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e02c      	b.n	8003740 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
 80036f6:	e015      	b.n	8003724 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8d6 	bl	80038bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e012      	b.n	8003740 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f884 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	80002000 	.word	0x80002000

0800374c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	460b      	mov	r3, r1
 8003760:	813b      	strh	r3, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <I2C_RequestMemoryRead+0xa4>)
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa0a 	bl	8003b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f89d 	bl	80038bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e02c      	b.n	80037e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003792:	893b      	ldrh	r3, [r7, #8]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
 800379c:	e015      	b.n	80037ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800379e:	893b      	ldrh	r3, [r7, #8]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f883 	bl	80038bc <I2C_WaitOnTXISFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e012      	b.n	80037e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037c0:	893b      	ldrh	r3, [r7, #8]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2140      	movs	r1, #64	; 0x40
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f831 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	80002000 	.word	0x80002000

080037f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d103      	bne.n	8003812 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b01      	cmp	r3, #1
 800381e:	d007      	beq.n	8003830 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	619a      	str	r2, [r3, #24]
  }
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800384c:	e022      	b.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d01e      	beq.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fe ffa9 	bl	80027ac <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d113      	bne.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e00f      	b.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d0cd      	beq.n	800384e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038c8:	e02c      	b.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f870 	bl	80039b4 <I2C_IsErrorOccurred>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e02a      	b.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d01e      	beq.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe ff61 	bl	80027ac <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e007      	b.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d1cb      	bne.n	80038ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003948:	e028      	b.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f830 	bl	80039b4 <I2C_IsErrorOccurred>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e026      	b.n	80039ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fe ff25 	bl	80027ac <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e007      	b.n	80039ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d1cf      	bne.n	800394a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d075      	beq.n	8003acc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2210      	movs	r2, #16
 80039e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039e8:	e056      	b.n	8003a98 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d052      	beq.n	8003a98 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fe fedb 	bl	80027ac <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <I2C_IsErrorOccurred+0x54>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d147      	bne.n	8003a98 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2a:	d12e      	bne.n	8003a8a <I2C_IsErrorOccurred+0xd6>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a32:	d02a      	beq.n	8003a8a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d027      	beq.n	8003a8a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a4a:	f7fe feaf 	bl	80027ac <HAL_GetTick>
 8003a4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a50:	e01b      	b.n	8003a8a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a52:	f7fe feab 	bl	80027ac <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b19      	cmp	r3, #25
 8003a5e:	d914      	bls.n	8003a8a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d1dc      	bne.n	8003a52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d003      	beq.n	8003aae <I2C_IsErrorOccurred+0xfa>
 8003aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d09d      	beq.n	80039ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2220      	movs	r2, #32
 8003abc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f043 0308 	orr.w	r3, r3, #8
 8003b06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01c      	beq.n	8003b7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff fe56 	bl	80037f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <I2C_IsErrorOccurred+0x1d4>)
 8003b54:	400b      	ands	r3, r1
 8003b56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	fe00e800 	.word	0xfe00e800

08003b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b9e:	897b      	ldrh	r3, [r7, #10]
 8003ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ba4:	7a7b      	ldrb	r3, [r7, #9]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	0d5b      	lsrs	r3, r3, #21
 8003bc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <I2C_TransferConfig+0x60>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	ea02 0103 	and.w	r1, r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	03ff63ff 	.word	0x03ff63ff

08003bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d138      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e032      	b.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d139      	bne.n	8003d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e033      	b.n	8003d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	; 0x24
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d20:	b08f      	sub	sp, #60	; 0x3c
 8003d22:	af0a      	add	r7, sp, #40	; 0x28
 8003d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e116      	b.n	8003f5e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fd7e 	bl	800184c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f002 fe45 	bl	80069fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	687e      	ldr	r6, [r7, #4]
 8003d7c:	466d      	mov	r5, sp
 8003d7e:	f106 0410 	add.w	r4, r6, #16
 8003d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d92:	1d33      	adds	r3, r6, #4
 8003d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d96:	6838      	ldr	r0, [r7, #0]
 8003d98:	f002 fe05 	bl	80069a6 <USB_CoreInit>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0d7      	b.n	8003f5e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 fe33 	bl	8006a20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	e04a      	b.n	8003e56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	333d      	adds	r3, #61	; 0x3d
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	333c      	adds	r3, #60	; 0x3c
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	b298      	uxth	r0, r3
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3344      	adds	r3, #68	; 0x44
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3340      	adds	r3, #64	; 0x40
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3348      	adds	r3, #72	; 0x48
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334c      	adds	r3, #76	; 0x4c
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3354      	adds	r3, #84	; 0x54
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	3301      	adds	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3af      	bcc.n	8003dc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e044      	b.n	8003ef0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	3301      	adds	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d3b5      	bcc.n	8003e66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	687e      	ldr	r6, [r7, #4]
 8003f02:	466d      	mov	r5, sp
 8003f04:	f106 0410 	add.w	r4, r6, #16
 8003f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f18:	1d33      	adds	r3, r6, #4
 8003f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f1c:	6838      	ldr	r0, [r7, #0]
 8003f1e:	f002 fdcb 	bl	8006ab8 <USB_DevInit>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e014      	b.n	8003f5e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f80a 	bl	8003f66 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 ff77 	bl	8006e4a <USB_DevDisconnect>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f66 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f98:	f043 0303 	orr.w	r3, r3, #3
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40007000 	.word	0x40007000

08003fd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40007000 	.word	0x40007000

08003fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	d130      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d038      	beq.n	800407c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004018:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2232      	movs	r2, #50	; 0x32
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0c9b      	lsrs	r3, r3, #18
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004030:	e002      	b.n	8004038 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b01      	subs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	d102      	bne.n	800404c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f2      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004058:	d110      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e00f      	b.n	800407e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406a:	d007      	beq.n	800407c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004074:	4a05      	ldr	r2, [pc, #20]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800407a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40007000 	.word	0x40007000
 8004090:	20000000 	.word	0x20000000
 8004094:	431bde83 	.word	0x431bde83

08004098 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80040a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a6:	6053      	str	r3, [r2, #4]
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40007000 	.word	0x40007000

080040b8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7fe fb74 	bl	80027ac <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e063      	b.n	8004198 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fd fa85 	bl	80015f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80040ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f858 	bl	80041a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	3b01      	subs	r3, #1
 8004104:	021a      	lsls	r2, r3, #8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	2120      	movs	r1, #32
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f850 	bl	80041c0 <QSPI_WaitFlagStateUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004124:	7afb      	ldrb	r3, [r7, #11]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d131      	bne.n	800418e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004134:	f023 0310 	bic.w	r3, r3, #16
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6852      	ldr	r2, [r2, #4]
 800413c:	0611      	lsls	r1, r2, #24
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68d2      	ldr	r2, [r2, #12]
 8004142:	4311      	orrs	r1, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_QSPI_Init+0xe8>)
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6912      	ldr	r2, [r2, #16]
 800415a:	0411      	lsls	r1, r2, #16
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6952      	ldr	r2, [r2, #20]
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6992      	ldr	r2, [r2, #24]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004196:	7afb      	ldrb	r3, [r7, #11]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	ffe0f8fe 	.word	0xffe0f8fe

080041a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041d0:	e01a      	b.n	8004208 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d016      	beq.n	8004208 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe fae7 	bl	80027ac <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2204      	movs	r2, #4
 80041f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e00e      	b.n	8004226 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf14      	ite	ne
 8004216:	2301      	movne	r3, #1
 8004218:	2300      	moveq	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d1d6      	bne.n	80041d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e3ca      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004242:	4b97      	ldr	r3, [pc, #604]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800424c:	4b94      	ldr	r3, [pc, #592]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80e4 	beq.w	800442c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_RCC_OscConfig+0x4a>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	f040 808b 	bne.w	8004388 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b01      	cmp	r3, #1
 8004276:	f040 8087 	bne.w	8004388 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800427a:	4b89      	ldr	r3, [pc, #548]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_RCC_OscConfig+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e3a2      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <HAL_RCC_OscConfig+0x7c>
 80042a2:	4b7f      	ldr	r3, [pc, #508]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042aa:	e005      	b.n	80042b8 <HAL_RCC_OscConfig+0x88>
 80042ac:	4b7c      	ldr	r3, [pc, #496]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d223      	bcs.n	8004304 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fd87 	bl	8004dd4 <RCC_SetFlashLatencyFromMSIRange>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e383      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d0:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a72      	ldr	r2, [pc, #456]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042d6:	f043 0308 	orr.w	r3, r3, #8
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b70      	ldr	r3, [pc, #448]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	496d      	ldr	r1, [pc, #436]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ee:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	4968      	ldr	r1, [pc, #416]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
 8004302:	e025      	b.n	8004350 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004304:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a65      	ldr	r2, [pc, #404]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800430a:	f043 0308 	orr.w	r3, r3, #8
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4960      	ldr	r1, [pc, #384]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004322:	4b5f      	ldr	r3, [pc, #380]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	495b      	ldr	r1, [pc, #364]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd47 	bl	8004dd4 <RCC_SetFlashLatencyFromMSIRange>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e343      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004350:	f000 fc4a 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b52      	ldr	r3, [pc, #328]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	4950      	ldr	r1, [pc, #320]	; (80044a4 <HAL_RCC_OscConfig+0x274>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
 800436c:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <HAL_RCC_OscConfig+0x278>)
 800436e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004370:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <HAL_RCC_OscConfig+0x27c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fd fb05 	bl	8001984 <HAL_InitTick>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d052      	beq.n	800442a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	e327      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d032      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004390:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800439c:	f7fe fa06 	bl	80027ac <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043a4:	f7fe fa02 	bl	80027ac <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e310      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a36      	ldr	r2, [pc, #216]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043c8:	f043 0308 	orr.w	r3, r3, #8
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4931      	ldr	r1, [pc, #196]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e0:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	492c      	ldr	r1, [pc, #176]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
 80043f4:	e01a      	b.n	800442c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004402:	f7fe f9d3 	bl	80027ac <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800440a:	f7fe f9cf 	bl	80027ac <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e2dd      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800441c:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x1da>
 8004428:	e000      	b.n	800442c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800442a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d074      	beq.n	8004522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d005      	beq.n	800444a <HAL_RCC_OscConfig+0x21a>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d10e      	bne.n	8004462 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d10b      	bne.n	8004462 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d064      	beq.n	8004520 <HAL_RCC_OscConfig+0x2f0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d160      	bne.n	8004520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e2ba      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x24a>
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e026      	b.n	80044c8 <HAL_RCC_OscConfig+0x298>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004482:	d115      	bne.n	80044b0 <HAL_RCC_OscConfig+0x280>
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 800448a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a02      	ldr	r2, [pc, #8]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e014      	b.n	80044c8 <HAL_RCC_OscConfig+0x298>
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000
 80044a4:	0800a294 	.word	0x0800a294
 80044a8:	20000000 	.word	0x20000000
 80044ac:	20000060 	.word	0x20000060
 80044b0:	4ba0      	ldr	r3, [pc, #640]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a9f      	ldr	r2, [pc, #636]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b9d      	ldr	r3, [pc, #628]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a9c      	ldr	r2, [pc, #624]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe f96c 	bl	80027ac <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe f968 	bl	80027ac <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e276      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	4b92      	ldr	r3, [pc, #584]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x2a8>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe f958 	bl	80027ac <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fe f954 	bl	80027ac <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e262      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004512:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x2d0>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d060      	beq.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d005      	beq.n	8004540 <HAL_RCC_OscConfig+0x310>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d119      	bne.n	800456e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d116      	bne.n	800456e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	4b7c      	ldr	r3, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_OscConfig+0x328>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e23f      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	4973      	ldr	r1, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800456c:	e040      	b.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d023      	beq.n	80045be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004576:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fe f913 	bl	80027ac <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458a:	f7fe f90f 	bl	80027ac <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e21d      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800459c:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b62      	ldr	r3, [pc, #392]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	495f      	ldr	r1, [pc, #380]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	e018      	b.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b5d      	ldr	r3, [pc, #372]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a5c      	ldr	r2, [pc, #368]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80045c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ca:	f7fe f8ef 	bl	80027ac <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fe f8eb 	bl	80027ac <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e1f9      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e4:	4b53      	ldr	r3, [pc, #332]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03c      	beq.n	8004676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01c      	beq.n	800463e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe f8ca 	bl	80027ac <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461c:	f7fe f8c6 	bl	80027ac <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e1d4      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ef      	beq.n	800461c <HAL_RCC_OscConfig+0x3ec>
 800463c:	e01b      	b.n	8004676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463e:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004644:	4a3b      	ldr	r2, [pc, #236]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fe f8ad 	bl	80027ac <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004656:	f7fe f8a9 	bl	80027ac <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1b7      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ef      	bne.n	8004656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80a6 	beq.w	80047d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004688:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004694:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469e:	6593      	str	r3, [r2, #88]	; 0x58
 80046a0:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ac:	2301      	movs	r3, #1
 80046ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCC_OscConfig+0x508>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d118      	bne.n	80046ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_RCC_OscConfig+0x508>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <HAL_RCC_OscConfig+0x508>)
 80046c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c8:	f7fe f870 	bl	80027ac <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fe f86c 	bl	80027ac <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e17a      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <HAL_RCC_OscConfig+0x508>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d108      	bne.n	8004708 <HAL_RCC_OscConfig+0x4d8>
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004706:	e029      	b.n	800475c <HAL_RCC_OscConfig+0x52c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b05      	cmp	r3, #5
 800470e:	d115      	bne.n	800473c <HAL_RCC_OscConfig+0x50c>
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	4a07      	ldr	r2, [pc, #28]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004718:	f043 0304 	orr.w	r3, r3, #4
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	4a03      	ldr	r2, [pc, #12]	; (8004734 <HAL_RCC_OscConfig+0x504>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x52c>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
 800473c:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	4a9b      	ldr	r2, [pc, #620]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474c:	4b98      	ldr	r3, [pc, #608]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	4a97      	ldr	r2, [pc, #604]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fe f822 	bl	80027ac <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fe f81e 	bl	80027ac <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e12a      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ed      	beq.n	800476c <HAL_RCC_OscConfig+0x53c>
 8004790:	e015      	b.n	80047be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fe f80b 	bl	80027ac <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fe f807 	bl	80027ac <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e113      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b0:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ed      	bne.n	800479a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b7a      	ldr	r3, [pc, #488]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a79      	ldr	r2, [pc, #484]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80fe 	beq.w	80049d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	2b02      	cmp	r3, #2
 80047e0:	f040 80d0 	bne.w	8004984 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f003 0203 	and.w	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d130      	bne.n	800485a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	3b01      	subs	r3, #1
 8004804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d127      	bne.n	800485a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d11f      	bne.n	800485a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004824:	2a07      	cmp	r2, #7
 8004826:	bf14      	ite	ne
 8004828:	2201      	movne	r2, #1
 800482a:	2200      	moveq	r2, #0
 800482c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	4293      	cmp	r3, r2
 8004830:	d113      	bne.n	800485a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	3b01      	subs	r3, #1
 8004840:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d109      	bne.n	800485a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d06e      	beq.n	8004938 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b0c      	cmp	r3, #12
 800485e:	d069      	beq.n	8004934 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0ad      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004886:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004888:	f7fd ff90 	bl	80027ac <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004890:	f7fd ff8c 	bl	80027ac <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e09a      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a2:	4b43      	ldr	r3, [pc, #268]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ae:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <HAL_RCC_OscConfig+0x784>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048be:	3a01      	subs	r2, #1
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c8:	0212      	lsls	r2, r2, #8
 80048ca:	4311      	orrs	r1, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048d0:	0852      	lsrs	r2, r2, #1
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0552      	lsls	r2, r2, #21
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048dc:	0852      	lsrs	r2, r2, #1
 80048de:	3a01      	subs	r2, #1
 80048e0:	0652      	lsls	r2, r2, #25
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e8:	0912      	lsrs	r2, r2, #4
 80048ea:	0452      	lsls	r2, r2, #17
 80048ec:	430a      	orrs	r2, r1
 80048ee:	4930      	ldr	r1, [pc, #192]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048f4:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2d      	ldr	r2, [pc, #180]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800490c:	f7fd ff4e 	bl	80027ac <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd ff4a 	bl	80027ac <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e058      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004926:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004932:	e050      	b.n	80049d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e04f      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d148      	bne.n	80049d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800495c:	f7fd ff26 	bl	80027ac <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd ff22 	bl	80027ac <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e030      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x734>
 8004982:	e028      	b.n	80049d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d023      	beq.n	80049d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <HAL_RCC_OscConfig+0x780>)
 8004990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd ff09 	bl	80027ac <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499c:	e00c      	b.n	80049b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fd ff05 	bl	80027ac <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d905      	bls.n	80049b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e013      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
 80049b0:	40021000 	.word	0x40021000
 80049b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCC_OscConfig+0x7b0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ec      	bne.n	800499e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_OscConfig+0x7b0>)
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	4905      	ldr	r1, [pc, #20]	; (80049e0 <HAL_RCC_OscConfig+0x7b0>)
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCC_OscConfig+0x7b4>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	60cb      	str	r3, [r1, #12]
 80049d0:	e001      	b.n	80049d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	feeefffc 	.word	0xfeeefffc

080049e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0e7      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049fc:	4b75      	ldr	r3, [pc, #468]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d910      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 0207 	bic.w	r2, r3, #7
 8004a12:	4970      	ldr	r1, [pc, #448]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b6e      	ldr	r3, [pc, #440]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0cf      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d908      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4960      	ldr	r1, [pc, #384]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04c      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	4b5a      	ldr	r3, [pc, #360]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d121      	bne.n	8004abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0a6      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a86:	4b54      	ldr	r3, [pc, #336]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d115      	bne.n	8004abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e09a      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a9e:	4b4e      	ldr	r3, [pc, #312]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e08e      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aae:	4b4a      	ldr	r3, [pc, #296]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e086      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b46      	ldr	r3, [pc, #280]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4943      	ldr	r1, [pc, #268]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fd fe6c 	bl	80027ac <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fd fe68 	bl	80027ac <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e06e      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d208      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	492b      	ldr	r1, [pc, #172]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2e:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d210      	bcs.n	8004b5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 0207 	bic.w	r2, r3, #7
 8004b44:	4923      	ldr	r1, [pc, #140]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4c:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e036      	b.n	8004bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4918      	ldr	r1, [pc, #96]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4910      	ldr	r1, [pc, #64]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b9c:	f000 f824 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	490b      	ldr	r1, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x1f4>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_ClockConfig+0x1fc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fc fedf 	bl	8001984 <HAL_InitTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bca:	7afb      	ldrb	r3, [r7, #11]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	0800a294 	.word	0x0800a294
 8004be0:	20000000 	.word	0x20000000
 8004be4:	20000060 	.word	0x20000060

08004be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b089      	sub	sp, #36	; 0x24
 8004bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x34>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d121      	bne.n	8004c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d11e      	bne.n	8004c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c1c:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c28:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	e005      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c38:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c44:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e004      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8004c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b0c      	cmp	r3, #12
 8004c74:	d134      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d003      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0xac>
 8004c8c:	e005      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c90:	617b      	str	r3, [r7, #20]
      break;
 8004c92:	e005      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8004c96:	617b      	str	r3, [r7, #20]
      break;
 8004c98:	e002      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	617b      	str	r3, [r7, #20]
      break;
 8004c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ca0:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	3301      	adds	r3, #1
 8004cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	fb03 f202 	mul.w	r2, r3, r2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	0e5b      	lsrs	r3, r3, #25
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	; 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800a2ac 	.word	0x0800a2ac
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	007a1200 	.word	0x007a1200

08004d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000000 	.word	0x20000000

08004d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d1c:	f7ff fff0 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4904      	ldr	r1, [pc, #16]	; (8004d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800a2a4 	.word	0x0800a2a4

08004d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d48:	f7ff ffda 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	0adb      	lsrs	r3, r3, #11
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4904      	ldr	r1, [pc, #16]	; (8004d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	0800a2a4 	.word	0x0800a2a4

08004d70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	220f      	movs	r2, #15
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_RCC_GetClockConfig+0x5c>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 0203 	and.w	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <HAL_RCC_GetClockConfig+0x5c>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_RCC_GetClockConfig+0x5c>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_GetClockConfig+0x5c>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <HAL_RCC_GetClockConfig+0x60>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0207 	and.w	r2, r3, #7
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40022000 	.word	0x40022000

08004dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dec:	f7ff f8f0 	bl	8003fd0 <HAL_PWREx_GetVoltageRange>
 8004df0:	6178      	str	r0, [r7, #20]
 8004df2:	e014      	b.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	4a24      	ldr	r2, [pc, #144]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8004e00:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e0c:	f7ff f8e0 	bl	8003fd0 <HAL_PWREx_GetVoltageRange>
 8004e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d10b      	bne.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d919      	bls.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e30:	d902      	bls.n	8004e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e32:	2302      	movs	r3, #2
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e013      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e38:	2301      	movs	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e010      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d902      	bls.n	8004e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e44:	2303      	movs	r3, #3
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e00a      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d102      	bne.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e50:	2302      	movs	r3, #2
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e004      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b70      	cmp	r3, #112	; 0x70
 8004e5a:	d101      	bne.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 0207 	bic.w	r2, r3, #7
 8004e68:	4909      	ldr	r1, [pc, #36]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40022000 	.word	0x40022000

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d041      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eb8:	d02a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ebe:	d824      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eca:	d81e      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed4:	d010      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ed6:	e018      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed8:	4b86      	ldr	r3, [pc, #536]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a85      	ldr	r2, [pc, #532]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee4:	e015      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 facb 	bl	8005488 <RCCEx_PLLSAI1_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef6:	e00c      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3320      	adds	r3, #32
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fbb6 	bl	8005670 <RCCEx_PLLSAI2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f18:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f26:	4973      	ldr	r1, [pc, #460]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f2e:	e001      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d041      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f48:	d02a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f4e:	d824      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f64:	d010      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f66:	e018      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f74:	e015      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fa83 	bl	8005488 <RCCEx_PLLSAI1_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f86:	e00c      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3320      	adds	r3, #32
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fb6e 	bl	8005670 <RCCEx_PLLSAI2_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fa8:	4b52      	ldr	r3, [pc, #328]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb6:	494f      	ldr	r1, [pc, #316]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80a0 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fd6:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	4a40      	ldr	r2, [pc, #256]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff8:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005004:	2301      	movs	r3, #1
 8005006:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005008:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3a      	ldr	r2, [pc, #232]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005014:	f7fd fbca 	bl	80027ac <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800501a:	e009      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501c:	f7fd fbc6 	bl	80027ac <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d902      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	74fb      	strb	r3, [r7, #19]
        break;
 800502e:	e005      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005030:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ef      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d15c      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005042:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01f      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d019      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005060:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800506c:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd fb85 	bl	80027ac <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a4:	e00b      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fb81 	bl	80027ac <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d902      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	74fb      	strb	r3, [r7, #19]
            break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ec      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	4904      	ldr	r1, [pc, #16]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050ea:	e009      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005100:	7c7b      	ldrb	r3, [r7, #17]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d105      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005106:	4b9e      	ldr	r3, [pc, #632]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	4a9d      	ldr	r2, [pc, #628]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800511e:	4b98      	ldr	r3, [pc, #608]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f023 0203 	bic.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	4994      	ldr	r1, [pc, #592]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005140:	4b8f      	ldr	r3, [pc, #572]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 020c 	bic.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	498c      	ldr	r1, [pc, #560]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005162:	4b87      	ldr	r3, [pc, #540]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	4983      	ldr	r1, [pc, #524]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005184:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	497b      	ldr	r1, [pc, #492]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051a6:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	4972      	ldr	r1, [pc, #456]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c8:	4b6d      	ldr	r3, [pc, #436]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	496a      	ldr	r1, [pc, #424]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ea:	4b65      	ldr	r3, [pc, #404]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	4961      	ldr	r1, [pc, #388]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800520c:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	4959      	ldr	r1, [pc, #356]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800522e:	4b54      	ldr	r3, [pc, #336]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	4950      	ldr	r1, [pc, #320]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005250:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	4948      	ldr	r1, [pc, #288]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005272:	4b43      	ldr	r3, [pc, #268]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005280:	493f      	ldr	r1, [pc, #252]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d028      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005294:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a2:	4937      	ldr	r1, [pc, #220]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b4:	4b32      	ldr	r3, [pc, #200]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a31      	ldr	r2, [pc, #196]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052be:	60d3      	str	r3, [r2, #12]
 80052c0:	e011      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ca:	d10c      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f8d8 	bl	8005488 <RCCEx_PLLSAI1_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052e2:	7cfb      	ldrb	r3, [r7, #19]
 80052e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d028      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	491f      	ldr	r1, [pc, #124]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005310:	d106      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005312:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800531c:	60d3      	str	r3, [r2, #12]
 800531e:	e011      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005328:	d10c      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f8a9 	bl	8005488 <RCCEx_PLLSAI1_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02b      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	4908      	ldr	r1, [pc, #32]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536e:	d109      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a02      	ldr	r2, [pc, #8]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800537a:	60d3      	str	r3, [r2, #12]
 800537c:	e014      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800538c:	d10c      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
 8005392:	2101      	movs	r1, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f877 	bl	8005488 <RCCEx_PLLSAI1_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02f      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c2:	4928      	ldr	r1, [pc, #160]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	2102      	movs	r1, #2
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f854 	bl	8005488 <RCCEx_PLLSAI1_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d014      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	74bb      	strb	r3, [r7, #18]
 80053ee:	e011      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3320      	adds	r3, #32
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f935 	bl	8005670 <RCCEx_PLLSAI2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800540a:	7cfb      	ldrb	r3, [r7, #19]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005420:	4b10      	ldr	r3, [pc, #64]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542e:	490d      	ldr	r1, [pc, #52]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005452:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800545a:	7cbb      	ldrb	r3, [r7, #18]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000

08005488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005496:	4b75      	ldr	r3, [pc, #468]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054a2:	4b72      	ldr	r3, [pc, #456]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0203 	and.w	r2, r3, #3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d10d      	bne.n	80054ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
       ||
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ba:	4b6c      	ldr	r3, [pc, #432]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
       ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d047      	beq.n	800555e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
 80054d2:	e044      	b.n	800555e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d018      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x86>
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d825      	bhi.n	800552c <RCCEx_PLLSAI1_Config+0xa4>
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d002      	beq.n	80054ea <RCCEx_PLLSAI1_Config+0x62>
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d009      	beq.n	80054fc <RCCEx_PLLSAI1_Config+0x74>
 80054e8:	e020      	b.n	800552c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ea:	4b60      	ldr	r3, [pc, #384]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11d      	bne.n	8005532 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fa:	e01a      	b.n	8005532 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054fc:	4b5b      	ldr	r3, [pc, #364]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d116      	bne.n	8005536 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550c:	e013      	b.n	8005536 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800550e:	4b57      	ldr	r3, [pc, #348]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800551a:	4b54      	ldr	r3, [pc, #336]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800552a:	e006      	b.n	800553a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e004      	b.n	800553c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553a:	bf00      	nop
    }

    if(status == HAL_OK)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005542:	4b4a      	ldr	r3, [pc, #296]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	430b      	orrs	r3, r1
 8005558:	4944      	ldr	r1, [pc, #272]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d17d      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005564:	4b41      	ldr	r3, [pc, #260]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a40      	ldr	r2, [pc, #256]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800556e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005570:	f7fd f91c 	bl	80027ac <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005576:	e009      	b.n	800558c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005578:	f7fd f918 	bl	80027ac <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	73fb      	strb	r3, [r7, #15]
        break;
 800558a:	e005      	b.n	8005598 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800558c:	4b37      	ldr	r3, [pc, #220]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ef      	bne.n	8005578 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d160      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d111      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	0211      	lsls	r1, r2, #8
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68d2      	ldr	r2, [r2, #12]
 80055ba:	0912      	lsrs	r2, r2, #4
 80055bc:	0452      	lsls	r2, r2, #17
 80055be:	430a      	orrs	r2, r1
 80055c0:	492a      	ldr	r1, [pc, #168]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]
 80055c6:	e027      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d112      	bne.n	80055f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ce:	4b27      	ldr	r3, [pc, #156]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6892      	ldr	r2, [r2, #8]
 80055de:	0211      	lsls	r1, r2, #8
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6912      	ldr	r2, [r2, #16]
 80055e4:	0852      	lsrs	r2, r2, #1
 80055e6:	3a01      	subs	r2, #1
 80055e8:	0552      	lsls	r2, r2, #21
 80055ea:	430a      	orrs	r2, r1
 80055ec:	491f      	ldr	r1, [pc, #124]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	610b      	str	r3, [r1, #16]
 80055f2:	e011      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055f4:	4b1d      	ldr	r3, [pc, #116]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6892      	ldr	r2, [r2, #8]
 8005604:	0211      	lsls	r1, r2, #8
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6952      	ldr	r2, [r2, #20]
 800560a:	0852      	lsrs	r2, r2, #1
 800560c:	3a01      	subs	r2, #1
 800560e:	0652      	lsls	r2, r2, #25
 8005610:	430a      	orrs	r2, r1
 8005612:	4916      	ldr	r1, [pc, #88]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005618:	4b14      	ldr	r3, [pc, #80]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fd f8c2 	bl	80027ac <HAL_GetTick>
 8005628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800562a:	e009      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800562c:	f7fd f8be 	bl	80027ac <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d902      	bls.n	8005640 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	73fb      	strb	r3, [r7, #15]
          break;
 800563e:	e005      	b.n	800564c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ef      	beq.n	800562c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4904      	ldr	r1, [pc, #16]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000

08005670 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800567e:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800568a:	4b67      	ldr	r3, [pc, #412]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0203 	and.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d10d      	bne.n	80056b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
       ||
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056a2:	4b61      	ldr	r3, [pc, #388]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
       ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d047      	beq.n	8005746 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e044      	b.n	8005746 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d018      	beq.n	80056f6 <RCCEx_PLLSAI2_Config+0x86>
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d825      	bhi.n	8005714 <RCCEx_PLLSAI2_Config+0xa4>
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d002      	beq.n	80056d2 <RCCEx_PLLSAI2_Config+0x62>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d009      	beq.n	80056e4 <RCCEx_PLLSAI2_Config+0x74>
 80056d0:	e020      	b.n	8005714 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11d      	bne.n	800571a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e2:	e01a      	b.n	800571a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e4:	4b50      	ldr	r3, [pc, #320]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f4:	e013      	b.n	800571e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056f6:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005702:	4b49      	ldr	r3, [pc, #292]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005712:	e006      	b.n	8005722 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e004      	b.n	8005724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005722:	bf00      	nop
    }

    if(status == HAL_OK)
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800572a:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	3b01      	subs	r3, #1
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	430b      	orrs	r3, r1
 8005740:	4939      	ldr	r1, [pc, #228]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	4313      	orrs	r3, r2
 8005744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d167      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005758:	f7fd f828 	bl	80027ac <HAL_GetTick>
 800575c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800575e:	e009      	b.n	8005774 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005760:	f7fd f824 	bl	80027ac <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d902      	bls.n	8005774 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	73fb      	strb	r3, [r7, #15]
        break;
 8005772:	e005      	b.n	8005780 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005774:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ef      	bne.n	8005760 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d14a      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d111      	bne.n	80057b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800578c:	4b26      	ldr	r3, [pc, #152]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	0211      	lsls	r1, r2, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68d2      	ldr	r2, [r2, #12]
 80057a2:	0912      	lsrs	r2, r2, #4
 80057a4:	0452      	lsls	r2, r2, #17
 80057a6:	430a      	orrs	r2, r1
 80057a8:	491f      	ldr	r1, [pc, #124]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	614b      	str	r3, [r1, #20]
 80057ae:	e011      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6892      	ldr	r2, [r2, #8]
 80057c0:	0211      	lsls	r1, r2, #8
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6912      	ldr	r2, [r2, #16]
 80057c6:	0852      	lsrs	r2, r2, #1
 80057c8:	3a01      	subs	r2, #1
 80057ca:	0652      	lsls	r2, r2, #25
 80057cc:	430a      	orrs	r2, r1
 80057ce:	4916      	ldr	r1, [pc, #88]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fc ffe4 	bl	80027ac <HAL_GetTick>
 80057e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057e6:	e009      	b.n	80057fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057e8:	f7fc ffe0 	bl	80027ac <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d902      	bls.n	80057fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	73fb      	strb	r3, [r7, #15]
          break;
 80057fa:	e005      	b.n	8005808 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ef      	beq.n	80057e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	4904      	ldr	r1, [pc, #16]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	4313      	orrs	r3, r2
 800581a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e095      	b.n	800596a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fefc 	bl	800167c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a4:	d902      	bls.n	80058ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_Init+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 0204 	and.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e049      	b.n	8005a18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f841 	bl	8005a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 f9f7 	bl	8005da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e04f      	b.n	8005aec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a23      	ldr	r2, [pc, #140]	; (8005af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x76>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d018      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x76>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_TIM_Base_Start_IT+0xc8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x76>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x76>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x76>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x76>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d115      	bne.n	8005ad6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d015      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d011      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	e008      	b.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e000      	b.n	8005aea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40013400 	.word	0x40013400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	00010007 	.word	0x00010007

08005b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0202 	mvn.w	r2, #2
 8005b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f905 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8f7 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f908 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0204 	mvn.w	r2, #4
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8db 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8cd 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8de 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d122      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d11b      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0208 	mvn.w	r2, #8
 8005be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2204      	movs	r2, #4
 8005bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f8b1 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8a3 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8b4 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0210 	mvn.w	r2, #16
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2208      	movs	r2, #8
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f887 	bl	8005d66 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f879 	bl	8005d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f88a 	bl	8005d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0201 	mvn.w	r2, #1
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fb fbec 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d10e      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f914 	bl	8005eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd2:	d10e      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d107      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f907 	bl	8005f00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d10e      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f838 	bl	8005d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d10e      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0220 	mvn.w	r2, #32
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8c7 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a40      	ldr	r2, [pc, #256]	; (8005eb8 <TIM_Base_SetConfig+0x114>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc2:	d00f      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3d      	ldr	r2, [pc, #244]	; (8005ebc <TIM_Base_SetConfig+0x118>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00b      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <TIM_Base_SetConfig+0x11c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a3b      	ldr	r2, [pc, #236]	; (8005ec4 <TIM_Base_SetConfig+0x120>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a3a      	ldr	r2, [pc, #232]	; (8005ec8 <TIM_Base_SetConfig+0x124>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d108      	bne.n	8005df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2f      	ldr	r2, [pc, #188]	; (8005eb8 <TIM_Base_SetConfig+0x114>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01f      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d01b      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2c      	ldr	r2, [pc, #176]	; (8005ebc <TIM_Base_SetConfig+0x118>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d017      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <TIM_Base_SetConfig+0x11c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2a      	ldr	r2, [pc, #168]	; (8005ec4 <TIM_Base_SetConfig+0x120>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a29      	ldr	r2, [pc, #164]	; (8005ec8 <TIM_Base_SetConfig+0x124>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <TIM_Base_SetConfig+0x128>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <TIM_Base_SetConfig+0x12c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a26      	ldr	r2, [pc, #152]	; (8005ed4 <TIM_Base_SetConfig+0x130>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a10      	ldr	r2, [pc, #64]	; (8005eb8 <TIM_Base_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00f      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <TIM_Base_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <TIM_Base_SetConfig+0x128>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <TIM_Base_SetConfig+0x12c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0xf8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a0f      	ldr	r2, [pc, #60]	; (8005ed4 <TIM_Base_SetConfig+0x130>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d103      	bne.n	8005ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	615a      	str	r2, [r3, #20]
}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40000c00 	.word	0x40000c00
 8005ec8:	40013400 	.word	0x40013400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e040      	b.n	8005fa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fbe4 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	; 0x24
 8005f40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8c0 	bl	80060d8 <UART_SetConfig>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e022      	b.n	8005fa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fb6c 	bl	8006648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fbf3 	bl	800678c <UART_CheckIdleState>
 8005fa6:	4603      	mov	r3, r0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	f040 8082 	bne.w	80060ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_UART_Transmit+0x26>
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e07a      	b.n	80060d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UART_Transmit+0x38>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e073      	b.n	80060d0 <HAL_UART_Transmit+0x120>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2221      	movs	r2, #33	; 0x21
 8005ffc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffe:	f7fc fbd5 	bl	80027ac <HAL_GetTick>
 8006002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	d108      	bne.n	8006030 <HAL_UART_Transmit+0x80>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e003      	b.n	8006038 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006040:	e02d      	b.n	800609e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fbe6 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e039      	b.n	80060d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800606e:	b292      	uxth	r2, r2
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	3302      	adds	r3, #2
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e008      	b.n	800608c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	b292      	uxth	r2, r2
 8006084:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1cb      	bne.n	8006042 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2140      	movs	r1, #64	; 0x40
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fbb2 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e005      	b.n	80060d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e000      	b.n	80060d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060dc:	b08a      	sub	sp, #40	; 0x28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4ba4      	ldr	r3, [pc, #656]	; (8006398 <UART_SetConfig+0x2c0>)
 8006108:	4013      	ands	r3, r2
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006110:	430b      	orrs	r3, r1
 8006112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a99      	ldr	r2, [pc, #612]	; (800639c <UART_SetConfig+0x2c4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	4313      	orrs	r3, r2
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006154:	430a      	orrs	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a90      	ldr	r2, [pc, #576]	; (80063a0 <UART_SetConfig+0x2c8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d126      	bne.n	80061b0 <UART_SetConfig+0xd8>
 8006162:	4b90      	ldr	r3, [pc, #576]	; (80063a4 <UART_SetConfig+0x2cc>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d81b      	bhi.n	80061a8 <UART_SetConfig+0xd0>
 8006170:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0xa0>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	08006189 	.word	0x08006189
 800617c:	08006199 	.word	0x08006199
 8006180:	08006191 	.word	0x08006191
 8006184:	080061a1 	.word	0x080061a1
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618e:	e116      	b.n	80063be <UART_SetConfig+0x2e6>
 8006190:	2302      	movs	r3, #2
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006196:	e112      	b.n	80063be <UART_SetConfig+0x2e6>
 8006198:	2304      	movs	r3, #4
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619e:	e10e      	b.n	80063be <UART_SetConfig+0x2e6>
 80061a0:	2308      	movs	r3, #8
 80061a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a6:	e10a      	b.n	80063be <UART_SetConfig+0x2e6>
 80061a8:	2310      	movs	r3, #16
 80061aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ae:	e106      	b.n	80063be <UART_SetConfig+0x2e6>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a7c      	ldr	r2, [pc, #496]	; (80063a8 <UART_SetConfig+0x2d0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d138      	bne.n	800622c <UART_SetConfig+0x154>
 80061ba:	4b7a      	ldr	r3, [pc, #488]	; (80063a4 <UART_SetConfig+0x2cc>)
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	f003 030c 	and.w	r3, r3, #12
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d82d      	bhi.n	8006224 <UART_SetConfig+0x14c>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0xf8>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006205 	.word	0x08006205
 80061d4:	08006225 	.word	0x08006225
 80061d8:	08006225 	.word	0x08006225
 80061dc:	08006225 	.word	0x08006225
 80061e0:	08006215 	.word	0x08006215
 80061e4:	08006225 	.word	0x08006225
 80061e8:	08006225 	.word	0x08006225
 80061ec:	08006225 	.word	0x08006225
 80061f0:	0800620d 	.word	0x0800620d
 80061f4:	08006225 	.word	0x08006225
 80061f8:	08006225 	.word	0x08006225
 80061fc:	08006225 	.word	0x08006225
 8006200:	0800621d 	.word	0x0800621d
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620a:	e0d8      	b.n	80063be <UART_SetConfig+0x2e6>
 800620c:	2302      	movs	r3, #2
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006212:	e0d4      	b.n	80063be <UART_SetConfig+0x2e6>
 8006214:	2304      	movs	r3, #4
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621a:	e0d0      	b.n	80063be <UART_SetConfig+0x2e6>
 800621c:	2308      	movs	r3, #8
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006222:	e0cc      	b.n	80063be <UART_SetConfig+0x2e6>
 8006224:	2310      	movs	r3, #16
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622a:	e0c8      	b.n	80063be <UART_SetConfig+0x2e6>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5e      	ldr	r2, [pc, #376]	; (80063ac <UART_SetConfig+0x2d4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d125      	bne.n	8006282 <UART_SetConfig+0x1aa>
 8006236:	4b5b      	ldr	r3, [pc, #364]	; (80063a4 <UART_SetConfig+0x2cc>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d016      	beq.n	8006272 <UART_SetConfig+0x19a>
 8006244:	2b30      	cmp	r3, #48	; 0x30
 8006246:	d818      	bhi.n	800627a <UART_SetConfig+0x1a2>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d00a      	beq.n	8006262 <UART_SetConfig+0x18a>
 800624c:	2b20      	cmp	r3, #32
 800624e:	d814      	bhi.n	800627a <UART_SetConfig+0x1a2>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <UART_SetConfig+0x182>
 8006254:	2b10      	cmp	r3, #16
 8006256:	d008      	beq.n	800626a <UART_SetConfig+0x192>
 8006258:	e00f      	b.n	800627a <UART_SetConfig+0x1a2>
 800625a:	2300      	movs	r3, #0
 800625c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006260:	e0ad      	b.n	80063be <UART_SetConfig+0x2e6>
 8006262:	2302      	movs	r3, #2
 8006264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006268:	e0a9      	b.n	80063be <UART_SetConfig+0x2e6>
 800626a:	2304      	movs	r3, #4
 800626c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006270:	e0a5      	b.n	80063be <UART_SetConfig+0x2e6>
 8006272:	2308      	movs	r3, #8
 8006274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006278:	e0a1      	b.n	80063be <UART_SetConfig+0x2e6>
 800627a:	2310      	movs	r3, #16
 800627c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006280:	e09d      	b.n	80063be <UART_SetConfig+0x2e6>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a4a      	ldr	r2, [pc, #296]	; (80063b0 <UART_SetConfig+0x2d8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d125      	bne.n	80062d8 <UART_SetConfig+0x200>
 800628c:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <UART_SetConfig+0x2cc>)
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006292:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006296:	2bc0      	cmp	r3, #192	; 0xc0
 8006298:	d016      	beq.n	80062c8 <UART_SetConfig+0x1f0>
 800629a:	2bc0      	cmp	r3, #192	; 0xc0
 800629c:	d818      	bhi.n	80062d0 <UART_SetConfig+0x1f8>
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d00a      	beq.n	80062b8 <UART_SetConfig+0x1e0>
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d814      	bhi.n	80062d0 <UART_SetConfig+0x1f8>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <UART_SetConfig+0x1d8>
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d008      	beq.n	80062c0 <UART_SetConfig+0x1e8>
 80062ae:	e00f      	b.n	80062d0 <UART_SetConfig+0x1f8>
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b6:	e082      	b.n	80063be <UART_SetConfig+0x2e6>
 80062b8:	2302      	movs	r3, #2
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062be:	e07e      	b.n	80063be <UART_SetConfig+0x2e6>
 80062c0:	2304      	movs	r3, #4
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c6:	e07a      	b.n	80063be <UART_SetConfig+0x2e6>
 80062c8:	2308      	movs	r3, #8
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ce:	e076      	b.n	80063be <UART_SetConfig+0x2e6>
 80062d0:	2310      	movs	r3, #16
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d6:	e072      	b.n	80063be <UART_SetConfig+0x2e6>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a35      	ldr	r2, [pc, #212]	; (80063b4 <UART_SetConfig+0x2dc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d12a      	bne.n	8006338 <UART_SetConfig+0x260>
 80062e2:	4b30      	ldr	r3, [pc, #192]	; (80063a4 <UART_SetConfig+0x2cc>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f0:	d01a      	beq.n	8006328 <UART_SetConfig+0x250>
 80062f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f6:	d81b      	bhi.n	8006330 <UART_SetConfig+0x258>
 80062f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fc:	d00c      	beq.n	8006318 <UART_SetConfig+0x240>
 80062fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006302:	d815      	bhi.n	8006330 <UART_SetConfig+0x258>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <UART_SetConfig+0x238>
 8006308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630c:	d008      	beq.n	8006320 <UART_SetConfig+0x248>
 800630e:	e00f      	b.n	8006330 <UART_SetConfig+0x258>
 8006310:	2300      	movs	r3, #0
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006316:	e052      	b.n	80063be <UART_SetConfig+0x2e6>
 8006318:	2302      	movs	r3, #2
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631e:	e04e      	b.n	80063be <UART_SetConfig+0x2e6>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006326:	e04a      	b.n	80063be <UART_SetConfig+0x2e6>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632e:	e046      	b.n	80063be <UART_SetConfig+0x2e6>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006336:	e042      	b.n	80063be <UART_SetConfig+0x2e6>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a17      	ldr	r2, [pc, #92]	; (800639c <UART_SetConfig+0x2c4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d13a      	bne.n	80063b8 <UART_SetConfig+0x2e0>
 8006342:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <UART_SetConfig+0x2cc>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800634c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006350:	d01a      	beq.n	8006388 <UART_SetConfig+0x2b0>
 8006352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006356:	d81b      	bhi.n	8006390 <UART_SetConfig+0x2b8>
 8006358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635c:	d00c      	beq.n	8006378 <UART_SetConfig+0x2a0>
 800635e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006362:	d815      	bhi.n	8006390 <UART_SetConfig+0x2b8>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <UART_SetConfig+0x298>
 8006368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636c:	d008      	beq.n	8006380 <UART_SetConfig+0x2a8>
 800636e:	e00f      	b.n	8006390 <UART_SetConfig+0x2b8>
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006376:	e022      	b.n	80063be <UART_SetConfig+0x2e6>
 8006378:	2302      	movs	r3, #2
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637e:	e01e      	b.n	80063be <UART_SetConfig+0x2e6>
 8006380:	2304      	movs	r3, #4
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006386:	e01a      	b.n	80063be <UART_SetConfig+0x2e6>
 8006388:	2308      	movs	r3, #8
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638e:	e016      	b.n	80063be <UART_SetConfig+0x2e6>
 8006390:	2310      	movs	r3, #16
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006396:	e012      	b.n	80063be <UART_SetConfig+0x2e6>
 8006398:	efff69f3 	.word	0xefff69f3
 800639c:	40008000 	.word	0x40008000
 80063a0:	40013800 	.word	0x40013800
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40004400 	.word	0x40004400
 80063ac:	40004800 	.word	0x40004800
 80063b0:	40004c00 	.word	0x40004c00
 80063b4:	40005000 	.word	0x40005000
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a9f      	ldr	r2, [pc, #636]	; (8006640 <UART_SetConfig+0x568>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d17a      	bne.n	80064be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d824      	bhi.n	800641a <UART_SetConfig+0x342>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x300>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	0800641b 	.word	0x0800641b
 80063e0:	08006405 	.word	0x08006405
 80063e4:	0800641b 	.word	0x0800641b
 80063e8:	0800640b 	.word	0x0800640b
 80063ec:	0800641b 	.word	0x0800641b
 80063f0:	0800641b 	.word	0x0800641b
 80063f4:	0800641b 	.word	0x0800641b
 80063f8:	08006413 	.word	0x08006413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7fe fc8c 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8006400:	61f8      	str	r0, [r7, #28]
        break;
 8006402:	e010      	b.n	8006426 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006404:	4b8f      	ldr	r3, [pc, #572]	; (8006644 <UART_SetConfig+0x56c>)
 8006406:	61fb      	str	r3, [r7, #28]
        break;
 8006408:	e00d      	b.n	8006426 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640a:	f7fe fbed 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 800640e:	61f8      	str	r0, [r7, #28]
        break;
 8006410:	e009      	b.n	8006426 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	61fb      	str	r3, [r7, #28]
        break;
 8006418:	e005      	b.n	8006426 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80fb 	beq.w	8006624 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	429a      	cmp	r2, r3
 800643c:	d305      	bcc.n	800644a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	429a      	cmp	r2, r3
 8006448:	d903      	bls.n	8006452 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006450:	e0e8      	b.n	8006624 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	2200      	movs	r2, #0
 8006456:	461c      	mov	r4, r3
 8006458:	4615      	mov	r5, r2
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	022b      	lsls	r3, r5, #8
 8006464:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006468:	0222      	lsls	r2, r4, #8
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	6849      	ldr	r1, [r1, #4]
 800646e:	0849      	lsrs	r1, r1, #1
 8006470:	2000      	movs	r0, #0
 8006472:	4688      	mov	r8, r1
 8006474:	4681      	mov	r9, r0
 8006476:	eb12 0a08 	adds.w	sl, r2, r8
 800647a:	eb43 0b09 	adc.w	fp, r3, r9
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648c:	4650      	mov	r0, sl
 800648e:	4659      	mov	r1, fp
 8006490:	f7fa f8d2 	bl	8000638 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4613      	mov	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a2:	d308      	bcc.n	80064b6 <UART_SetConfig+0x3de>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064aa:	d204      	bcs.n	80064b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	e0b6      	b.n	8006624 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064bc:	e0b2      	b.n	8006624 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c6:	d15e      	bne.n	8006586 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d828      	bhi.n	8006522 <UART_SetConfig+0x44a>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <UART_SetConfig+0x400>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006505 	.word	0x08006505
 80064e0:	0800650d 	.word	0x0800650d
 80064e4:	08006523 	.word	0x08006523
 80064e8:	08006513 	.word	0x08006513
 80064ec:	08006523 	.word	0x08006523
 80064f0:	08006523 	.word	0x08006523
 80064f4:	08006523 	.word	0x08006523
 80064f8:	0800651b 	.word	0x0800651b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064fc:	f7fe fc0c 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8006500:	61f8      	str	r0, [r7, #28]
        break;
 8006502:	e014      	b.n	800652e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006504:	f7fe fc1e 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 8006508:	61f8      	str	r0, [r7, #28]
        break;
 800650a:	e010      	b.n	800652e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800650c:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <UART_SetConfig+0x56c>)
 800650e:	61fb      	str	r3, [r7, #28]
        break;
 8006510:	e00d      	b.n	800652e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006512:	f7fe fb69 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8006516:	61f8      	str	r0, [r7, #28]
        break;
 8006518:	e009      	b.n	800652e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651e:	61fb      	str	r3, [r7, #28]
        break;
 8006520:	e005      	b.n	800652e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800652c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d077      	beq.n	8006624 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	005a      	lsls	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	441a      	add	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d916      	bls.n	800657e <UART_SetConfig+0x4a6>
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d212      	bcs.n	800657e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f023 030f 	bic.w	r3, r3, #15
 8006560:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	b29b      	uxth	r3, r3
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	b29a      	uxth	r2, r3
 800656e:	8afb      	ldrh	r3, [r7, #22]
 8006570:	4313      	orrs	r3, r2
 8006572:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	8afa      	ldrh	r2, [r7, #22]
 800657a:	60da      	str	r2, [r3, #12]
 800657c:	e052      	b.n	8006624 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006584:	e04e      	b.n	8006624 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658a:	2b08      	cmp	r3, #8
 800658c:	d827      	bhi.n	80065de <UART_SetConfig+0x506>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x4bc>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065df 	.word	0x080065df
 80065a4:	080065cf 	.word	0x080065cf
 80065a8:	080065df 	.word	0x080065df
 80065ac:	080065df 	.word	0x080065df
 80065b0:	080065df 	.word	0x080065df
 80065b4:	080065d7 	.word	0x080065d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fe fbae 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 80065bc:	61f8      	str	r0, [r7, #28]
        break;
 80065be:	e014      	b.n	80065ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7fe fbc0 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 80065c4:	61f8      	str	r0, [r7, #28]
        break;
 80065c6:	e010      	b.n	80065ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <UART_SetConfig+0x56c>)
 80065ca:	61fb      	str	r3, [r7, #28]
        break;
 80065cc:	e00d      	b.n	80065ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe fb0b 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 80065d2:	61f8      	str	r0, [r7, #28]
        break;
 80065d4:	e009      	b.n	80065ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	61fb      	str	r3, [r7, #28]
        break;
 80065dc:	e005      	b.n	80065ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065e8:	bf00      	nop
    }

    if (pclk != 0U)
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d019      	beq.n	8006624 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	085a      	lsrs	r2, r3, #1
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	441a      	add	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d909      	bls.n	800661e <UART_SetConfig+0x546>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d205      	bcs.n	800661e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	e002      	b.n	8006624 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006630:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006634:	4618      	mov	r0, r3
 8006636:	3728      	adds	r7, #40	; 0x28
 8006638:	46bd      	mov	sp, r7
 800663a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800663e:	bf00      	nop
 8006640:	40008000 	.word	0x40008000
 8006644:	00f42400 	.word	0x00f42400

08006648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01a      	beq.n	800675e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006746:	d10a      	bne.n	800675e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800679c:	f7fc f806 	bl	80027ac <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d10e      	bne.n	80067ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f82d 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e023      	b.n	8006816 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d10e      	bne.n	80067fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f817 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e00d      	b.n	8006816 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b09c      	sub	sp, #112	; 0x70
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682e:	e0a5      	b.n	800697c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	f000 80a1 	beq.w	800697c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683a:	f7fb ffb7 	bl	80027ac <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006846:	429a      	cmp	r2, r3
 8006848:	d302      	bcc.n	8006850 <UART_WaitOnFlagUntilTimeout+0x32>
 800684a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684c:	2b00      	cmp	r3, #0
 800684e:	d13e      	bne.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006864:	667b      	str	r3, [r7, #100]	; 0x64
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006870:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800687c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	663b      	str	r3, [r7, #96]	; 0x60
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80068a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e067      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d04f      	beq.n	800697c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ea:	d147      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800690a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
 8006916:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800691a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f023 0301 	bic.w	r3, r3, #1
 800693e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006948:	623a      	str	r2, [r7, #32]
 800694a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69f9      	ldr	r1, [r7, #28]
 800694e:	6a3a      	ldr	r2, [r7, #32]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	61bb      	str	r3, [r7, #24]
   return(result);
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2220      	movs	r2, #32
 8006966:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e010      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69da      	ldr	r2, [r3, #28]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4013      	ands	r3, r2
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	429a      	cmp	r2, r3
 800698a:	bf0c      	ite	eq
 800698c:	2301      	moveq	r3, #1
 800698e:	2300      	movne	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	429a      	cmp	r2, r3
 8006998:	f43f af4a 	beq.w	8006830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3770      	adds	r7, #112	; 0x70
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a6:	b084      	sub	sp, #16
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	f107 001c 	add.w	r0, r7, #28
 80069b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa6f 	bl	8006ea8 <USB_CoreReset>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80069ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
 80069e0:	e005      	b.n	80069ee <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069fa:	b004      	add	sp, #16
 80069fc:	4770      	bx	lr

080069fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d115      	bne.n	8006a6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a4e:	2001      	movs	r0, #1
 8006a50:	f7fb feb8 	bl	80027c4 <HAL_Delay>
      ms++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa16 	bl	8006e8c <USB_GetMode>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d01e      	beq.n	8006aa4 <USB_SetCurrentMode+0x84>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b31      	cmp	r3, #49	; 0x31
 8006a6a:	d9f0      	bls.n	8006a4e <USB_SetCurrentMode+0x2e>
 8006a6c:	e01a      	b.n	8006aa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d115      	bne.n	8006aa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a80:	2001      	movs	r0, #1
 8006a82:	f7fb fe9f 	bl	80027c4 <HAL_Delay>
      ms++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f9fd 	bl	8006e8c <USB_GetMode>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <USB_SetCurrentMode+0x84>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b31      	cmp	r3, #49	; 0x31
 8006a9c:	d9f0      	bls.n	8006a80 <USB_SetCurrentMode+0x60>
 8006a9e:	e001      	b.n	8006aa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e005      	b.n	8006ab0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b32      	cmp	r3, #50	; 0x32
 8006aa8:	d101      	bne.n	8006aae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab8:	b084      	sub	sp, #16
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	e009      	b.n	8006aec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3340      	adds	r3, #64	; 0x40
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0e      	cmp	r3, #14
 8006af0:	d9f2      	bls.n	8006ad8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11c      	bne.n	8006b32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b06:	f043 0302 	orr.w	r3, r3, #2
 8006b0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e005      	b.n	8006b3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b44:	461a      	mov	r2, r3
 8006b46:	2300      	movs	r3, #0
 8006b48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b50:	4619      	mov	r1, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	461a      	mov	r2, r3
 8006b5a:	680b      	ldr	r3, [r1, #0]
 8006b5c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b5e:	2103      	movs	r1, #3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f959 	bl	8006e18 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b66:	2110      	movs	r1, #16
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f8f1 	bl	8006d50 <USB_FlushTxFifo>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f91d 	bl	8006db8 <USB_FlushRxFifo>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	e043      	b.n	8006c3a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc8:	d118      	bne.n	8006bfc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	e013      	b.n	8006c0e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e008      	b.n	8006c0e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	3301      	adds	r3, #1
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d3b7      	bcc.n	8006bb2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	e043      	b.n	8006cd0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c5e:	d118      	bne.n	8006c92 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	461a      	mov	r2, r3
 8006c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	e013      	b.n	8006ca4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e008      	b.n	8006ca4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3b7      	bcc.n	8006c48 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f043 0210 	orr.w	r2, r3, #16
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <USB_DevInit+0x294>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f043 0208 	orr.w	r2, r3, #8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d32:	f043 0304 	orr.w	r3, r3, #4
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d46:	b004      	add	sp, #16
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	803c3800 	.word	0x803c3800

08006d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3301      	adds	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <USB_FlushTxFifo+0x64>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d901      	bls.n	8006d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e01b      	b.n	8006da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	daf2      	bge.n	8006d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	019b      	lsls	r3, r3, #6
 8006d80:	f043 0220 	orr.w	r2, r3, #32
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4a08      	ldr	r2, [pc, #32]	; (8006db4 <USB_FlushTxFifo+0x64>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e006      	b.n	8006da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d0f0      	beq.n	8006d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	00030d40 	.word	0x00030d40

08006db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a11      	ldr	r2, [pc, #68]	; (8006e14 <USB_FlushRxFifo+0x5c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e018      	b.n	8006e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	daf2      	bge.n	8006dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2210      	movs	r2, #16
 8006de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <USB_FlushRxFifo+0x5c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e006      	b.n	8006e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d0f0      	beq.n	8006de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	00030d40 	.word	0x00030d40

08006e18 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e78:	f043 0302 	orr.w	r3, r3, #2
 8006e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0301 	and.w	r3, r3, #1
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <USB_CoreReset+0x64>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d901      	bls.n	8006ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e01b      	b.n	8006efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	daf2      	bge.n	8006eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f043 0201 	orr.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <USB_CoreReset+0x64>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e006      	b.n	8006efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d0f0      	beq.n	8006ede <USB_CoreReset+0x36>

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	00030d40 	.word	0x00030d40

08006f10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f22:	2b84      	cmp	r3, #132	; 0x84
 8006f24:	d005      	beq.n	8006f32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3303      	adds	r3, #3
 8006f30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f46:	f3ef 8305 	mrs	r3, IPSR
 8006f4a:	607b      	str	r3, [r7, #4]
  return(result);
 8006f4c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf14      	ite	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	2300      	moveq	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f68:	f001 f926 	bl	80081b8 <vTaskStartScheduler>
  
  return osOK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f74:	b089      	sub	sp, #36	; 0x24
 8006f76:	af04      	add	r7, sp, #16
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d020      	beq.n	8006fc6 <osThreadCreate+0x54>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01c      	beq.n	8006fc6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685c      	ldr	r4, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681d      	ldr	r5, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691e      	ldr	r6, [r3, #16]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff ffb6 	bl	8006f10 <makeFreeRtosPriority>
 8006fa4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fae:	9202      	str	r2, [sp, #8]
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	9100      	str	r1, [sp, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 ff1e 	bl	8007dfc <xTaskCreateStatic>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e01c      	b.n	8007000 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685c      	ldr	r4, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fd2:	b29e      	uxth	r6, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff ff98 	bl	8006f10 <makeFreeRtosPriority>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	f107 030c 	add.w	r3, r7, #12
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	9200      	str	r2, [sp, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	4632      	mov	r2, r6
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 ff60 	bl	8007eb6 <xTaskCreate>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e000      	b.n	8007002 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007000:	68fb      	ldr	r3, [r7, #12]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800700a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <osDelay+0x16>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	e000      	b.n	8007022 <osDelay+0x18>
 8007020:	2301      	movs	r3, #1
 8007022:	4618      	mov	r0, r3
 8007024:	f001 f894 	bl	8008150 <vTaskDelay>
  
  return osOK;
 8007028:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af02      	add	r7, sp, #8
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00f      	beq.n	8007064 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10a      	bne.n	8007060 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2203      	movs	r2, #3
 8007050:	9200      	str	r2, [sp, #0]
 8007052:	2200      	movs	r2, #0
 8007054:	2100      	movs	r1, #0
 8007056:	2001      	movs	r0, #1
 8007058:	f000 f9be 	bl	80073d8 <xQueueGenericCreateStatic>
 800705c:	4603      	mov	r3, r0
 800705e:	e016      	b.n	800708e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	e014      	b.n	800708e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d110      	bne.n	800708c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800706a:	2203      	movs	r2, #3
 800706c:	2100      	movs	r1, #0
 800706e:	2001      	movs	r0, #1
 8007070:	f000 fa2a 	bl	80074c8 <xQueueGenericCreate>
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <osSemaphoreCreate+0x56>
 800707c:	2300      	movs	r3, #0
 800707e:	2200      	movs	r2, #0
 8007080:	2100      	movs	r1, #0
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fa7a 	bl	800757c <xQueueGenericSend>
      return sema;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	e000      	b.n	800708e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800708c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	e03a      	b.n	8007126 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ba:	d103      	bne.n	80070c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80070bc:	f04f 33ff 	mov.w	r3, #4294967295
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e009      	b.n	80070d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <osSemaphoreWait+0x40>
      ticks = 1;
 80070d4:	2301      	movs	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80070d8:	f7ff ff32 	bl	8006f40 <inHandlerMode>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d017      	beq.n	8007112 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80070e2:	f107 0308 	add.w	r3, r7, #8
 80070e6:	461a      	mov	r2, r3
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fcde 	bl	8007aac <xQueueReceiveFromISR>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d001      	beq.n	80070fa <osSemaphoreWait+0x62>
      return osErrorOS;
 80070f6:	23ff      	movs	r3, #255	; 0xff
 80070f8:	e015      	b.n	8007126 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d011      	beq.n	8007124 <osSemaphoreWait+0x8c>
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <osSemaphoreWait+0x98>)
 8007102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	e008      	b.n	8007124 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fbbd 	bl	8007894 <xQueueSemaphoreTake>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d001      	beq.n	8007124 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007120:	23ff      	movs	r3, #255	; 0xff
 8007122:	e000      	b.n	8007126 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007140:	2300      	movs	r3, #0
 8007142:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007144:	f7ff fefc 	bl	8006f40 <inHandlerMode>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800714e:	f107 0308 	add.w	r3, r7, #8
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb0f 	bl	8007778 <xQueueGiveFromISR>
 800715a:	4603      	mov	r3, r0
 800715c:	2b01      	cmp	r3, #1
 800715e:	d001      	beq.n	8007164 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007160:	23ff      	movs	r3, #255	; 0xff
 8007162:	e017      	b.n	8007194 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d013      	beq.n	8007192 <osSemaphoreRelease+0x5e>
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <osSemaphoreRelease+0x68>)
 800716c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	e00a      	b.n	8007192 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800717c:	2300      	movs	r3, #0
 800717e:	2200      	movs	r2, #0
 8007180:	2100      	movs	r1, #0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f9fa 	bl	800757c <xQueueGenericSend>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d001      	beq.n	8007192 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800718e:	23ff      	movs	r3, #255	; 0xff
 8007190:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007192:	68fb      	ldr	r3, [r7, #12]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0208 	add.w	r2, r3, #8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f103 0208 	add.w	r2, r3, #8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f103 0208 	add.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d103      	bne.n	8007262 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	e00c      	b.n	800727c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3308      	adds	r3, #8
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e002      	b.n	8007270 <vListInsert+0x2e>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	d2f6      	bcs.n	800726a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6892      	ldr	r2, [r2, #8]
 80072ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6852      	ldr	r2, [r2, #4]
 80072d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d103      	bne.n	80072e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007332:	f001 fe9f 	bl	8009074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007342:	fb01 f303 	mul.w	r3, r1, r3
 8007346:	441a      	add	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	3b01      	subs	r3, #1
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	441a      	add	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	22ff      	movs	r2, #255	; 0xff
 8007376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	22ff      	movs	r2, #255	; 0xff
 800737e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d114      	bne.n	80073b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01a      	beq.n	80073c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3310      	adds	r3, #16
 8007394:	4618      	mov	r0, r3
 8007396:	f001 f961 	bl	800865c <xTaskRemoveFromEventList>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d012      	beq.n	80073c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <xQueueGenericReset+0xcc>)
 80073a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	e009      	b.n	80073c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3310      	adds	r3, #16
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fef2 	bl	80071a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff feed 	bl	80071a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073c6:	f001 fe85 	bl	80090d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073ca:	2301      	movs	r3, #1
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08e      	sub	sp, #56	; 0x38
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <xQueueGenericCreateStatic+0x52>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <xQueueGenericCreateStatic+0x56>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueGenericCreateStatic+0x58>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	623b      	str	r3, [r7, #32]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <xQueueGenericCreateStatic+0x7e>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <xQueueGenericCreateStatic+0x82>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <xQueueGenericCreateStatic+0x84>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	61fb      	str	r3, [r7, #28]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007476:	2348      	movs	r3, #72	; 0x48
 8007478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b48      	cmp	r3, #72	; 0x48
 800747e:	d00a      	beq.n	8007496 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	61bb      	str	r3, [r7, #24]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f83f 	bl	800753c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	; 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	613b      	str	r3, [r7, #16]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
 80074fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	3348      	adds	r3, #72	; 0x48
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fed9 	bl	80092b8 <pvPortMalloc>
 8007506:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d011      	beq.n	8007532 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	3348      	adds	r3, #72	; 0x48
 8007516:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007520:	79fa      	ldrb	r2, [r7, #7]
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	4613      	mov	r3, r2
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f805 	bl	800753c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007532:	69bb      	ldr	r3, [r7, #24]
	}
 8007534:	4618      	mov	r0, r3
 8007536:	3720      	adds	r7, #32
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e002      	b.n	800755e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800756a:	2101      	movs	r1, #1
 800756c:	69b8      	ldr	r0, [r7, #24]
 800756e:	f7ff fecb 	bl	8007308 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	; 0x38
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800758a:	2300      	movs	r3, #0
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <xQueueGenericSend+0x32>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d103      	bne.n	80075bc <xQueueGenericSend+0x40>
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <xQueueGenericSend+0x44>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <xQueueGenericSend+0x46>
 80075c0:	2300      	movs	r3, #0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <xQueueGenericSend+0x60>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d103      	bne.n	80075ea <xQueueGenericSend+0x6e>
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <xQueueGenericSend+0x72>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericSend+0x74>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xQueueGenericSend+0x8e>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	623b      	str	r3, [r7, #32]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800760a:	f001 f9e7 	bl	80089dc <xTaskGetSchedulerState>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <xQueueGenericSend+0x9e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <xQueueGenericSend+0xa2>
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <xQueueGenericSend+0xa4>
 800761e:	2300      	movs	r3, #0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10a      	bne.n	800763a <xQueueGenericSend+0xbe>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	61fb      	str	r3, [r7, #28]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800763a:	f001 fd1b 	bl	8009074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007646:	429a      	cmp	r2, r3
 8007648:	d302      	bcc.n	8007650 <xQueueGenericSend+0xd4>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d129      	bne.n	80076a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007656:	f000 fac1 	bl	8007bdc <prvCopyDataToQueue>
 800765a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	3324      	adds	r3, #36	; 0x24
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fff7 	bl	800865c <xTaskRemoveFromEventList>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d013      	beq.n	800769c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007674:	4b3f      	ldr	r3, [pc, #252]	; (8007774 <xQueueGenericSend+0x1f8>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	e00a      	b.n	800769c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d007      	beq.n	800769c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800768c:	4b39      	ldr	r3, [pc, #228]	; (8007774 <xQueueGenericSend+0x1f8>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800769c:	f001 fd1a 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e063      	b.n	800776c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076aa:	f001 fd13 	bl	80090d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	e05c      	b.n	800776c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076b8:	f107 0314 	add.w	r3, r7, #20
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 f82f 	bl	8008720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076c6:	f001 fd05 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076ca:	f000 fddf 	bl	800828c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ce:	f001 fcd1 	bl	8009074 <vPortEnterCritical>
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d8:	b25b      	sxtb	r3, r3
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076de:	d103      	bne.n	80076e8 <xQueueGenericSend+0x16c>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ee:	b25b      	sxtb	r3, r3
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d103      	bne.n	80076fe <xQueueGenericSend+0x182>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fe:	f001 fce9 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007702:	1d3a      	adds	r2, r7, #4
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f001 f81e 	bl	800874c <xTaskCheckForTimeOut>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d124      	bne.n	8007760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007718:	f000 fb58 	bl	8007dcc <prvIsQueueFull>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	3310      	adds	r3, #16
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f000 ff72 	bl	8008614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007732:	f000 fae3 	bl	8007cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007736:	f000 fdb7 	bl	80082a8 <xTaskResumeAll>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f af7c 	bne.w	800763a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <xQueueGenericSend+0x1f8>)
 8007744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	e772      	b.n	800763a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007756:	f000 fad1 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800775a:	f000 fda5 	bl	80082a8 <xTaskResumeAll>
 800775e:	e76c      	b.n	800763a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007762:	f000 facb 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007766:	f000 fd9f 	bl	80082a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800776a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800776c:	4618      	mov	r0, r3
 800776e:	3738      	adds	r7, #56	; 0x38
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08e      	sub	sp, #56	; 0x38
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	623b      	str	r3, [r7, #32]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	61fb      	str	r3, [r7, #28]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <xQueueGiveFromISR+0x58>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xQueueGiveFromISR+0x5c>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xQueueGiveFromISR+0x5e>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61bb      	str	r3, [r7, #24]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077f0:	f001 fd22 	bl	8009238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077f4:	f3ef 8211 	mrs	r2, BASEPRI
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	617a      	str	r2, [r7, #20]
 800780a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800780c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781c:	429a      	cmp	r2, r3
 800781e:	d22b      	bcs.n	8007878 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783a:	d112      	bne.n	8007862 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	2b00      	cmp	r3, #0
 8007842:	d016      	beq.n	8007872 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	3324      	adds	r3, #36	; 0x24
 8007848:	4618      	mov	r0, r3
 800784a:	f000 ff07 	bl	800865c <xTaskRemoveFromEventList>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00e      	beq.n	8007872 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00b      	beq.n	8007872 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e007      	b.n	8007872 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007866:	3301      	adds	r3, #1
 8007868:	b2db      	uxtb	r3, r3
 800786a:	b25a      	sxtb	r2, r3
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007872:	2301      	movs	r3, #1
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
 8007876:	e001      	b.n	800787c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007878:	2300      	movs	r3, #0
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007886:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800788a:	4618      	mov	r0, r3
 800788c:	3738      	adds	r7, #56	; 0x38
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08e      	sub	sp, #56	; 0x38
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800789e:	2300      	movs	r3, #0
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	623b      	str	r3, [r7, #32]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	61fb      	str	r3, [r7, #28]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e4:	f001 f87a 	bl	80089dc <xTaskGetSchedulerState>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <xQueueSemaphoreTake+0x60>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <xQueueSemaphoreTake+0x64>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <xQueueSemaphoreTake+0x66>
 80078f8:	2300      	movs	r3, #0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	61bb      	str	r3, [r7, #24]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007914:	f001 fbae 	bl	8009074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	2b00      	cmp	r3, #0
 8007922:	d024      	beq.n	800796e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	1e5a      	subs	r2, r3, #1
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007934:	f001 f9fa 	bl	8008d2c <pvTaskIncrementMutexHeldCount>
 8007938:	4602      	mov	r2, r0
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00f      	beq.n	8007966 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	3310      	adds	r3, #16
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fe86 	bl	800865c <xTaskRemoveFromEventList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007956:	4b54      	ldr	r3, [pc, #336]	; (8007aa8 <xQueueSemaphoreTake+0x214>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007966:	f001 fbb5 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 800796a:	2301      	movs	r3, #1
 800796c:	e097      	b.n	8007a9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d111      	bne.n	8007998 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	617b      	str	r3, [r7, #20]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007990:	f001 fba0 	bl	80090d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007994:	2300      	movs	r3, #0
 8007996:	e082      	b.n	8007a9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 febc 	bl	8008720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079ac:	f001 fb92 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079b0:	f000 fc6c 	bl	800828c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079b4:	f001 fb5e 	bl	8009074 <vPortEnterCritical>
 80079b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079be:	b25b      	sxtb	r3, r3
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d103      	bne.n	80079ce <xQueueSemaphoreTake+0x13a>
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d4:	b25b      	sxtb	r3, r3
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d103      	bne.n	80079e4 <xQueueSemaphoreTake+0x150>
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e4:	f001 fb76 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079e8:	463a      	mov	r2, r7
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 feab 	bl	800874c <xTaskCheckForTimeOut>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d132      	bne.n	8007a62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079fe:	f000 f9cf 	bl	8007da0 <prvIsQueueEmpty>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d026      	beq.n	8007a56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a10:	f001 fb30 	bl	8009074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fffd 	bl	8008a18 <xTaskPriorityInherit>
 8007a1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a20:	f001 fb58 	bl	80090d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	3324      	adds	r3, #36	; 0x24
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fdf1 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a34:	f000 f962 	bl	8007cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a38:	f000 fc36 	bl	80082a8 <xTaskResumeAll>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f47f af68 	bne.w	8007914 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a44:	4b18      	ldr	r3, [pc, #96]	; (8007aa8 <xQueueSemaphoreTake+0x214>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	e75e      	b.n	8007914 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a58:	f000 f950 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a5c:	f000 fc24 	bl	80082a8 <xTaskResumeAll>
 8007a60:	e758      	b.n	8007914 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a64:	f000 f94a 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a68:	f000 fc1e 	bl	80082a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a6e:	f000 f997 	bl	8007da0 <prvIsQueueEmpty>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f43f af4d 	beq.w	8007914 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00d      	beq.n	8007a9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007a80:	f001 faf8 	bl	8009074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a86:	f000 f891 	bl	8007bac <prvGetDisinheritPriorityAfterTimeout>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 f8bc 	bl	8008c10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a98:	f001 fb1c 	bl	80090d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3738      	adds	r7, #56	; 0x38
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08e      	sub	sp, #56	; 0x38
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	623b      	str	r3, [r7, #32]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <xQueueReceiveFromISR+0x3a>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <xQueueReceiveFromISR+0x3e>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <xQueueReceiveFromISR+0x40>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	61fb      	str	r3, [r7, #28]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b06:	f001 fb97 	bl	8009238 <vPortValidateInterruptPriority>
	__asm volatile
 8007b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	61ba      	str	r2, [r7, #24]
 8007b20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02f      	beq.n	8007b92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b40:	f000 f8b6 	bl	8007cb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	1e5a      	subs	r2, r3, #1
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d112      	bne.n	8007b7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d016      	beq.n	8007b8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	3310      	adds	r3, #16
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fd7a 	bl	800865c <xTaskRemoveFromEventList>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00e      	beq.n	8007b8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e007      	b.n	8007b8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b80:	3301      	adds	r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	b25a      	sxtb	r2, r3
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b90:	e001      	b.n	8007b96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f383 8811 	msr	BASEPRI, r3
}
 8007ba0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3738      	adds	r7, #56	; 0x38
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f1c3 0307 	rsb	r3, r3, #7
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	e001      	b.n	8007bce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bce:	68fb      	ldr	r3, [r7, #12]
	}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d14d      	bne.n	8007c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 ff7c 	bl	8008b04 <xTaskPriorityDisinherit>
 8007c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	e043      	b.n	8007c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d119      	bne.n	8007c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6858      	ldr	r0, [r3, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	461a      	mov	r2, r3
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	f001 fd5c 	bl	80096e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d32b      	bcc.n	8007c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	605a      	str	r2, [r3, #4]
 8007c4e:	e026      	b.n	8007c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68d8      	ldr	r0, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	f001 fd42 	bl	80096e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	425b      	negs	r3, r3
 8007c6a:	441a      	add	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d207      	bcs.n	8007c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	425b      	negs	r3, r3
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d105      	bne.n	8007c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d303      	bcc.n	8007ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68d9      	ldr	r1, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	461a      	mov	r2, r3
 8007cee:	6838      	ldr	r0, [r7, #0]
 8007cf0:	f001 fcf8 	bl	80096e4 <memcpy>
	}
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d04:	f001 f9b6 	bl	8009074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d10:	e011      	b.n	8007d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d012      	beq.n	8007d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3324      	adds	r3, #36	; 0x24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fc9c 	bl	800865c <xTaskRemoveFromEventList>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d2a:	f000 fd71 	bl	8008810 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dce9      	bgt.n	8007d12 <prvUnlockQueue+0x16>
 8007d3e:	e000      	b.n	8007d42 <prvUnlockQueue+0x46>
					break;
 8007d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d4a:	f001 f9c3 	bl	80090d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d4e:	f001 f991 	bl	8009074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d5a:	e011      	b.n	8007d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d012      	beq.n	8007d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3310      	adds	r3, #16
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fc77 	bl	800865c <xTaskRemoveFromEventList>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d74:	f000 fd4c 	bl	8008810 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dce9      	bgt.n	8007d5c <prvUnlockQueue+0x60>
 8007d88:	e000      	b.n	8007d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	22ff      	movs	r2, #255	; 0xff
 8007d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d94:	f001 f99e 	bl	80090d4 <vPortExitCritical>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da8:	f001 f964 	bl	8009074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e001      	b.n	8007dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dbe:	f001 f989 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dd4:	f001 f94e 	bl	8009074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d102      	bne.n	8007dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e001      	b.n	8007dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dee:	f001 f971 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8007df2:	68fb      	ldr	r3, [r7, #12]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08e      	sub	sp, #56	; 0x38
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	623b      	str	r3, [r7, #32]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	61fb      	str	r3, [r7, #28]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e42:	23b4      	movs	r3, #180	; 0xb4
 8007e44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2bb4      	cmp	r3, #180	; 0xb4
 8007e4a:	d00a      	beq.n	8007e62 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61bb      	str	r3, [r7, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01e      	beq.n	8007ea8 <xTaskCreateStatic+0xac>
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e82:	2300      	movs	r3, #0
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	9302      	str	r3, [sp, #8]
 8007e8a:	f107 0314 	add.w	r3, r7, #20
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f850 	bl	8007f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ea2:	f000 f8eb 	bl	800807c <prvAddNewTaskToReadyList>
 8007ea6:	e001      	b.n	8007eac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eac:	697b      	ldr	r3, [r7, #20]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3728      	adds	r7, #40	; 0x28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b08c      	sub	sp, #48	; 0x30
 8007eba:	af04      	add	r7, sp, #16
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 f9f4 	bl	80092b8 <pvPortMalloc>
 8007ed0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ed8:	20b4      	movs	r0, #180	; 0xb4
 8007eda:	f001 f9ed 	bl	80092b8 <pvPortMalloc>
 8007ede:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
 8007eec:	e005      	b.n	8007efa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eee:	6978      	ldr	r0, [r7, #20]
 8007ef0:	f001 faae 	bl	8009450 <vPortFree>
 8007ef4:	e001      	b.n	8007efa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d017      	beq.n	8007f30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f08:	88fa      	ldrh	r2, [r7, #6]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9303      	str	r3, [sp, #12]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	9302      	str	r3, [sp, #8]
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f80e 	bl	8007f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f24:	69f8      	ldr	r0, [r7, #28]
 8007f26:	f000 f8a9 	bl	800807c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e002      	b.n	8007f36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f36:	69bb      	ldr	r3, [r7, #24]
	}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	617b      	str	r3, [r7, #20]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01f      	beq.n	8007fce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e012      	b.n	8007fba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	7819      	ldrb	r1, [r3, #0]
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3334      	adds	r3, #52	; 0x34
 8007fa4:	460a      	mov	r2, r1
 8007fa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b0f      	cmp	r3, #15
 8007fbe:	d9e9      	bls.n	8007f94 <prvInitialiseNewTask+0x54>
 8007fc0:	e000      	b.n	8007fc4 <prvInitialiseNewTask+0x84>
			{
				break;
 8007fc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fcc:	e003      	b.n	8007fd6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	2b06      	cmp	r3, #6
 8007fda:	d901      	bls.n	8007fe0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fdc:	2306      	movs	r3, #6
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff f8f2 	bl	80071e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	3318      	adds	r3, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff f8ed 	bl	80071e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	f1c3 0207 	rsb	r2, r3, #7
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	334c      	adds	r3, #76	; 0x4c
 8008030:	2260      	movs	r2, #96	; 0x60
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f001 fb63 	bl	8009700 <memset>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <prvInitialiseNewTask+0x130>)
 800803e:	651a      	str	r2, [r3, #80]	; 0x50
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	4a0c      	ldr	r2, [pc, #48]	; (8008074 <prvInitialiseNewTask+0x134>)
 8008044:	655a      	str	r2, [r3, #84]	; 0x54
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	4a0b      	ldr	r2, [pc, #44]	; (8008078 <prvInitialiseNewTask+0x138>)
 800804a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	68f9      	ldr	r1, [r7, #12]
 8008050:	69b8      	ldr	r0, [r7, #24]
 8008052:	f000 fee5 	bl	8008e20 <pxPortInitialiseStack>
 8008056:	4602      	mov	r2, r0
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008066:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008068:	bf00      	nop
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	0800a2fc 	.word	0x0800a2fc
 8008074:	0800a31c 	.word	0x0800a31c
 8008078:	0800a2dc 	.word	0x0800a2dc

0800807c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008084:	f000 fff6 	bl	8009074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008088:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <prvAddNewTaskToReadyList+0xb8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	4a29      	ldr	r2, [pc, #164]	; (8008134 <prvAddNewTaskToReadyList+0xb8>)
 8008090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008092:	4b29      	ldr	r3, [pc, #164]	; (8008138 <prvAddNewTaskToReadyList+0xbc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800809a:	4a27      	ldr	r2, [pc, #156]	; (8008138 <prvAddNewTaskToReadyList+0xbc>)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080a0:	4b24      	ldr	r3, [pc, #144]	; (8008134 <prvAddNewTaskToReadyList+0xb8>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d110      	bne.n	80080ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080a8:	f000 fbd6 	bl	8008858 <prvInitialiseTaskLists>
 80080ac:	e00d      	b.n	80080ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080ae:	4b23      	ldr	r3, [pc, #140]	; (800813c <prvAddNewTaskToReadyList+0xc0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080b6:	4b20      	ldr	r3, [pc, #128]	; (8008138 <prvAddNewTaskToReadyList+0xbc>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d802      	bhi.n	80080ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080c4:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <prvAddNewTaskToReadyList+0xbc>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080ca:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <prvAddNewTaskToReadyList+0xc4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3301      	adds	r3, #1
 80080d0:	4a1b      	ldr	r2, [pc, #108]	; (8008140 <prvAddNewTaskToReadyList+0xc4>)
 80080d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	2201      	movs	r2, #1
 80080da:	409a      	lsls	r2, r3
 80080dc:	4b19      	ldr	r3, [pc, #100]	; (8008144 <prvAddNewTaskToReadyList+0xc8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	4a18      	ldr	r2, [pc, #96]	; (8008144 <prvAddNewTaskToReadyList+0xc8>)
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4a15      	ldr	r2, [pc, #84]	; (8008148 <prvAddNewTaskToReadyList+0xcc>)
 80080f4:	441a      	add	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7ff f87c 	bl	80071fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008102:	f000 ffe7 	bl	80090d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <prvAddNewTaskToReadyList+0xc0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00e      	beq.n	800812c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <prvAddNewTaskToReadyList+0xbc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	429a      	cmp	r2, r3
 800811a:	d207      	bcs.n	800812c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800811c:	4b0b      	ldr	r3, [pc, #44]	; (800814c <prvAddNewTaskToReadyList+0xd0>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000f94 	.word	0x20000f94
 8008138:	20000e94 	.word	0x20000e94
 800813c:	20000fa0 	.word	0x20000fa0
 8008140:	20000fb0 	.word	0x20000fb0
 8008144:	20000f9c 	.word	0x20000f9c
 8008148:	20000e98 	.word	0x20000e98
 800814c:	e000ed04 	.word	0xe000ed04

08008150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d017      	beq.n	8008192 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008162:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <vTaskDelay+0x60>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <vTaskDelay+0x30>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	60bb      	str	r3, [r7, #8]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008180:	f000 f884 	bl	800828c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008184:	2100      	movs	r1, #0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fde4 	bl	8008d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800818c:	f000 f88c 	bl	80082a8 <xTaskResumeAll>
 8008190:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d107      	bne.n	80081a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <vTaskDelay+0x64>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000fbc 	.word	0x20000fbc
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081c6:	463a      	mov	r2, r7
 80081c8:	1d39      	adds	r1, r7, #4
 80081ca:	f107 0308 	add.w	r3, r7, #8
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7f8 fbb4 	bl	800093c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	9202      	str	r2, [sp, #8]
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	2300      	movs	r3, #0
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	2300      	movs	r3, #0
 80081e4:	460a      	mov	r2, r1
 80081e6:	4921      	ldr	r1, [pc, #132]	; (800826c <vTaskStartScheduler+0xb4>)
 80081e8:	4821      	ldr	r0, [pc, #132]	; (8008270 <vTaskStartScheduler+0xb8>)
 80081ea:	f7ff fe07 	bl	8007dfc <xTaskCreateStatic>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4a20      	ldr	r2, [pc, #128]	; (8008274 <vTaskStartScheduler+0xbc>)
 80081f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f4:	4b1f      	ldr	r3, [pc, #124]	; (8008274 <vTaskStartScheduler+0xbc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e001      	b.n	8008206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d11b      	bne.n	8008244 <vTaskStartScheduler+0x8c>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	613b      	str	r3, [r7, #16]
}
 800821e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <vTaskStartScheduler+0xc0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	334c      	adds	r3, #76	; 0x4c
 8008226:	4a15      	ldr	r2, [pc, #84]	; (800827c <vTaskStartScheduler+0xc4>)
 8008228:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800822a:	4b15      	ldr	r3, [pc, #84]	; (8008280 <vTaskStartScheduler+0xc8>)
 800822c:	f04f 32ff 	mov.w	r2, #4294967295
 8008230:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008232:	4b14      	ldr	r3, [pc, #80]	; (8008284 <vTaskStartScheduler+0xcc>)
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008238:	4b13      	ldr	r3, [pc, #76]	; (8008288 <vTaskStartScheduler+0xd0>)
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800823e:	f000 fe77 	bl	8008f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008242:	e00e      	b.n	8008262 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d10a      	bne.n	8008262 <vTaskStartScheduler+0xaa>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	60fb      	str	r3, [r7, #12]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <vTaskStartScheduler+0xa8>
}
 8008262:	bf00      	nop
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	0800a28c 	.word	0x0800a28c
 8008270:	08008829 	.word	0x08008829
 8008274:	20000fb8 	.word	0x20000fb8
 8008278:	20000e94 	.word	0x20000e94
 800827c:	2000006c 	.word	0x2000006c
 8008280:	20000fb4 	.word	0x20000fb4
 8008284:	20000fa0 	.word	0x20000fa0
 8008288:	20000f98 	.word	0x20000f98

0800828c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008290:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <vTaskSuspendAll+0x18>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a03      	ldr	r2, [pc, #12]	; (80082a4 <vTaskSuspendAll+0x18>)
 8008298:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800829a:	bf00      	nop
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	20000fbc 	.word	0x20000fbc

080082a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082b6:	4b41      	ldr	r3, [pc, #260]	; (80083bc <xTaskResumeAll+0x114>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	603b      	str	r3, [r7, #0]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082d4:	f000 fece 	bl	8009074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082d8:	4b38      	ldr	r3, [pc, #224]	; (80083bc <xTaskResumeAll+0x114>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4a37      	ldr	r2, [pc, #220]	; (80083bc <xTaskResumeAll+0x114>)
 80082e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <xTaskResumeAll+0x114>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d161      	bne.n	80083ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082ea:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <xTaskResumeAll+0x118>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d05d      	beq.n	80083ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082f2:	e02e      	b.n	8008352 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f4:	4b33      	ldr	r3, [pc, #204]	; (80083c4 <xTaskResumeAll+0x11c>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3318      	adds	r3, #24
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe ffd7 	bl	80072b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3304      	adds	r3, #4
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe ffd2 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	2201      	movs	r2, #1
 8008316:	409a      	lsls	r2, r3
 8008318:	4b2b      	ldr	r3, [pc, #172]	; (80083c8 <xTaskResumeAll+0x120>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4313      	orrs	r3, r2
 800831e:	4a2a      	ldr	r2, [pc, #168]	; (80083c8 <xTaskResumeAll+0x120>)
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <xTaskResumeAll+0x124>)
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7fe ff5e 	bl	80071fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	4b23      	ldr	r3, [pc, #140]	; (80083d0 <xTaskResumeAll+0x128>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	429a      	cmp	r2, r3
 800834a:	d302      	bcc.n	8008352 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800834c:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <xTaskResumeAll+0x12c>)
 800834e:	2201      	movs	r2, #1
 8008350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008352:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <xTaskResumeAll+0x11c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1cc      	bne.n	80082f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008360:	f000 fb1c 	bl	800899c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008364:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <xTaskResumeAll+0x130>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d010      	beq.n	8008392 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008370:	f000 f836 	bl	80083e0 <xTaskIncrementTick>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800837a:	4b16      	ldr	r3, [pc, #88]	; (80083d4 <xTaskResumeAll+0x12c>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3b01      	subs	r3, #1
 8008384:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f1      	bne.n	8008370 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800838c:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <xTaskResumeAll+0x130>)
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008392:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <xTaskResumeAll+0x12c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800839a:	2301      	movs	r3, #1
 800839c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <xTaskResumeAll+0x134>)
 80083a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083ae:	f000 fe91 	bl	80090d4 <vPortExitCritical>

	return xAlreadyYielded;
 80083b2:	68bb      	ldr	r3, [r7, #8]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000fbc 	.word	0x20000fbc
 80083c0:	20000f94 	.word	0x20000f94
 80083c4:	20000f54 	.word	0x20000f54
 80083c8:	20000f9c 	.word	0x20000f9c
 80083cc:	20000e98 	.word	0x20000e98
 80083d0:	20000e94 	.word	0x20000e94
 80083d4:	20000fa8 	.word	0x20000fa8
 80083d8:	20000fa4 	.word	0x20000fa4
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ea:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <xTaskIncrementTick+0x144>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 808e 	bne.w	8008510 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f4:	4b4c      	ldr	r3, [pc, #304]	; (8008528 <xTaskIncrementTick+0x148>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083fc:	4a4a      	ldr	r2, [pc, #296]	; (8008528 <xTaskIncrementTick+0x148>)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d120      	bne.n	800844a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008408:	4b48      	ldr	r3, [pc, #288]	; (800852c <xTaskIncrementTick+0x14c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <xTaskIncrementTick+0x48>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	603b      	str	r3, [r7, #0]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <xTaskIncrementTick+0x46>
 8008428:	4b40      	ldr	r3, [pc, #256]	; (800852c <xTaskIncrementTick+0x14c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	4b40      	ldr	r3, [pc, #256]	; (8008530 <xTaskIncrementTick+0x150>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a3e      	ldr	r2, [pc, #248]	; (800852c <xTaskIncrementTick+0x14c>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	4a3e      	ldr	r2, [pc, #248]	; (8008530 <xTaskIncrementTick+0x150>)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	4b3d      	ldr	r3, [pc, #244]	; (8008534 <xTaskIncrementTick+0x154>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3301      	adds	r3, #1
 8008442:	4a3c      	ldr	r2, [pc, #240]	; (8008534 <xTaskIncrementTick+0x154>)
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	f000 faa9 	bl	800899c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800844a:	4b3b      	ldr	r3, [pc, #236]	; (8008538 <xTaskIncrementTick+0x158>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	429a      	cmp	r2, r3
 8008452:	d348      	bcc.n	80084e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008454:	4b35      	ldr	r3, [pc, #212]	; (800852c <xTaskIncrementTick+0x14c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845e:	4b36      	ldr	r3, [pc, #216]	; (8008538 <xTaskIncrementTick+0x158>)
 8008460:	f04f 32ff 	mov.w	r2, #4294967295
 8008464:	601a      	str	r2, [r3, #0]
					break;
 8008466:	e03e      	b.n	80084e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008468:	4b30      	ldr	r3, [pc, #192]	; (800852c <xTaskIncrementTick+0x14c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d203      	bcs.n	8008488 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008480:	4a2d      	ldr	r2, [pc, #180]	; (8008538 <xTaskIncrementTick+0x158>)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008486:	e02e      	b.n	80084e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	3304      	adds	r3, #4
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe ff11 	bl	80072b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	3318      	adds	r3, #24
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe ff08 	bl	80072b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	2201      	movs	r2, #1
 80084aa:	409a      	lsls	r2, r3
 80084ac:	4b23      	ldr	r3, [pc, #140]	; (800853c <xTaskIncrementTick+0x15c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	4a22      	ldr	r2, [pc, #136]	; (800853c <xTaskIncrementTick+0x15c>)
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <xTaskIncrementTick+0x160>)
 80084c4:	441a      	add	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7fe fe94 	bl	80071fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	4b1b      	ldr	r3, [pc, #108]	; (8008544 <xTaskIncrementTick+0x164>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	429a      	cmp	r2, r3
 80084de:	d3b9      	bcc.n	8008454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e4:	e7b6      	b.n	8008454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e6:	4b17      	ldr	r3, [pc, #92]	; (8008544 <xTaskIncrementTick+0x164>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	4914      	ldr	r1, [pc, #80]	; (8008540 <xTaskIncrementTick+0x160>)
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d901      	bls.n	8008502 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <xTaskIncrementTick+0x168>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800850a:	2301      	movs	r3, #1
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	e004      	b.n	800851a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008510:	4b0e      	ldr	r3, [pc, #56]	; (800854c <xTaskIncrementTick+0x16c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	4a0d      	ldr	r2, [pc, #52]	; (800854c <xTaskIncrementTick+0x16c>)
 8008518:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800851a:	697b      	ldr	r3, [r7, #20]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000fbc 	.word	0x20000fbc
 8008528:	20000f98 	.word	0x20000f98
 800852c:	20000f4c 	.word	0x20000f4c
 8008530:	20000f50 	.word	0x20000f50
 8008534:	20000fac 	.word	0x20000fac
 8008538:	20000fb4 	.word	0x20000fb4
 800853c:	20000f9c 	.word	0x20000f9c
 8008540:	20000e98 	.word	0x20000e98
 8008544:	20000e94 	.word	0x20000e94
 8008548:	20000fa8 	.word	0x20000fa8
 800854c:	20000fa4 	.word	0x20000fa4

08008550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008556:	4b29      	ldr	r3, [pc, #164]	; (80085fc <vTaskSwitchContext+0xac>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855e:	4b28      	ldr	r3, [pc, #160]	; (8008600 <vTaskSwitchContext+0xb0>)
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008564:	e044      	b.n	80085f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008566:	4b26      	ldr	r3, [pc, #152]	; (8008600 <vTaskSwitchContext+0xb0>)
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856c:	4b25      	ldr	r3, [pc, #148]	; (8008604 <vTaskSwitchContext+0xb4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	fab3 f383 	clz	r3, r3
 8008578:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800857a:	7afb      	ldrb	r3, [r7, #11]
 800857c:	f1c3 031f 	rsb	r3, r3, #31
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	4921      	ldr	r1, [pc, #132]	; (8008608 <vTaskSwitchContext+0xb8>)
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	607b      	str	r3, [r7, #4]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <vTaskSwitchContext+0x5a>
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4a14      	ldr	r2, [pc, #80]	; (8008608 <vTaskSwitchContext+0xb8>)
 80085b8:	4413      	add	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3308      	adds	r3, #8
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d104      	bne.n	80085dc <vTaskSwitchContext+0x8c>
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	4a0a      	ldr	r2, [pc, #40]	; (800860c <vTaskSwitchContext+0xbc>)
 80085e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <vTaskSwitchContext+0xbc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	334c      	adds	r3, #76	; 0x4c
 80085ec:	4a08      	ldr	r2, [pc, #32]	; (8008610 <vTaskSwitchContext+0xc0>)
 80085ee:	6013      	str	r3, [r2, #0]
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20000fbc 	.word	0x20000fbc
 8008600:	20000fa8 	.word	0x20000fa8
 8008604:	20000f9c 	.word	0x20000f9c
 8008608:	20000e98 	.word	0x20000e98
 800860c:	20000e94 	.word	0x20000e94
 8008610:	2000006c 	.word	0x2000006c

08008614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <vTaskPlaceOnEventList+0x44>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3318      	adds	r3, #24
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fe fdfd 	bl	8007242 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008648:	2101      	movs	r1, #1
 800864a:	6838      	ldr	r0, [r7, #0]
 800864c:	f000 fb82 	bl	8008d54 <prvAddCurrentTaskToDelayedList>
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000e94 	.word	0x20000e94

0800865c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	60fb      	str	r3, [r7, #12]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	3318      	adds	r3, #24
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fe11 	bl	80072b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008692:	4b1d      	ldr	r3, [pc, #116]	; (8008708 <xTaskRemoveFromEventList+0xac>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d11c      	bne.n	80086d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3304      	adds	r3, #4
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fe08 	bl	80072b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	2201      	movs	r2, #1
 80086aa:	409a      	lsls	r2, r3
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <xTaskRemoveFromEventList+0xb0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	4a16      	ldr	r2, [pc, #88]	; (800870c <xTaskRemoveFromEventList+0xb0>)
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4a13      	ldr	r2, [pc, #76]	; (8008710 <xTaskRemoveFromEventList+0xb4>)
 80086c4:	441a      	add	r2, r3
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7fe fd94 	bl	80071fa <vListInsertEnd>
 80086d2:	e005      	b.n	80086e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	3318      	adds	r3, #24
 80086d8:	4619      	mov	r1, r3
 80086da:	480e      	ldr	r0, [pc, #56]	; (8008714 <xTaskRemoveFromEventList+0xb8>)
 80086dc:	f7fe fd8d 	bl	80071fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <xTaskRemoveFromEventList+0xbc>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d905      	bls.n	80086fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086f2:	4b0a      	ldr	r3, [pc, #40]	; (800871c <xTaskRemoveFromEventList+0xc0>)
 80086f4:	2201      	movs	r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	e001      	b.n	80086fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086fe:	697b      	ldr	r3, [r7, #20]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000fbc 	.word	0x20000fbc
 800870c:	20000f9c 	.word	0x20000f9c
 8008710:	20000e98 	.word	0x20000e98
 8008714:	20000f54 	.word	0x20000f54
 8008718:	20000e94 	.word	0x20000e94
 800871c:	20000fa8 	.word	0x20000fa8

08008720 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <vTaskInternalSetTimeOutState+0x24>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <vTaskInternalSetTimeOutState+0x28>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	605a      	str	r2, [r3, #4]
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	20000fac 	.word	0x20000fac
 8008748:	20000f98 	.word	0x20000f98

0800874c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	613b      	str	r3, [r7, #16]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	60fb      	str	r3, [r7, #12]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800878e:	f000 fc71 	bl	8009074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008792:	4b1d      	ldr	r3, [pc, #116]	; (8008808 <xTaskCheckForTimeOut+0xbc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d102      	bne.n	80087b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61fb      	str	r3, [r7, #28]
 80087b0:	e023      	b.n	80087fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	4b15      	ldr	r3, [pc, #84]	; (800880c <xTaskCheckForTimeOut+0xc0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d007      	beq.n	80087ce <xTaskCheckForTimeOut+0x82>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d302      	bcc.n	80087ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	e015      	b.n	80087fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d20b      	bcs.n	80087f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff ff9b 	bl	8008720 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	e004      	b.n	80087fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087f6:	2301      	movs	r3, #1
 80087f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087fa:	f000 fc6b 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 80087fe:	69fb      	ldr	r3, [r7, #28]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3720      	adds	r7, #32
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000f98 	.word	0x20000f98
 800880c:	20000fac 	.word	0x20000fac

08008810 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008814:	4b03      	ldr	r3, [pc, #12]	; (8008824 <vTaskMissedYield+0x14>)
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]
}
 800881a:	bf00      	nop
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	20000fa8 	.word	0x20000fa8

08008828 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008830:	f000 f852 	bl	80088d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <prvIdleTask+0x28>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d9f9      	bls.n	8008830 <prvIdleTask+0x8>
			{
				taskYIELD();
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <prvIdleTask+0x2c>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800884c:	e7f0      	b.n	8008830 <prvIdleTask+0x8>
 800884e:	bf00      	nop
 8008850:	20000e98 	.word	0x20000e98
 8008854:	e000ed04 	.word	0xe000ed04

08008858 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800885e:	2300      	movs	r3, #0
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e00c      	b.n	800887e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <prvInitialiseTaskLists+0x60>)
 8008870:	4413      	add	r3, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fc94 	bl	80071a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3301      	adds	r3, #1
 800887c:	607b      	str	r3, [r7, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d9ef      	bls.n	8008864 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008884:	480d      	ldr	r0, [pc, #52]	; (80088bc <prvInitialiseTaskLists+0x64>)
 8008886:	f7fe fc8b 	bl	80071a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800888a:	480d      	ldr	r0, [pc, #52]	; (80088c0 <prvInitialiseTaskLists+0x68>)
 800888c:	f7fe fc88 	bl	80071a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008890:	480c      	ldr	r0, [pc, #48]	; (80088c4 <prvInitialiseTaskLists+0x6c>)
 8008892:	f7fe fc85 	bl	80071a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008896:	480c      	ldr	r0, [pc, #48]	; (80088c8 <prvInitialiseTaskLists+0x70>)
 8008898:	f7fe fc82 	bl	80071a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800889c:	480b      	ldr	r0, [pc, #44]	; (80088cc <prvInitialiseTaskLists+0x74>)
 800889e:	f7fe fc7f 	bl	80071a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <prvInitialiseTaskLists+0x78>)
 80088a4:	4a05      	ldr	r2, [pc, #20]	; (80088bc <prvInitialiseTaskLists+0x64>)
 80088a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <prvInitialiseTaskLists+0x7c>)
 80088aa:	4a05      	ldr	r2, [pc, #20]	; (80088c0 <prvInitialiseTaskLists+0x68>)
 80088ac:	601a      	str	r2, [r3, #0]
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000e98 	.word	0x20000e98
 80088bc:	20000f24 	.word	0x20000f24
 80088c0:	20000f38 	.word	0x20000f38
 80088c4:	20000f54 	.word	0x20000f54
 80088c8:	20000f68 	.word	0x20000f68
 80088cc:	20000f80 	.word	0x20000f80
 80088d0:	20000f4c 	.word	0x20000f4c
 80088d4:	20000f50 	.word	0x20000f50

080088d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088de:	e019      	b.n	8008914 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088e0:	f000 fbc8 	bl	8009074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e4:	4b10      	ldr	r3, [pc, #64]	; (8008928 <prvCheckTasksWaitingTermination+0x50>)
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3304      	adds	r3, #4
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe fcdf 	bl	80072b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088f6:	4b0d      	ldr	r3, [pc, #52]	; (800892c <prvCheckTasksWaitingTermination+0x54>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a0b      	ldr	r2, [pc, #44]	; (800892c <prvCheckTasksWaitingTermination+0x54>)
 80088fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <prvCheckTasksWaitingTermination+0x58>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3b01      	subs	r3, #1
 8008906:	4a0a      	ldr	r2, [pc, #40]	; (8008930 <prvCheckTasksWaitingTermination+0x58>)
 8008908:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800890a:	f000 fbe3 	bl	80090d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f810 	bl	8008934 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <prvCheckTasksWaitingTermination+0x58>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e1      	bne.n	80088e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000f68 	.word	0x20000f68
 800892c:	20000f94 	.word	0x20000f94
 8008930:	20000f7c 	.word	0x20000f7c

08008934 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	334c      	adds	r3, #76	; 0x4c
 8008940:	4618      	mov	r0, r3
 8008942:	f000 ff87 	bl	8009854 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d108      	bne.n	8008962 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fd7b 	bl	8009450 <vPortFree>
				vPortFree( pxTCB );
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fd78 	bl	8009450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008960:	e018      	b.n	8008994 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008968:	2b01      	cmp	r3, #1
 800896a:	d103      	bne.n	8008974 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fd6f 	bl	8009450 <vPortFree>
	}
 8008972:	e00f      	b.n	8008994 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800897a:	2b02      	cmp	r3, #2
 800897c:	d00a      	beq.n	8008994 <prvDeleteTCB+0x60>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60fb      	str	r3, [r7, #12]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <prvDeleteTCB+0x5e>
	}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <prvResetNextTaskUnblockTime+0x38>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d104      	bne.n	80089b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <prvResetNextTaskUnblockTime+0x3c>)
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295
 80089b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089b4:	e008      	b.n	80089c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <prvResetNextTaskUnblockTime+0x38>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <prvResetNextTaskUnblockTime+0x3c>)
 80089c6:	6013      	str	r3, [r2, #0]
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	20000f4c 	.word	0x20000f4c
 80089d8:	20000fb4 	.word	0x20000fb4

080089dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089e2:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <xTaskGetSchedulerState+0x34>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d102      	bne.n	80089f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089ea:	2301      	movs	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
 80089ee:	e008      	b.n	8008a02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089f0:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <xTaskGetSchedulerState+0x38>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d102      	bne.n	80089fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089f8:	2302      	movs	r3, #2
 80089fa:	607b      	str	r3, [r7, #4]
 80089fc:	e001      	b.n	8008a02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089fe:	2300      	movs	r3, #0
 8008a00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a02:	687b      	ldr	r3, [r7, #4]
	}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20000fa0 	.word	0x20000fa0
 8008a14:	20000fbc 	.word	0x20000fbc

08008a18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d05e      	beq.n	8008aec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a32:	4b31      	ldr	r3, [pc, #196]	; (8008af8 <xTaskPriorityInherit+0xe0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d24e      	bcs.n	8008ada <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	db06      	blt.n	8008a52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <xTaskPriorityInherit+0xe0>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	f1c3 0207 	rsb	r2, r3, #7
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6959      	ldr	r1, [r3, #20]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4a26      	ldr	r2, [pc, #152]	; (8008afc <xTaskPriorityInherit+0xe4>)
 8008a64:	4413      	add	r3, r2
 8008a66:	4299      	cmp	r1, r3
 8008a68:	d12f      	bne.n	8008aca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fc20 	bl	80072b4 <uxListRemove>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	2201      	movs	r2, #1
 8008a80:	fa02 f303 	lsl.w	r3, r2, r3
 8008a84:	43da      	mvns	r2, r3
 8008a86:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <xTaskPriorityInherit+0xe8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <xTaskPriorityInherit+0xe8>)
 8008a8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a90:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <xTaskPriorityInherit+0xe0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	409a      	lsls	r2, r3
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <xTaskPriorityInherit+0xe8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	4a15      	ldr	r2, [pc, #84]	; (8008b00 <xTaskPriorityInherit+0xe8>)
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4a10      	ldr	r2, [pc, #64]	; (8008afc <xTaskPriorityInherit+0xe4>)
 8008aba:	441a      	add	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	f7fe fb99 	bl	80071fa <vListInsertEnd>
 8008ac8:	e004      	b.n	8008ad4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aca:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <xTaskPriorityInherit+0xe0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	e008      	b.n	8008aec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <xTaskPriorityInherit+0xe0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d201      	bcs.n	8008aec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008aec:	68fb      	ldr	r3, [r7, #12]
	}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000e94 	.word	0x20000e94
 8008afc:	20000e98 	.word	0x20000e98
 8008b00:	20000f9c 	.word	0x20000f9c

08008b04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d06e      	beq.n	8008bf8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b1a:	4b3a      	ldr	r3, [pc, #232]	; (8008c04 <xTaskPriorityDisinherit+0x100>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d00a      	beq.n	8008b3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	60fb      	str	r3, [r7, #12]
}
 8008b36:	bf00      	nop
 8008b38:	e7fe      	b.n	8008b38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5c:	1e5a      	subs	r2, r3, #1
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d044      	beq.n	8008bf8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d140      	bne.n	8008bf8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fb9a 	bl	80072b4 <uxListRemove>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d115      	bne.n	8008bb2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8a:	491f      	ldr	r1, [pc, #124]	; (8008c08 <xTaskPriorityDisinherit+0x104>)
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xTaskPriorityDisinherit+0xae>
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	43da      	mvns	r2, r3
 8008ba8:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <xTaskPriorityDisinherit+0x108>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4013      	ands	r3, r2
 8008bae:	4a17      	ldr	r2, [pc, #92]	; (8008c0c <xTaskPriorityDisinherit+0x108>)
 8008bb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	f1c3 0207 	rsb	r2, r3, #7
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	2201      	movs	r2, #1
 8008bcc:	409a      	lsls	r2, r3
 8008bce:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <xTaskPriorityDisinherit+0x108>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	4a0d      	ldr	r2, [pc, #52]	; (8008c0c <xTaskPriorityDisinherit+0x108>)
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <xTaskPriorityDisinherit+0x104>)
 8008be6:	441a      	add	r2, r3
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fe fb03 	bl	80071fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bf8:	697b      	ldr	r3, [r7, #20]
	}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000e94 	.word	0x20000e94
 8008c08:	20000e98 	.word	0x20000e98
 8008c0c:	20000f9c 	.word	0x20000f9c

08008c10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d077      	beq.n	8008d18 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	60fb      	str	r3, [r7, #12]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d902      	bls.n	8008c56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	e002      	b.n	8008c5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d058      	beq.n	8008d18 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d153      	bne.n	8008d18 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c70:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d10a      	bne.n	8008c90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	60bb      	str	r3, [r7, #8]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	db04      	blt.n	8008cae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f1c3 0207 	rsb	r2, r3, #7
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	6959      	ldr	r1, [r3, #20]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4a19      	ldr	r2, [pc, #100]	; (8008d24 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cbe:	4413      	add	r3, r2
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d129      	bne.n	8008d18 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe faf3 	bl	80072b4 <uxListRemove>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	2201      	movs	r2, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43da      	mvns	r2, r3
 8008ce0:	4b11      	ldr	r3, [pc, #68]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	4a10      	ldr	r2, [pc, #64]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ce8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	2201      	movs	r2, #1
 8008cf0:	409a      	lsls	r2, r3
 8008cf2:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	4a0b      	ldr	r2, [pc, #44]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008d0a:	441a      	add	r2, r3
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7fe fa71 	bl	80071fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d18:	bf00      	nop
 8008d1a:	3720      	adds	r7, #32
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000e94 	.word	0x20000e94
 8008d24:	20000e98 	.word	0x20000e98
 8008d28:	20000f9c 	.word	0x20000f9c

08008d2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d004      	beq.n	8008d42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d3e:	3201      	adds	r2, #1
 8008d40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d42:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d44:	681b      	ldr	r3, [r3, #0]
	}
 8008d46:	4618      	mov	r0, r3
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	20000e94 	.word	0x20000e94

08008d54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d5e:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d64:	4b28      	ldr	r3, [pc, #160]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe faa2 	bl	80072b4 <uxListRemove>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10b      	bne.n	8008d8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43da      	mvns	r2, r3
 8008d84:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	4a20      	ldr	r2, [pc, #128]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d94:	d10a      	bne.n	8008dac <prvAddCurrentTaskToDelayedList+0x58>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d007      	beq.n	8008dac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d9c:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	481a      	ldr	r0, [pc, #104]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008da6:	f7fe fa28 	bl	80071fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008daa:	e026      	b.n	8008dfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008db4:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d209      	bcs.n	8008dd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc4:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7fe fa36 	bl	8007242 <vListInsert>
}
 8008dd6:	e010      	b.n	8008dfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7fe fa2c 	bl	8007242 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dea:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d202      	bcs.n	8008dfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008df4:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6013      	str	r3, [r2, #0]
}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000f98 	.word	0x20000f98
 8008e08:	20000e94 	.word	0x20000e94
 8008e0c:	20000f9c 	.word	0x20000f9c
 8008e10:	20000f80 	.word	0x20000f80
 8008e14:	20000f50 	.word	0x20000f50
 8008e18:	20000f4c 	.word	0x20000f4c
 8008e1c:	20000fb4 	.word	0x20000fb4

08008e20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3b04      	subs	r3, #4
 8008e30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f023 0201 	bic.w	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e50:	4a0c      	ldr	r2, [pc, #48]	; (8008e84 <pxPortInitialiseStack+0x64>)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b14      	subs	r3, #20
 8008e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f06f 0202 	mvn.w	r2, #2
 8008e6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3b20      	subs	r3, #32
 8008e74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e76:	68fb      	ldr	r3, [r7, #12]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	08008e89 	.word	0x08008e89

08008e88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e92:	4b12      	ldr	r3, [pc, #72]	; (8008edc <prvTaskExitError+0x54>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d00a      	beq.n	8008eb2 <prvTaskExitError+0x2a>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60fb      	str	r3, [r7, #12]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <prvTaskExitError+0x28>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
}
 8008ec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ec6:	bf00      	nop
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0fc      	beq.n	8008ec8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20000068 	.word	0x20000068

08008ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ee0:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <pxCurrentTCBConst2>)
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eea:	f380 8809 	msr	PSP, r0
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8811 	msr	BASEPRI, r0
 8008efa:	4770      	bx	lr
 8008efc:	f3af 8000 	nop.w

08008f00 <pxCurrentTCBConst2>:
 8008f00:	20000e94 	.word	0x20000e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f08:	4808      	ldr	r0, [pc, #32]	; (8008f2c <prvPortStartFirstTask+0x24>)
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f380 8808 	msr	MSP, r0
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8814 	msr	CONTROL, r0
 8008f1a:	b662      	cpsie	i
 8008f1c:	b661      	cpsie	f
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	df00      	svc	0
 8008f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed08 	.word	0xe000ed08

08008f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f36:	4b46      	ldr	r3, [pc, #280]	; (8009050 <xPortStartScheduler+0x120>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a46      	ldr	r2, [pc, #280]	; (8009054 <xPortStartScheduler+0x124>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d10a      	bne.n	8008f56 <xPortStartScheduler+0x26>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	613b      	str	r3, [r7, #16]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f56:	4b3e      	ldr	r3, [pc, #248]	; (8009050 <xPortStartScheduler+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a3f      	ldr	r2, [pc, #252]	; (8009058 <xPortStartScheduler+0x128>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10a      	bne.n	8008f76 <xPortStartScheduler+0x46>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f76:	4b39      	ldr	r3, [pc, #228]	; (800905c <xPortStartScheduler+0x12c>)
 8008f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	4b31      	ldr	r3, [pc, #196]	; (8009060 <xPortStartScheduler+0x130>)
 8008f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f9e:	4b31      	ldr	r3, [pc, #196]	; (8009064 <xPortStartScheduler+0x134>)
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fa4:	e009      	b.n	8008fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <xPortStartScheduler+0x134>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4a2d      	ldr	r2, [pc, #180]	; (8009064 <xPortStartScheduler+0x134>)
 8008fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d0ef      	beq.n	8008fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fc6:	4b27      	ldr	r3, [pc, #156]	; (8009064 <xPortStartScheduler+0x134>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1c3 0307 	rsb	r3, r3, #7
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d00a      	beq.n	8008fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60bb      	str	r3, [r7, #8]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <xPortStartScheduler+0x134>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <xPortStartScheduler+0x134>)
 8008ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ff2:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <xPortStartScheduler+0x134>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffa:	4a1a      	ldr	r2, [pc, #104]	; (8009064 <xPortStartScheduler+0x134>)
 8008ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	b2da      	uxtb	r2, r3
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009006:	4b18      	ldr	r3, [pc, #96]	; (8009068 <xPortStartScheduler+0x138>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a17      	ldr	r2, [pc, #92]	; (8009068 <xPortStartScheduler+0x138>)
 800900c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <xPortStartScheduler+0x138>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a14      	ldr	r2, [pc, #80]	; (8009068 <xPortStartScheduler+0x138>)
 8009018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800901c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800901e:	f000 f8dd 	bl	80091dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009022:	4b12      	ldr	r3, [pc, #72]	; (800906c <xPortStartScheduler+0x13c>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009028:	f000 f8fc 	bl	8009224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800902c:	4b10      	ldr	r3, [pc, #64]	; (8009070 <xPortStartScheduler+0x140>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0f      	ldr	r2, [pc, #60]	; (8009070 <xPortStartScheduler+0x140>)
 8009032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009038:	f7ff ff66 	bl	8008f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800903c:	f7ff fa88 	bl	8008550 <vTaskSwitchContext>
	prvTaskExitError();
 8009040:	f7ff ff22 	bl	8008e88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	e000ed00 	.word	0xe000ed00
 8009054:	410fc271 	.word	0x410fc271
 8009058:	410fc270 	.word	0x410fc270
 800905c:	e000e400 	.word	0xe000e400
 8009060:	20000fc0 	.word	0x20000fc0
 8009064:	20000fc4 	.word	0x20000fc4
 8009068:	e000ed20 	.word	0xe000ed20
 800906c:	20000068 	.word	0x20000068
 8009070:	e000ef34 	.word	0xe000ef34

08009074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	607b      	str	r3, [r7, #4]
}
 800908c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800908e:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <vPortEnterCritical+0x58>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <vPortEnterCritical+0x58>)
 8009096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <vPortEnterCritical+0x58>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d10f      	bne.n	80090c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <vPortEnterCritical+0x5c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	603b      	str	r3, [r7, #0]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <vPortEnterCritical+0x4a>
	}
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20000068 	.word	0x20000068
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090da:	4b12      	ldr	r3, [pc, #72]	; (8009124 <vPortExitCritical+0x50>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <vPortExitCritical+0x24>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	607b      	str	r3, [r7, #4]
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <vPortExitCritical+0x50>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4a09      	ldr	r2, [pc, #36]	; (8009124 <vPortExitCritical+0x50>)
 8009100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009102:	4b08      	ldr	r3, [pc, #32]	; (8009124 <vPortExitCritical+0x50>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <vPortExitCritical+0x42>
 800910a:	2300      	movs	r3, #0
 800910c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f383 8811 	msr	BASEPRI, r3
}
 8009114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000068 	.word	0x20000068
	...

08009130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009130:	f3ef 8009 	mrs	r0, PSP
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <pxCurrentTCBConst>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	f01e 0f10 	tst.w	lr, #16
 8009140:	bf08      	it	eq
 8009142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	6010      	str	r0, [r2, #0]
 800914c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009154:	f380 8811 	msr	BASEPRI, r0
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f7ff f9f6 	bl	8008550 <vTaskSwitchContext>
 8009164:	f04f 0000 	mov.w	r0, #0
 8009168:	f380 8811 	msr	BASEPRI, r0
 800916c:	bc09      	pop	{r0, r3}
 800916e:	6819      	ldr	r1, [r3, #0]
 8009170:	6808      	ldr	r0, [r1, #0]
 8009172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009176:	f01e 0f10 	tst.w	lr, #16
 800917a:	bf08      	it	eq
 800917c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009180:	f380 8809 	msr	PSP, r0
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst>:
 8009190:	20000e94 	.word	0x20000e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	607b      	str	r3, [r7, #4]
}
 80091b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091b2:	f7ff f915 	bl	80083e0 <xTaskIncrementTick>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <SysTick_Handler+0x40>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f383 8811 	msr	BASEPRI, r3
}
 80091ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091e0:	4b0b      	ldr	r3, [pc, #44]	; (8009210 <vPortSetupTimerInterrupt+0x34>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <vPortSetupTimerInterrupt+0x38>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <vPortSetupTimerInterrupt+0x3c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a0a      	ldr	r2, [pc, #40]	; (800921c <vPortSetupTimerInterrupt+0x40>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	4a09      	ldr	r2, [pc, #36]	; (8009220 <vPortSetupTimerInterrupt+0x44>)
 80091fa:	3b01      	subs	r3, #1
 80091fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091fe:	4b04      	ldr	r3, [pc, #16]	; (8009210 <vPortSetupTimerInterrupt+0x34>)
 8009200:	2207      	movs	r2, #7
 8009202:	601a      	str	r2, [r3, #0]
}
 8009204:	bf00      	nop
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	e000e010 	.word	0xe000e010
 8009214:	e000e018 	.word	0xe000e018
 8009218:	20000000 	.word	0x20000000
 800921c:	10624dd3 	.word	0x10624dd3
 8009220:	e000e014 	.word	0xe000e014

08009224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009234 <vPortEnableVFP+0x10>
 8009228:	6801      	ldr	r1, [r0, #0]
 800922a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800922e:	6001      	str	r1, [r0, #0]
 8009230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009232:	bf00      	nop
 8009234:	e000ed88 	.word	0xe000ed88

08009238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800923e:	f3ef 8305 	mrs	r3, IPSR
 8009242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b0f      	cmp	r3, #15
 8009248:	d914      	bls.n	8009274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800924a:	4a17      	ldr	r2, [pc, #92]	; (80092a8 <vPortValidateInterruptPriority+0x70>)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009254:	4b15      	ldr	r3, [pc, #84]	; (80092ac <vPortValidateInterruptPriority+0x74>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	7afa      	ldrb	r2, [r7, #11]
 800925a:	429a      	cmp	r2, r3
 800925c:	d20a      	bcs.n	8009274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	607b      	str	r3, [r7, #4]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009274:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <vPortValidateInterruptPriority+0x78>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <vPortValidateInterruptPriority+0x7c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d90a      	bls.n	800929a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	603b      	str	r3, [r7, #0]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <vPortValidateInterruptPriority+0x60>
	}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	e000e3f0 	.word	0xe000e3f0
 80092ac:	20000fc0 	.word	0x20000fc0
 80092b0:	e000ed0c 	.word	0xe000ed0c
 80092b4:	20000fc4 	.word	0x20000fc4

080092b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092c4:	f7fe ffe2 	bl	800828c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092c8:	4b5b      	ldr	r3, [pc, #364]	; (8009438 <pvPortMalloc+0x180>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092d0:	f000 f920 	bl	8009514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092d4:	4b59      	ldr	r3, [pc, #356]	; (800943c <pvPortMalloc+0x184>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4013      	ands	r3, r2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f040 8093 	bne.w	8009408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01d      	beq.n	8009324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092e8:	2208      	movs	r2, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d014      	beq.n	8009324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	3308      	adds	r3, #8
 8009302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <pvPortMalloc+0x6c>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	617b      	str	r3, [r7, #20]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d06e      	beq.n	8009408 <pvPortMalloc+0x150>
 800932a:	4b45      	ldr	r3, [pc, #276]	; (8009440 <pvPortMalloc+0x188>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d869      	bhi.n	8009408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009334:	4b43      	ldr	r3, [pc, #268]	; (8009444 <pvPortMalloc+0x18c>)
 8009336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009338:	4b42      	ldr	r3, [pc, #264]	; (8009444 <pvPortMalloc+0x18c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800933e:	e004      	b.n	800934a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d903      	bls.n	800935c <pvPortMalloc+0xa4>
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1f1      	bne.n	8009340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800935c:	4b36      	ldr	r3, [pc, #216]	; (8009438 <pvPortMalloc+0x180>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	429a      	cmp	r2, r3
 8009364:	d050      	beq.n	8009408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2208      	movs	r2, #8
 800936c:	4413      	add	r3, r2
 800936e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	2308      	movs	r3, #8
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	429a      	cmp	r2, r3
 8009386:	d91f      	bls.n	80093c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <pvPortMalloc+0xf8>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	613b      	str	r3, [r7, #16]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093c2:	69b8      	ldr	r0, [r7, #24]
 80093c4:	f000 f908 	bl	80095d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093c8:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <pvPortMalloc+0x188>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <pvPortMalloc+0x188>)
 80093d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093d6:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <pvPortMalloc+0x188>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <pvPortMalloc+0x190>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d203      	bcs.n	80093ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093e2:	4b17      	ldr	r3, [pc, #92]	; (8009440 <pvPortMalloc+0x188>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a18      	ldr	r2, [pc, #96]	; (8009448 <pvPortMalloc+0x190>)
 80093e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <pvPortMalloc+0x184>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <pvPortMalloc+0x194>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a11      	ldr	r2, [pc, #68]	; (800944c <pvPortMalloc+0x194>)
 8009406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009408:	f7fe ff4e 	bl	80082a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <pvPortMalloc+0x174>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	60fb      	str	r3, [r7, #12]
}
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <pvPortMalloc+0x172>
	return pvReturn;
 800942c:	69fb      	ldr	r3, [r7, #28]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20002740 	.word	0x20002740
 800943c:	20002754 	.word	0x20002754
 8009440:	20002744 	.word	0x20002744
 8009444:	20002738 	.word	0x20002738
 8009448:	20002748 	.word	0x20002748
 800944c:	2000274c 	.word	0x2000274c

08009450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d04d      	beq.n	80094fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009462:	2308      	movs	r3, #8
 8009464:	425b      	negs	r3, r3
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4413      	add	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	4b24      	ldr	r3, [pc, #144]	; (8009508 <vPortFree+0xb8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4013      	ands	r3, r2
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10a      	bne.n	8009494 <vPortFree+0x44>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	60fb      	str	r3, [r7, #12]
}
 8009490:	bf00      	nop
 8009492:	e7fe      	b.n	8009492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <vPortFree+0x62>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	60bb      	str	r3, [r7, #8]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	4b14      	ldr	r3, [pc, #80]	; (8009508 <vPortFree+0xb8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4013      	ands	r3, r2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01e      	beq.n	80094fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d11a      	bne.n	80094fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <vPortFree+0xb8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	43db      	mvns	r3, r3
 80094d2:	401a      	ands	r2, r3
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094d8:	f7fe fed8 	bl	800828c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <vPortFree+0xbc>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4413      	add	r3, r2
 80094e6:	4a09      	ldr	r2, [pc, #36]	; (800950c <vPortFree+0xbc>)
 80094e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ea:	6938      	ldr	r0, [r7, #16]
 80094ec:	f000 f874 	bl	80095d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <vPortFree+0xc0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	4a06      	ldr	r2, [pc, #24]	; (8009510 <vPortFree+0xc0>)
 80094f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094fa:	f7fe fed5 	bl	80082a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094fe:	bf00      	nop
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20002754 	.word	0x20002754
 800950c:	20002744 	.word	0x20002744
 8009510:	20002750 	.word	0x20002750

08009514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800951a:	f241 7370 	movw	r3, #6000	; 0x1770
 800951e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009520:	4b27      	ldr	r3, [pc, #156]	; (80095c0 <prvHeapInit+0xac>)
 8009522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00c      	beq.n	8009548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3307      	adds	r3, #7
 8009532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	4a1f      	ldr	r2, [pc, #124]	; (80095c0 <prvHeapInit+0xac>)
 8009544:	4413      	add	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800954c:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <prvHeapInit+0xb0>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009552:	4b1c      	ldr	r3, [pc, #112]	; (80095c4 <prvHeapInit+0xb0>)
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	4413      	add	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009560:	2208      	movs	r2, #8
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0307 	bic.w	r3, r3, #7
 800956e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <prvHeapInit+0xb4>)
 8009574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <prvHeapInit+0xb4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <prvHeapInit+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <prvHeapInit+0xb4>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <prvHeapInit+0xb8>)
 80095a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <prvHeapInit+0xbc>)
 80095aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095ac:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <prvHeapInit+0xc0>)
 80095ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000fc8 	.word	0x20000fc8
 80095c4:	20002738 	.word	0x20002738
 80095c8:	20002740 	.word	0x20002740
 80095cc:	20002748 	.word	0x20002748
 80095d0:	20002744 	.word	0x20002744
 80095d4:	20002754 	.word	0x20002754

080095d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095e0:	4b28      	ldr	r3, [pc, #160]	; (8009684 <prvInsertBlockIntoFreeList+0xac>)
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e002      	b.n	80095ec <prvInsertBlockIntoFreeList+0x14>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d8f7      	bhi.n	80095e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	4413      	add	r3, r2
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d108      	bne.n	800961a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	441a      	add	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d118      	bne.n	8009660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b15      	ldr	r3, [pc, #84]	; (8009688 <prvInsertBlockIntoFreeList+0xb0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d00d      	beq.n	8009656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e008      	b.n	8009668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvInsertBlockIntoFreeList+0xb0>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e003      	b.n	8009668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d002      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20002738 	.word	0x20002738
 8009688:	20002740 	.word	0x20002740

0800968c <__errno>:
 800968c:	4b01      	ldr	r3, [pc, #4]	; (8009694 <__errno+0x8>)
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	2000006c 	.word	0x2000006c

08009698 <__libc_init_array>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	4d0d      	ldr	r5, [pc, #52]	; (80096d0 <__libc_init_array+0x38>)
 800969c:	4c0d      	ldr	r4, [pc, #52]	; (80096d4 <__libc_init_array+0x3c>)
 800969e:	1b64      	subs	r4, r4, r5
 80096a0:	10a4      	asrs	r4, r4, #2
 80096a2:	2600      	movs	r6, #0
 80096a4:	42a6      	cmp	r6, r4
 80096a6:	d109      	bne.n	80096bc <__libc_init_array+0x24>
 80096a8:	4d0b      	ldr	r5, [pc, #44]	; (80096d8 <__libc_init_array+0x40>)
 80096aa:	4c0c      	ldr	r4, [pc, #48]	; (80096dc <__libc_init_array+0x44>)
 80096ac:	f000 fd3e 	bl	800a12c <_init>
 80096b0:	1b64      	subs	r4, r4, r5
 80096b2:	10a4      	asrs	r4, r4, #2
 80096b4:	2600      	movs	r6, #0
 80096b6:	42a6      	cmp	r6, r4
 80096b8:	d105      	bne.n	80096c6 <__libc_init_array+0x2e>
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c0:	4798      	blx	r3
 80096c2:	3601      	adds	r6, #1
 80096c4:	e7ee      	b.n	80096a4 <__libc_init_array+0xc>
 80096c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ca:	4798      	blx	r3
 80096cc:	3601      	adds	r6, #1
 80096ce:	e7f2      	b.n	80096b6 <__libc_init_array+0x1e>
 80096d0:	0800a378 	.word	0x0800a378
 80096d4:	0800a378 	.word	0x0800a378
 80096d8:	0800a378 	.word	0x0800a378
 80096dc:	0800a37c 	.word	0x0800a37c

080096e0 <__retarget_lock_acquire_recursive>:
 80096e0:	4770      	bx	lr

080096e2 <__retarget_lock_release_recursive>:
 80096e2:	4770      	bx	lr

080096e4 <memcpy>:
 80096e4:	440a      	add	r2, r1
 80096e6:	4291      	cmp	r1, r2
 80096e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096ec:	d100      	bne.n	80096f0 <memcpy+0xc>
 80096ee:	4770      	bx	lr
 80096f0:	b510      	push	{r4, lr}
 80096f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096fa:	4291      	cmp	r1, r2
 80096fc:	d1f9      	bne.n	80096f2 <memcpy+0xe>
 80096fe:	bd10      	pop	{r4, pc}

08009700 <memset>:
 8009700:	4402      	add	r2, r0
 8009702:	4603      	mov	r3, r0
 8009704:	4293      	cmp	r3, r2
 8009706:	d100      	bne.n	800970a <memset+0xa>
 8009708:	4770      	bx	lr
 800970a:	f803 1b01 	strb.w	r1, [r3], #1
 800970e:	e7f9      	b.n	8009704 <memset+0x4>

08009710 <sbrk_aligned>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	4e0e      	ldr	r6, [pc, #56]	; (800974c <sbrk_aligned+0x3c>)
 8009714:	460c      	mov	r4, r1
 8009716:	6831      	ldr	r1, [r6, #0]
 8009718:	4605      	mov	r5, r0
 800971a:	b911      	cbnz	r1, 8009722 <sbrk_aligned+0x12>
 800971c:	f000 f8f6 	bl	800990c <_sbrk_r>
 8009720:	6030      	str	r0, [r6, #0]
 8009722:	4621      	mov	r1, r4
 8009724:	4628      	mov	r0, r5
 8009726:	f000 f8f1 	bl	800990c <_sbrk_r>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	d00a      	beq.n	8009744 <sbrk_aligned+0x34>
 800972e:	1cc4      	adds	r4, r0, #3
 8009730:	f024 0403 	bic.w	r4, r4, #3
 8009734:	42a0      	cmp	r0, r4
 8009736:	d007      	beq.n	8009748 <sbrk_aligned+0x38>
 8009738:	1a21      	subs	r1, r4, r0
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f8e6 	bl	800990c <_sbrk_r>
 8009740:	3001      	adds	r0, #1
 8009742:	d101      	bne.n	8009748 <sbrk_aligned+0x38>
 8009744:	f04f 34ff 	mov.w	r4, #4294967295
 8009748:	4620      	mov	r0, r4
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	20002760 	.word	0x20002760

08009750 <_malloc_r>:
 8009750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009754:	1ccd      	adds	r5, r1, #3
 8009756:	f025 0503 	bic.w	r5, r5, #3
 800975a:	3508      	adds	r5, #8
 800975c:	2d0c      	cmp	r5, #12
 800975e:	bf38      	it	cc
 8009760:	250c      	movcc	r5, #12
 8009762:	2d00      	cmp	r5, #0
 8009764:	4607      	mov	r7, r0
 8009766:	db01      	blt.n	800976c <_malloc_r+0x1c>
 8009768:	42a9      	cmp	r1, r5
 800976a:	d905      	bls.n	8009778 <_malloc_r+0x28>
 800976c:	230c      	movs	r3, #12
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	2600      	movs	r6, #0
 8009772:	4630      	mov	r0, r6
 8009774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009778:	4e2e      	ldr	r6, [pc, #184]	; (8009834 <_malloc_r+0xe4>)
 800977a:	f000 f90b 	bl	8009994 <__malloc_lock>
 800977e:	6833      	ldr	r3, [r6, #0]
 8009780:	461c      	mov	r4, r3
 8009782:	bb34      	cbnz	r4, 80097d2 <_malloc_r+0x82>
 8009784:	4629      	mov	r1, r5
 8009786:	4638      	mov	r0, r7
 8009788:	f7ff ffc2 	bl	8009710 <sbrk_aligned>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	4604      	mov	r4, r0
 8009790:	d14d      	bne.n	800982e <_malloc_r+0xde>
 8009792:	6834      	ldr	r4, [r6, #0]
 8009794:	4626      	mov	r6, r4
 8009796:	2e00      	cmp	r6, #0
 8009798:	d140      	bne.n	800981c <_malloc_r+0xcc>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	4631      	mov	r1, r6
 800979e:	4638      	mov	r0, r7
 80097a0:	eb04 0803 	add.w	r8, r4, r3
 80097a4:	f000 f8b2 	bl	800990c <_sbrk_r>
 80097a8:	4580      	cmp	r8, r0
 80097aa:	d13a      	bne.n	8009822 <_malloc_r+0xd2>
 80097ac:	6821      	ldr	r1, [r4, #0]
 80097ae:	3503      	adds	r5, #3
 80097b0:	1a6d      	subs	r5, r5, r1
 80097b2:	f025 0503 	bic.w	r5, r5, #3
 80097b6:	3508      	adds	r5, #8
 80097b8:	2d0c      	cmp	r5, #12
 80097ba:	bf38      	it	cc
 80097bc:	250c      	movcc	r5, #12
 80097be:	4629      	mov	r1, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff ffa5 	bl	8009710 <sbrk_aligned>
 80097c6:	3001      	adds	r0, #1
 80097c8:	d02b      	beq.n	8009822 <_malloc_r+0xd2>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	442b      	add	r3, r5
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	e00e      	b.n	80097f0 <_malloc_r+0xa0>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	1b52      	subs	r2, r2, r5
 80097d6:	d41e      	bmi.n	8009816 <_malloc_r+0xc6>
 80097d8:	2a0b      	cmp	r2, #11
 80097da:	d916      	bls.n	800980a <_malloc_r+0xba>
 80097dc:	1961      	adds	r1, r4, r5
 80097de:	42a3      	cmp	r3, r4
 80097e0:	6025      	str	r5, [r4, #0]
 80097e2:	bf18      	it	ne
 80097e4:	6059      	strne	r1, [r3, #4]
 80097e6:	6863      	ldr	r3, [r4, #4]
 80097e8:	bf08      	it	eq
 80097ea:	6031      	streq	r1, [r6, #0]
 80097ec:	5162      	str	r2, [r4, r5]
 80097ee:	604b      	str	r3, [r1, #4]
 80097f0:	4638      	mov	r0, r7
 80097f2:	f104 060b 	add.w	r6, r4, #11
 80097f6:	f000 f8d3 	bl	80099a0 <__malloc_unlock>
 80097fa:	f026 0607 	bic.w	r6, r6, #7
 80097fe:	1d23      	adds	r3, r4, #4
 8009800:	1af2      	subs	r2, r6, r3
 8009802:	d0b6      	beq.n	8009772 <_malloc_r+0x22>
 8009804:	1b9b      	subs	r3, r3, r6
 8009806:	50a3      	str	r3, [r4, r2]
 8009808:	e7b3      	b.n	8009772 <_malloc_r+0x22>
 800980a:	6862      	ldr	r2, [r4, #4]
 800980c:	42a3      	cmp	r3, r4
 800980e:	bf0c      	ite	eq
 8009810:	6032      	streq	r2, [r6, #0]
 8009812:	605a      	strne	r2, [r3, #4]
 8009814:	e7ec      	b.n	80097f0 <_malloc_r+0xa0>
 8009816:	4623      	mov	r3, r4
 8009818:	6864      	ldr	r4, [r4, #4]
 800981a:	e7b2      	b.n	8009782 <_malloc_r+0x32>
 800981c:	4634      	mov	r4, r6
 800981e:	6876      	ldr	r6, [r6, #4]
 8009820:	e7b9      	b.n	8009796 <_malloc_r+0x46>
 8009822:	230c      	movs	r3, #12
 8009824:	603b      	str	r3, [r7, #0]
 8009826:	4638      	mov	r0, r7
 8009828:	f000 f8ba 	bl	80099a0 <__malloc_unlock>
 800982c:	e7a1      	b.n	8009772 <_malloc_r+0x22>
 800982e:	6025      	str	r5, [r4, #0]
 8009830:	e7de      	b.n	80097f0 <_malloc_r+0xa0>
 8009832:	bf00      	nop
 8009834:	2000275c 	.word	0x2000275c

08009838 <cleanup_glue>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	460c      	mov	r4, r1
 800983c:	6809      	ldr	r1, [r1, #0]
 800983e:	4605      	mov	r5, r0
 8009840:	b109      	cbz	r1, 8009846 <cleanup_glue+0xe>
 8009842:	f7ff fff9 	bl	8009838 <cleanup_glue>
 8009846:	4621      	mov	r1, r4
 8009848:	4628      	mov	r0, r5
 800984a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800984e:	f000 b8ad 	b.w	80099ac <_free_r>
	...

08009854 <_reclaim_reent>:
 8009854:	4b2c      	ldr	r3, [pc, #176]	; (8009908 <_reclaim_reent+0xb4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4283      	cmp	r3, r0
 800985a:	b570      	push	{r4, r5, r6, lr}
 800985c:	4604      	mov	r4, r0
 800985e:	d051      	beq.n	8009904 <_reclaim_reent+0xb0>
 8009860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009862:	b143      	cbz	r3, 8009876 <_reclaim_reent+0x22>
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d14a      	bne.n	8009900 <_reclaim_reent+0xac>
 800986a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800986c:	6819      	ldr	r1, [r3, #0]
 800986e:	b111      	cbz	r1, 8009876 <_reclaim_reent+0x22>
 8009870:	4620      	mov	r0, r4
 8009872:	f000 f89b 	bl	80099ac <_free_r>
 8009876:	6961      	ldr	r1, [r4, #20]
 8009878:	b111      	cbz	r1, 8009880 <_reclaim_reent+0x2c>
 800987a:	4620      	mov	r0, r4
 800987c:	f000 f896 	bl	80099ac <_free_r>
 8009880:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009882:	b111      	cbz	r1, 800988a <_reclaim_reent+0x36>
 8009884:	4620      	mov	r0, r4
 8009886:	f000 f891 	bl	80099ac <_free_r>
 800988a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800988c:	b111      	cbz	r1, 8009894 <_reclaim_reent+0x40>
 800988e:	4620      	mov	r0, r4
 8009890:	f000 f88c 	bl	80099ac <_free_r>
 8009894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009896:	b111      	cbz	r1, 800989e <_reclaim_reent+0x4a>
 8009898:	4620      	mov	r0, r4
 800989a:	f000 f887 	bl	80099ac <_free_r>
 800989e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80098a0:	b111      	cbz	r1, 80098a8 <_reclaim_reent+0x54>
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 f882 	bl	80099ac <_free_r>
 80098a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80098aa:	b111      	cbz	r1, 80098b2 <_reclaim_reent+0x5e>
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 f87d 	bl	80099ac <_free_r>
 80098b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80098b4:	b111      	cbz	r1, 80098bc <_reclaim_reent+0x68>
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f878 	bl	80099ac <_free_r>
 80098bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098be:	b111      	cbz	r1, 80098c6 <_reclaim_reent+0x72>
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 f873 	bl	80099ac <_free_r>
 80098c6:	69a3      	ldr	r3, [r4, #24]
 80098c8:	b1e3      	cbz	r3, 8009904 <_reclaim_reent+0xb0>
 80098ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098cc:	4620      	mov	r0, r4
 80098ce:	4798      	blx	r3
 80098d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80098d2:	b1b9      	cbz	r1, 8009904 <_reclaim_reent+0xb0>
 80098d4:	4620      	mov	r0, r4
 80098d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098da:	f7ff bfad 	b.w	8009838 <cleanup_glue>
 80098de:	5949      	ldr	r1, [r1, r5]
 80098e0:	b941      	cbnz	r1, 80098f4 <_reclaim_reent+0xa0>
 80098e2:	3504      	adds	r5, #4
 80098e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e6:	2d80      	cmp	r5, #128	; 0x80
 80098e8:	68d9      	ldr	r1, [r3, #12]
 80098ea:	d1f8      	bne.n	80098de <_reclaim_reent+0x8a>
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f85d 	bl	80099ac <_free_r>
 80098f2:	e7ba      	b.n	800986a <_reclaim_reent+0x16>
 80098f4:	680e      	ldr	r6, [r1, #0]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f858 	bl	80099ac <_free_r>
 80098fc:	4631      	mov	r1, r6
 80098fe:	e7ef      	b.n	80098e0 <_reclaim_reent+0x8c>
 8009900:	2500      	movs	r5, #0
 8009902:	e7ef      	b.n	80098e4 <_reclaim_reent+0x90>
 8009904:	bd70      	pop	{r4, r5, r6, pc}
 8009906:	bf00      	nop
 8009908:	2000006c 	.word	0x2000006c

0800990c <_sbrk_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d06      	ldr	r5, [pc, #24]	; (8009928 <_sbrk_r+0x1c>)
 8009910:	2300      	movs	r3, #0
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	f7f8 f908 	bl	8001b2c <_sbrk>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_sbrk_r+0x1a>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_sbrk_r+0x1a>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	20002764 	.word	0x20002764

0800992c <sniprintf>:
 800992c:	b40c      	push	{r2, r3}
 800992e:	b530      	push	{r4, r5, lr}
 8009930:	4b17      	ldr	r3, [pc, #92]	; (8009990 <sniprintf+0x64>)
 8009932:	1e0c      	subs	r4, r1, #0
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	b09d      	sub	sp, #116	; 0x74
 8009938:	da08      	bge.n	800994c <sniprintf+0x20>
 800993a:	238b      	movs	r3, #139	; 0x8b
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	f04f 30ff 	mov.w	r0, #4294967295
 8009942:	b01d      	add	sp, #116	; 0x74
 8009944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009948:	b002      	add	sp, #8
 800994a:	4770      	bx	lr
 800994c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009950:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009954:	bf14      	ite	ne
 8009956:	f104 33ff 	addne.w	r3, r4, #4294967295
 800995a:	4623      	moveq	r3, r4
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009964:	9002      	str	r0, [sp, #8]
 8009966:	9006      	str	r0, [sp, #24]
 8009968:	f8ad 3016 	strh.w	r3, [sp, #22]
 800996c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800996e:	ab21      	add	r3, sp, #132	; 0x84
 8009970:	a902      	add	r1, sp, #8
 8009972:	4628      	mov	r0, r5
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	f000 f8c1 	bl	8009afc <_svfiprintf_r>
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	bfbc      	itt	lt
 800997e:	238b      	movlt	r3, #139	; 0x8b
 8009980:	602b      	strlt	r3, [r5, #0]
 8009982:	2c00      	cmp	r4, #0
 8009984:	d0dd      	beq.n	8009942 <sniprintf+0x16>
 8009986:	9b02      	ldr	r3, [sp, #8]
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	e7d9      	b.n	8009942 <sniprintf+0x16>
 800998e:	bf00      	nop
 8009990:	2000006c 	.word	0x2000006c

08009994 <__malloc_lock>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__malloc_lock+0x8>)
 8009996:	f7ff bea3 	b.w	80096e0 <__retarget_lock_acquire_recursive>
 800999a:	bf00      	nop
 800999c:	20002758 	.word	0x20002758

080099a0 <__malloc_unlock>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__malloc_unlock+0x8>)
 80099a2:	f7ff be9e 	b.w	80096e2 <__retarget_lock_release_recursive>
 80099a6:	bf00      	nop
 80099a8:	20002758 	.word	0x20002758

080099ac <_free_r>:
 80099ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ae:	2900      	cmp	r1, #0
 80099b0:	d044      	beq.n	8009a3c <_free_r+0x90>
 80099b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b6:	9001      	str	r0, [sp, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f1a1 0404 	sub.w	r4, r1, #4
 80099be:	bfb8      	it	lt
 80099c0:	18e4      	addlt	r4, r4, r3
 80099c2:	f7ff ffe7 	bl	8009994 <__malloc_lock>
 80099c6:	4a1e      	ldr	r2, [pc, #120]	; (8009a40 <_free_r+0x94>)
 80099c8:	9801      	ldr	r0, [sp, #4]
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	b933      	cbnz	r3, 80099dc <_free_r+0x30>
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	6014      	str	r4, [r2, #0]
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099d8:	f7ff bfe2 	b.w	80099a0 <__malloc_unlock>
 80099dc:	42a3      	cmp	r3, r4
 80099de:	d908      	bls.n	80099f2 <_free_r+0x46>
 80099e0:	6825      	ldr	r5, [r4, #0]
 80099e2:	1961      	adds	r1, r4, r5
 80099e4:	428b      	cmp	r3, r1
 80099e6:	bf01      	itttt	eq
 80099e8:	6819      	ldreq	r1, [r3, #0]
 80099ea:	685b      	ldreq	r3, [r3, #4]
 80099ec:	1949      	addeq	r1, r1, r5
 80099ee:	6021      	streq	r1, [r4, #0]
 80099f0:	e7ed      	b.n	80099ce <_free_r+0x22>
 80099f2:	461a      	mov	r2, r3
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	b10b      	cbz	r3, 80099fc <_free_r+0x50>
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	d9fa      	bls.n	80099f2 <_free_r+0x46>
 80099fc:	6811      	ldr	r1, [r2, #0]
 80099fe:	1855      	adds	r5, r2, r1
 8009a00:	42a5      	cmp	r5, r4
 8009a02:	d10b      	bne.n	8009a1c <_free_r+0x70>
 8009a04:	6824      	ldr	r4, [r4, #0]
 8009a06:	4421      	add	r1, r4
 8009a08:	1854      	adds	r4, r2, r1
 8009a0a:	42a3      	cmp	r3, r4
 8009a0c:	6011      	str	r1, [r2, #0]
 8009a0e:	d1e0      	bne.n	80099d2 <_free_r+0x26>
 8009a10:	681c      	ldr	r4, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	6053      	str	r3, [r2, #4]
 8009a16:	4421      	add	r1, r4
 8009a18:	6011      	str	r1, [r2, #0]
 8009a1a:	e7da      	b.n	80099d2 <_free_r+0x26>
 8009a1c:	d902      	bls.n	8009a24 <_free_r+0x78>
 8009a1e:	230c      	movs	r3, #12
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	e7d6      	b.n	80099d2 <_free_r+0x26>
 8009a24:	6825      	ldr	r5, [r4, #0]
 8009a26:	1961      	adds	r1, r4, r5
 8009a28:	428b      	cmp	r3, r1
 8009a2a:	bf04      	itt	eq
 8009a2c:	6819      	ldreq	r1, [r3, #0]
 8009a2e:	685b      	ldreq	r3, [r3, #4]
 8009a30:	6063      	str	r3, [r4, #4]
 8009a32:	bf04      	itt	eq
 8009a34:	1949      	addeq	r1, r1, r5
 8009a36:	6021      	streq	r1, [r4, #0]
 8009a38:	6054      	str	r4, [r2, #4]
 8009a3a:	e7ca      	b.n	80099d2 <_free_r+0x26>
 8009a3c:	b003      	add	sp, #12
 8009a3e:	bd30      	pop	{r4, r5, pc}
 8009a40:	2000275c 	.word	0x2000275c

08009a44 <__ssputs_r>:
 8009a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	688e      	ldr	r6, [r1, #8]
 8009a4a:	429e      	cmp	r6, r3
 8009a4c:	4682      	mov	sl, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	4690      	mov	r8, r2
 8009a52:	461f      	mov	r7, r3
 8009a54:	d838      	bhi.n	8009ac8 <__ssputs_r+0x84>
 8009a56:	898a      	ldrh	r2, [r1, #12]
 8009a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a5c:	d032      	beq.n	8009ac4 <__ssputs_r+0x80>
 8009a5e:	6825      	ldr	r5, [r4, #0]
 8009a60:	6909      	ldr	r1, [r1, #16]
 8009a62:	eba5 0901 	sub.w	r9, r5, r1
 8009a66:	6965      	ldr	r5, [r4, #20]
 8009a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a70:	3301      	adds	r3, #1
 8009a72:	444b      	add	r3, r9
 8009a74:	106d      	asrs	r5, r5, #1
 8009a76:	429d      	cmp	r5, r3
 8009a78:	bf38      	it	cc
 8009a7a:	461d      	movcc	r5, r3
 8009a7c:	0553      	lsls	r3, r2, #21
 8009a7e:	d531      	bpl.n	8009ae4 <__ssputs_r+0xa0>
 8009a80:	4629      	mov	r1, r5
 8009a82:	f7ff fe65 	bl	8009750 <_malloc_r>
 8009a86:	4606      	mov	r6, r0
 8009a88:	b950      	cbnz	r0, 8009aa0 <__ssputs_r+0x5c>
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	f8ca 3000 	str.w	r3, [sl]
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	6921      	ldr	r1, [r4, #16]
 8009aa2:	464a      	mov	r2, r9
 8009aa4:	f7ff fe1e 	bl	80096e4 <memcpy>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	6126      	str	r6, [r4, #16]
 8009ab6:	6165      	str	r5, [r4, #20]
 8009ab8:	444e      	add	r6, r9
 8009aba:	eba5 0509 	sub.w	r5, r5, r9
 8009abe:	6026      	str	r6, [r4, #0]
 8009ac0:	60a5      	str	r5, [r4, #8]
 8009ac2:	463e      	mov	r6, r7
 8009ac4:	42be      	cmp	r6, r7
 8009ac6:	d900      	bls.n	8009aca <__ssputs_r+0x86>
 8009ac8:	463e      	mov	r6, r7
 8009aca:	6820      	ldr	r0, [r4, #0]
 8009acc:	4632      	mov	r2, r6
 8009ace:	4641      	mov	r1, r8
 8009ad0:	f000 faa8 	bl	800a024 <memmove>
 8009ad4:	68a3      	ldr	r3, [r4, #8]
 8009ad6:	1b9b      	subs	r3, r3, r6
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	4433      	add	r3, r6
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7db      	b.n	8009a9c <__ssputs_r+0x58>
 8009ae4:	462a      	mov	r2, r5
 8009ae6:	f000 fab7 	bl	800a058 <_realloc_r>
 8009aea:	4606      	mov	r6, r0
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d1e1      	bne.n	8009ab4 <__ssputs_r+0x70>
 8009af0:	6921      	ldr	r1, [r4, #16]
 8009af2:	4650      	mov	r0, sl
 8009af4:	f7ff ff5a 	bl	80099ac <_free_r>
 8009af8:	e7c7      	b.n	8009a8a <__ssputs_r+0x46>
	...

08009afc <_svfiprintf_r>:
 8009afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	4698      	mov	r8, r3
 8009b02:	898b      	ldrh	r3, [r1, #12]
 8009b04:	061b      	lsls	r3, r3, #24
 8009b06:	b09d      	sub	sp, #116	; 0x74
 8009b08:	4607      	mov	r7, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	d50e      	bpl.n	8009b2e <_svfiprintf_r+0x32>
 8009b10:	690b      	ldr	r3, [r1, #16]
 8009b12:	b963      	cbnz	r3, 8009b2e <_svfiprintf_r+0x32>
 8009b14:	2140      	movs	r1, #64	; 0x40
 8009b16:	f7ff fe1b 	bl	8009750 <_malloc_r>
 8009b1a:	6028      	str	r0, [r5, #0]
 8009b1c:	6128      	str	r0, [r5, #16]
 8009b1e:	b920      	cbnz	r0, 8009b2a <_svfiprintf_r+0x2e>
 8009b20:	230c      	movs	r3, #12
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	e0d1      	b.n	8009cce <_svfiprintf_r+0x1d2>
 8009b2a:	2340      	movs	r3, #64	; 0x40
 8009b2c:	616b      	str	r3, [r5, #20]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9309      	str	r3, [sp, #36]	; 0x24
 8009b32:	2320      	movs	r3, #32
 8009b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b3c:	2330      	movs	r3, #48	; 0x30
 8009b3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ce8 <_svfiprintf_r+0x1ec>
 8009b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b46:	f04f 0901 	mov.w	r9, #1
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	469a      	mov	sl, r3
 8009b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b52:	b10a      	cbz	r2, 8009b58 <_svfiprintf_r+0x5c>
 8009b54:	2a25      	cmp	r2, #37	; 0x25
 8009b56:	d1f9      	bne.n	8009b4c <_svfiprintf_r+0x50>
 8009b58:	ebba 0b04 	subs.w	fp, sl, r4
 8009b5c:	d00b      	beq.n	8009b76 <_svfiprintf_r+0x7a>
 8009b5e:	465b      	mov	r3, fp
 8009b60:	4622      	mov	r2, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff ff6d 	bl	8009a44 <__ssputs_r>
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	f000 80aa 	beq.w	8009cc4 <_svfiprintf_r+0x1c8>
 8009b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b72:	445a      	add	r2, fp
 8009b74:	9209      	str	r2, [sp, #36]	; 0x24
 8009b76:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80a2 	beq.w	8009cc4 <_svfiprintf_r+0x1c8>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295
 8009b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b8a:	f10a 0a01 	add.w	sl, sl, #1
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	9307      	str	r3, [sp, #28]
 8009b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b96:	931a      	str	r3, [sp, #104]	; 0x68
 8009b98:	4654      	mov	r4, sl
 8009b9a:	2205      	movs	r2, #5
 8009b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba0:	4851      	ldr	r0, [pc, #324]	; (8009ce8 <_svfiprintf_r+0x1ec>)
 8009ba2:	f7f6 fb15 	bl	80001d0 <memchr>
 8009ba6:	9a04      	ldr	r2, [sp, #16]
 8009ba8:	b9d8      	cbnz	r0, 8009be2 <_svfiprintf_r+0xe6>
 8009baa:	06d0      	lsls	r0, r2, #27
 8009bac:	bf44      	itt	mi
 8009bae:	2320      	movmi	r3, #32
 8009bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb4:	0711      	lsls	r1, r2, #28
 8009bb6:	bf44      	itt	mi
 8009bb8:	232b      	movmi	r3, #43	; 0x2b
 8009bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc4:	d015      	beq.n	8009bf2 <_svfiprintf_r+0xf6>
 8009bc6:	9a07      	ldr	r2, [sp, #28]
 8009bc8:	4654      	mov	r4, sl
 8009bca:	2000      	movs	r0, #0
 8009bcc:	f04f 0c0a 	mov.w	ip, #10
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd6:	3b30      	subs	r3, #48	; 0x30
 8009bd8:	2b09      	cmp	r3, #9
 8009bda:	d94e      	bls.n	8009c7a <_svfiprintf_r+0x17e>
 8009bdc:	b1b0      	cbz	r0, 8009c0c <_svfiprintf_r+0x110>
 8009bde:	9207      	str	r2, [sp, #28]
 8009be0:	e014      	b.n	8009c0c <_svfiprintf_r+0x110>
 8009be2:	eba0 0308 	sub.w	r3, r0, r8
 8009be6:	fa09 f303 	lsl.w	r3, r9, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	46a2      	mov	sl, r4
 8009bf0:	e7d2      	b.n	8009b98 <_svfiprintf_r+0x9c>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	1d19      	adds	r1, r3, #4
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	9103      	str	r1, [sp, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bfbb      	ittet	lt
 8009bfe:	425b      	neglt	r3, r3
 8009c00:	f042 0202 	orrlt.w	r2, r2, #2
 8009c04:	9307      	strge	r3, [sp, #28]
 8009c06:	9307      	strlt	r3, [sp, #28]
 8009c08:	bfb8      	it	lt
 8009c0a:	9204      	strlt	r2, [sp, #16]
 8009c0c:	7823      	ldrb	r3, [r4, #0]
 8009c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c10:	d10c      	bne.n	8009c2c <_svfiprintf_r+0x130>
 8009c12:	7863      	ldrb	r3, [r4, #1]
 8009c14:	2b2a      	cmp	r3, #42	; 0x2a
 8009c16:	d135      	bne.n	8009c84 <_svfiprintf_r+0x188>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	1d1a      	adds	r2, r3, #4
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	9203      	str	r2, [sp, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	bfb8      	it	lt
 8009c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c28:	3402      	adds	r4, #2
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cf8 <_svfiprintf_r+0x1fc>
 8009c30:	7821      	ldrb	r1, [r4, #0]
 8009c32:	2203      	movs	r2, #3
 8009c34:	4650      	mov	r0, sl
 8009c36:	f7f6 facb 	bl	80001d0 <memchr>
 8009c3a:	b140      	cbz	r0, 8009c4e <_svfiprintf_r+0x152>
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	eba0 000a 	sub.w	r0, r0, sl
 8009c42:	fa03 f000 	lsl.w	r0, r3, r0
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	4303      	orrs	r3, r0
 8009c4a:	3401      	adds	r4, #1
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c52:	4826      	ldr	r0, [pc, #152]	; (8009cec <_svfiprintf_r+0x1f0>)
 8009c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c58:	2206      	movs	r2, #6
 8009c5a:	f7f6 fab9 	bl	80001d0 <memchr>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d038      	beq.n	8009cd4 <_svfiprintf_r+0x1d8>
 8009c62:	4b23      	ldr	r3, [pc, #140]	; (8009cf0 <_svfiprintf_r+0x1f4>)
 8009c64:	bb1b      	cbnz	r3, 8009cae <_svfiprintf_r+0x1b2>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	3307      	adds	r3, #7
 8009c6a:	f023 0307 	bic.w	r3, r3, #7
 8009c6e:	3308      	adds	r3, #8
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c74:	4433      	add	r3, r6
 8009c76:	9309      	str	r3, [sp, #36]	; 0x24
 8009c78:	e767      	b.n	8009b4a <_svfiprintf_r+0x4e>
 8009c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c7e:	460c      	mov	r4, r1
 8009c80:	2001      	movs	r0, #1
 8009c82:	e7a5      	b.n	8009bd0 <_svfiprintf_r+0xd4>
 8009c84:	2300      	movs	r3, #0
 8009c86:	3401      	adds	r4, #1
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	f04f 0c0a 	mov.w	ip, #10
 8009c90:	4620      	mov	r0, r4
 8009c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c96:	3a30      	subs	r2, #48	; 0x30
 8009c98:	2a09      	cmp	r2, #9
 8009c9a:	d903      	bls.n	8009ca4 <_svfiprintf_r+0x1a8>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0c5      	beq.n	8009c2c <_svfiprintf_r+0x130>
 8009ca0:	9105      	str	r1, [sp, #20]
 8009ca2:	e7c3      	b.n	8009c2c <_svfiprintf_r+0x130>
 8009ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ca8:	4604      	mov	r4, r0
 8009caa:	2301      	movs	r3, #1
 8009cac:	e7f0      	b.n	8009c90 <_svfiprintf_r+0x194>
 8009cae:	ab03      	add	r3, sp, #12
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	462a      	mov	r2, r5
 8009cb4:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <_svfiprintf_r+0x1f8>)
 8009cb6:	a904      	add	r1, sp, #16
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f3af 8000 	nop.w
 8009cbe:	1c42      	adds	r2, r0, #1
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	d1d6      	bne.n	8009c72 <_svfiprintf_r+0x176>
 8009cc4:	89ab      	ldrh	r3, [r5, #12]
 8009cc6:	065b      	lsls	r3, r3, #25
 8009cc8:	f53f af2c 	bmi.w	8009b24 <_svfiprintf_r+0x28>
 8009ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cce:	b01d      	add	sp, #116	; 0x74
 8009cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd4:	ab03      	add	r3, sp, #12
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	462a      	mov	r2, r5
 8009cda:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <_svfiprintf_r+0x1f8>)
 8009cdc:	a904      	add	r1, sp, #16
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f000 f87a 	bl	8009dd8 <_printf_i>
 8009ce4:	e7eb      	b.n	8009cbe <_svfiprintf_r+0x1c2>
 8009ce6:	bf00      	nop
 8009ce8:	0800a33c 	.word	0x0800a33c
 8009cec:	0800a346 	.word	0x0800a346
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	08009a45 	.word	0x08009a45
 8009cf8:	0800a342 	.word	0x0800a342

08009cfc <_printf_common>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	4616      	mov	r6, r2
 8009d02:	4699      	mov	r9, r3
 8009d04:	688a      	ldr	r2, [r1, #8]
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bfb8      	it	lt
 8009d10:	4613      	movlt	r3, r2
 8009d12:	6033      	str	r3, [r6, #0]
 8009d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d18:	4607      	mov	r7, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	b10a      	cbz	r2, 8009d22 <_printf_common+0x26>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	6033      	str	r3, [r6, #0]
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	0699      	lsls	r1, r3, #26
 8009d26:	bf42      	ittt	mi
 8009d28:	6833      	ldrmi	r3, [r6, #0]
 8009d2a:	3302      	addmi	r3, #2
 8009d2c:	6033      	strmi	r3, [r6, #0]
 8009d2e:	6825      	ldr	r5, [r4, #0]
 8009d30:	f015 0506 	ands.w	r5, r5, #6
 8009d34:	d106      	bne.n	8009d44 <_printf_common+0x48>
 8009d36:	f104 0a19 	add.w	sl, r4, #25
 8009d3a:	68e3      	ldr	r3, [r4, #12]
 8009d3c:	6832      	ldr	r2, [r6, #0]
 8009d3e:	1a9b      	subs	r3, r3, r2
 8009d40:	42ab      	cmp	r3, r5
 8009d42:	dc26      	bgt.n	8009d92 <_printf_common+0x96>
 8009d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d48:	1e13      	subs	r3, r2, #0
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	bf18      	it	ne
 8009d4e:	2301      	movne	r3, #1
 8009d50:	0692      	lsls	r2, r2, #26
 8009d52:	d42b      	bmi.n	8009dac <_printf_common+0xb0>
 8009d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d58:	4649      	mov	r1, r9
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	47c0      	blx	r8
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d01e      	beq.n	8009da0 <_printf_common+0xa4>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	68e5      	ldr	r5, [r4, #12]
 8009d66:	6832      	ldr	r2, [r6, #0]
 8009d68:	f003 0306 	and.w	r3, r3, #6
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	bf08      	it	eq
 8009d70:	1aad      	subeq	r5, r5, r2
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	6922      	ldr	r2, [r4, #16]
 8009d76:	bf0c      	ite	eq
 8009d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d7c:	2500      	movne	r5, #0
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	bfc4      	itt	gt
 8009d82:	1a9b      	subgt	r3, r3, r2
 8009d84:	18ed      	addgt	r5, r5, r3
 8009d86:	2600      	movs	r6, #0
 8009d88:	341a      	adds	r4, #26
 8009d8a:	42b5      	cmp	r5, r6
 8009d8c:	d11a      	bne.n	8009dc4 <_printf_common+0xc8>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e008      	b.n	8009da4 <_printf_common+0xa8>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4652      	mov	r2, sl
 8009d96:	4649      	mov	r1, r9
 8009d98:	4638      	mov	r0, r7
 8009d9a:	47c0      	blx	r8
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d103      	bne.n	8009da8 <_printf_common+0xac>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da8:	3501      	adds	r5, #1
 8009daa:	e7c6      	b.n	8009d3a <_printf_common+0x3e>
 8009dac:	18e1      	adds	r1, r4, r3
 8009dae:	1c5a      	adds	r2, r3, #1
 8009db0:	2030      	movs	r0, #48	; 0x30
 8009db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009db6:	4422      	add	r2, r4
 8009db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	e7c7      	b.n	8009d54 <_printf_common+0x58>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	4649      	mov	r1, r9
 8009dca:	4638      	mov	r0, r7
 8009dcc:	47c0      	blx	r8
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d0e6      	beq.n	8009da0 <_printf_common+0xa4>
 8009dd2:	3601      	adds	r6, #1
 8009dd4:	e7d9      	b.n	8009d8a <_printf_common+0x8e>
	...

08009dd8 <_printf_i>:
 8009dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	7e0f      	ldrb	r7, [r1, #24]
 8009dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009de0:	2f78      	cmp	r7, #120	; 0x78
 8009de2:	4691      	mov	r9, r2
 8009de4:	4680      	mov	r8, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	469a      	mov	sl, r3
 8009dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dee:	d807      	bhi.n	8009e00 <_printf_i+0x28>
 8009df0:	2f62      	cmp	r7, #98	; 0x62
 8009df2:	d80a      	bhi.n	8009e0a <_printf_i+0x32>
 8009df4:	2f00      	cmp	r7, #0
 8009df6:	f000 80d8 	beq.w	8009faa <_printf_i+0x1d2>
 8009dfa:	2f58      	cmp	r7, #88	; 0x58
 8009dfc:	f000 80a3 	beq.w	8009f46 <_printf_i+0x16e>
 8009e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e08:	e03a      	b.n	8009e80 <_printf_i+0xa8>
 8009e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e0e:	2b15      	cmp	r3, #21
 8009e10:	d8f6      	bhi.n	8009e00 <_printf_i+0x28>
 8009e12:	a101      	add	r1, pc, #4	; (adr r1, 8009e18 <_printf_i+0x40>)
 8009e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e85 	.word	0x08009e85
 8009e20:	08009e01 	.word	0x08009e01
 8009e24:	08009e01 	.word	0x08009e01
 8009e28:	08009e01 	.word	0x08009e01
 8009e2c:	08009e01 	.word	0x08009e01
 8009e30:	08009e85 	.word	0x08009e85
 8009e34:	08009e01 	.word	0x08009e01
 8009e38:	08009e01 	.word	0x08009e01
 8009e3c:	08009e01 	.word	0x08009e01
 8009e40:	08009e01 	.word	0x08009e01
 8009e44:	08009f91 	.word	0x08009f91
 8009e48:	08009eb5 	.word	0x08009eb5
 8009e4c:	08009f73 	.word	0x08009f73
 8009e50:	08009e01 	.word	0x08009e01
 8009e54:	08009e01 	.word	0x08009e01
 8009e58:	08009fb3 	.word	0x08009fb3
 8009e5c:	08009e01 	.word	0x08009e01
 8009e60:	08009eb5 	.word	0x08009eb5
 8009e64:	08009e01 	.word	0x08009e01
 8009e68:	08009e01 	.word	0x08009e01
 8009e6c:	08009f7b 	.word	0x08009f7b
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	602a      	str	r2, [r5, #0]
 8009e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0a3      	b.n	8009fcc <_printf_i+0x1f4>
 8009e84:	6820      	ldr	r0, [r4, #0]
 8009e86:	6829      	ldr	r1, [r5, #0]
 8009e88:	0606      	lsls	r6, r0, #24
 8009e8a:	f101 0304 	add.w	r3, r1, #4
 8009e8e:	d50a      	bpl.n	8009ea6 <_printf_i+0xce>
 8009e90:	680e      	ldr	r6, [r1, #0]
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	2e00      	cmp	r6, #0
 8009e96:	da03      	bge.n	8009ea0 <_printf_i+0xc8>
 8009e98:	232d      	movs	r3, #45	; 0x2d
 8009e9a:	4276      	negs	r6, r6
 8009e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ea0:	485e      	ldr	r0, [pc, #376]	; (800a01c <_printf_i+0x244>)
 8009ea2:	230a      	movs	r3, #10
 8009ea4:	e019      	b.n	8009eda <_printf_i+0x102>
 8009ea6:	680e      	ldr	r6, [r1, #0]
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009eae:	bf18      	it	ne
 8009eb0:	b236      	sxthne	r6, r6
 8009eb2:	e7ef      	b.n	8009e94 <_printf_i+0xbc>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	6820      	ldr	r0, [r4, #0]
 8009eb8:	1d19      	adds	r1, r3, #4
 8009eba:	6029      	str	r1, [r5, #0]
 8009ebc:	0601      	lsls	r1, r0, #24
 8009ebe:	d501      	bpl.n	8009ec4 <_printf_i+0xec>
 8009ec0:	681e      	ldr	r6, [r3, #0]
 8009ec2:	e002      	b.n	8009eca <_printf_i+0xf2>
 8009ec4:	0646      	lsls	r6, r0, #25
 8009ec6:	d5fb      	bpl.n	8009ec0 <_printf_i+0xe8>
 8009ec8:	881e      	ldrh	r6, [r3, #0]
 8009eca:	4854      	ldr	r0, [pc, #336]	; (800a01c <_printf_i+0x244>)
 8009ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8009ece:	bf0c      	ite	eq
 8009ed0:	2308      	moveq	r3, #8
 8009ed2:	230a      	movne	r3, #10
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eda:	6865      	ldr	r5, [r4, #4]
 8009edc:	60a5      	str	r5, [r4, #8]
 8009ede:	2d00      	cmp	r5, #0
 8009ee0:	bfa2      	ittt	ge
 8009ee2:	6821      	ldrge	r1, [r4, #0]
 8009ee4:	f021 0104 	bicge.w	r1, r1, #4
 8009ee8:	6021      	strge	r1, [r4, #0]
 8009eea:	b90e      	cbnz	r6, 8009ef0 <_printf_i+0x118>
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	d04d      	beq.n	8009f8c <_printf_i+0x1b4>
 8009ef0:	4615      	mov	r5, r2
 8009ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8009efa:	5dc7      	ldrb	r7, [r0, r7]
 8009efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f00:	4637      	mov	r7, r6
 8009f02:	42bb      	cmp	r3, r7
 8009f04:	460e      	mov	r6, r1
 8009f06:	d9f4      	bls.n	8009ef2 <_printf_i+0x11a>
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d10b      	bne.n	8009f24 <_printf_i+0x14c>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	07de      	lsls	r6, r3, #31
 8009f10:	d508      	bpl.n	8009f24 <_printf_i+0x14c>
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	6861      	ldr	r1, [r4, #4]
 8009f16:	4299      	cmp	r1, r3
 8009f18:	bfde      	ittt	le
 8009f1a:	2330      	movle	r3, #48	; 0x30
 8009f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f24:	1b52      	subs	r2, r2, r5
 8009f26:	6122      	str	r2, [r4, #16]
 8009f28:	f8cd a000 	str.w	sl, [sp]
 8009f2c:	464b      	mov	r3, r9
 8009f2e:	aa03      	add	r2, sp, #12
 8009f30:	4621      	mov	r1, r4
 8009f32:	4640      	mov	r0, r8
 8009f34:	f7ff fee2 	bl	8009cfc <_printf_common>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d14c      	bne.n	8009fd6 <_printf_i+0x1fe>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	b004      	add	sp, #16
 8009f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f46:	4835      	ldr	r0, [pc, #212]	; (800a01c <_printf_i+0x244>)
 8009f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f4c:	6829      	ldr	r1, [r5, #0]
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f54:	6029      	str	r1, [r5, #0]
 8009f56:	061d      	lsls	r5, r3, #24
 8009f58:	d514      	bpl.n	8009f84 <_printf_i+0x1ac>
 8009f5a:	07df      	lsls	r7, r3, #31
 8009f5c:	bf44      	itt	mi
 8009f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f62:	6023      	strmi	r3, [r4, #0]
 8009f64:	b91e      	cbnz	r6, 8009f6e <_printf_i+0x196>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	f023 0320 	bic.w	r3, r3, #32
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	2310      	movs	r3, #16
 8009f70:	e7b0      	b.n	8009ed4 <_printf_i+0xfc>
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	f043 0320 	orr.w	r3, r3, #32
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	2378      	movs	r3, #120	; 0x78
 8009f7c:	4828      	ldr	r0, [pc, #160]	; (800a020 <_printf_i+0x248>)
 8009f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f82:	e7e3      	b.n	8009f4c <_printf_i+0x174>
 8009f84:	0659      	lsls	r1, r3, #25
 8009f86:	bf48      	it	mi
 8009f88:	b2b6      	uxthmi	r6, r6
 8009f8a:	e7e6      	b.n	8009f5a <_printf_i+0x182>
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	e7bb      	b.n	8009f08 <_printf_i+0x130>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	6826      	ldr	r6, [r4, #0]
 8009f94:	6961      	ldr	r1, [r4, #20]
 8009f96:	1d18      	adds	r0, r3, #4
 8009f98:	6028      	str	r0, [r5, #0]
 8009f9a:	0635      	lsls	r5, r6, #24
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	d501      	bpl.n	8009fa4 <_printf_i+0x1cc>
 8009fa0:	6019      	str	r1, [r3, #0]
 8009fa2:	e002      	b.n	8009faa <_printf_i+0x1d2>
 8009fa4:	0670      	lsls	r0, r6, #25
 8009fa6:	d5fb      	bpl.n	8009fa0 <_printf_i+0x1c8>
 8009fa8:	8019      	strh	r1, [r3, #0]
 8009faa:	2300      	movs	r3, #0
 8009fac:	6123      	str	r3, [r4, #16]
 8009fae:	4615      	mov	r5, r2
 8009fb0:	e7ba      	b.n	8009f28 <_printf_i+0x150>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	1d1a      	adds	r2, r3, #4
 8009fb6:	602a      	str	r2, [r5, #0]
 8009fb8:	681d      	ldr	r5, [r3, #0]
 8009fba:	6862      	ldr	r2, [r4, #4]
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f7f6 f906 	bl	80001d0 <memchr>
 8009fc4:	b108      	cbz	r0, 8009fca <_printf_i+0x1f2>
 8009fc6:	1b40      	subs	r0, r0, r5
 8009fc8:	6060      	str	r0, [r4, #4]
 8009fca:	6863      	ldr	r3, [r4, #4]
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd4:	e7a8      	b.n	8009f28 <_printf_i+0x150>
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	462a      	mov	r2, r5
 8009fda:	4649      	mov	r1, r9
 8009fdc:	4640      	mov	r0, r8
 8009fde:	47d0      	blx	sl
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d0ab      	beq.n	8009f3c <_printf_i+0x164>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	079b      	lsls	r3, r3, #30
 8009fe8:	d413      	bmi.n	800a012 <_printf_i+0x23a>
 8009fea:	68e0      	ldr	r0, [r4, #12]
 8009fec:	9b03      	ldr	r3, [sp, #12]
 8009fee:	4298      	cmp	r0, r3
 8009ff0:	bfb8      	it	lt
 8009ff2:	4618      	movlt	r0, r3
 8009ff4:	e7a4      	b.n	8009f40 <_printf_i+0x168>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4632      	mov	r2, r6
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	47d0      	blx	sl
 800a000:	3001      	adds	r0, #1
 800a002:	d09b      	beq.n	8009f3c <_printf_i+0x164>
 800a004:	3501      	adds	r5, #1
 800a006:	68e3      	ldr	r3, [r4, #12]
 800a008:	9903      	ldr	r1, [sp, #12]
 800a00a:	1a5b      	subs	r3, r3, r1
 800a00c:	42ab      	cmp	r3, r5
 800a00e:	dcf2      	bgt.n	8009ff6 <_printf_i+0x21e>
 800a010:	e7eb      	b.n	8009fea <_printf_i+0x212>
 800a012:	2500      	movs	r5, #0
 800a014:	f104 0619 	add.w	r6, r4, #25
 800a018:	e7f5      	b.n	800a006 <_printf_i+0x22e>
 800a01a:	bf00      	nop
 800a01c:	0800a34d 	.word	0x0800a34d
 800a020:	0800a35e 	.word	0x0800a35e

0800a024 <memmove>:
 800a024:	4288      	cmp	r0, r1
 800a026:	b510      	push	{r4, lr}
 800a028:	eb01 0402 	add.w	r4, r1, r2
 800a02c:	d902      	bls.n	800a034 <memmove+0x10>
 800a02e:	4284      	cmp	r4, r0
 800a030:	4623      	mov	r3, r4
 800a032:	d807      	bhi.n	800a044 <memmove+0x20>
 800a034:	1e43      	subs	r3, r0, #1
 800a036:	42a1      	cmp	r1, r4
 800a038:	d008      	beq.n	800a04c <memmove+0x28>
 800a03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a042:	e7f8      	b.n	800a036 <memmove+0x12>
 800a044:	4402      	add	r2, r0
 800a046:	4601      	mov	r1, r0
 800a048:	428a      	cmp	r2, r1
 800a04a:	d100      	bne.n	800a04e <memmove+0x2a>
 800a04c:	bd10      	pop	{r4, pc}
 800a04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a056:	e7f7      	b.n	800a048 <memmove+0x24>

0800a058 <_realloc_r>:
 800a058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05c:	4680      	mov	r8, r0
 800a05e:	4614      	mov	r4, r2
 800a060:	460e      	mov	r6, r1
 800a062:	b921      	cbnz	r1, 800a06e <_realloc_r+0x16>
 800a064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a068:	4611      	mov	r1, r2
 800a06a:	f7ff bb71 	b.w	8009750 <_malloc_r>
 800a06e:	b92a      	cbnz	r2, 800a07c <_realloc_r+0x24>
 800a070:	f7ff fc9c 	bl	80099ac <_free_r>
 800a074:	4625      	mov	r5, r4
 800a076:	4628      	mov	r0, r5
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	f000 f81b 	bl	800a0b6 <_malloc_usable_size_r>
 800a080:	4284      	cmp	r4, r0
 800a082:	4607      	mov	r7, r0
 800a084:	d802      	bhi.n	800a08c <_realloc_r+0x34>
 800a086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a08a:	d812      	bhi.n	800a0b2 <_realloc_r+0x5a>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4640      	mov	r0, r8
 800a090:	f7ff fb5e 	bl	8009750 <_malloc_r>
 800a094:	4605      	mov	r5, r0
 800a096:	2800      	cmp	r0, #0
 800a098:	d0ed      	beq.n	800a076 <_realloc_r+0x1e>
 800a09a:	42bc      	cmp	r4, r7
 800a09c:	4622      	mov	r2, r4
 800a09e:	4631      	mov	r1, r6
 800a0a0:	bf28      	it	cs
 800a0a2:	463a      	movcs	r2, r7
 800a0a4:	f7ff fb1e 	bl	80096e4 <memcpy>
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	f7ff fc7e 	bl	80099ac <_free_r>
 800a0b0:	e7e1      	b.n	800a076 <_realloc_r+0x1e>
 800a0b2:	4635      	mov	r5, r6
 800a0b4:	e7df      	b.n	800a076 <_realloc_r+0x1e>

0800a0b6 <_malloc_usable_size_r>:
 800a0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ba:	1f18      	subs	r0, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfbc      	itt	lt
 800a0c0:	580b      	ldrlt	r3, [r1, r0]
 800a0c2:	18c0      	addlt	r0, r0, r3
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <trunc>:
 800a0c8:	ec51 0b10 	vmov	r0, r1, d0
 800a0cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a0d4:	2b13      	cmp	r3, #19
 800a0d6:	b5d0      	push	{r4, r6, r7, lr}
 800a0d8:	460c      	mov	r4, r1
 800a0da:	dc10      	bgt.n	800a0fe <trunc+0x36>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfa5      	ittet	ge
 800a0e0:	4a11      	ldrge	r2, [pc, #68]	; (800a128 <trunc+0x60>)
 800a0e2:	fa42 f303 	asrge.w	r3, r2, r3
 800a0e6:	2100      	movlt	r1, #0
 800a0e8:	2100      	movge	r1, #0
 800a0ea:	bfb9      	ittee	lt
 800a0ec:	2000      	movlt	r0, #0
 800a0ee:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800a0f2:	2000      	movge	r0, #0
 800a0f4:	ea24 0103 	bicge.w	r1, r4, r3
 800a0f8:	ec41 0b10 	vmov	d0, r0, r1
 800a0fc:	bdd0      	pop	{r4, r6, r7, pc}
 800a0fe:	2b33      	cmp	r3, #51	; 0x33
 800a100:	dd08      	ble.n	800a114 <trunc+0x4c>
 800a102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a106:	d1f7      	bne.n	800a0f8 <trunc+0x30>
 800a108:	ee10 2a10 	vmov	r2, s0
 800a10c:	460b      	mov	r3, r1
 800a10e:	f7f6 f8b5 	bl	800027c <__adddf3>
 800a112:	e7f1      	b.n	800a0f8 <trunc+0x30>
 800a114:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	fa23 f202 	lsr.w	r2, r3, r2
 800a120:	ea20 0602 	bic.w	r6, r0, r2
 800a124:	4630      	mov	r0, r6
 800a126:	e7e7      	b.n	800a0f8 <trunc+0x30>
 800a128:	000fffff 	.word	0x000fffff

0800a12c <_init>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	bf00      	nop
 800a130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a132:	bc08      	pop	{r3}
 800a134:	469e      	mov	lr, r3
 800a136:	4770      	bx	lr

0800a138 <_fini>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	bf00      	nop
 800a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13e:	bc08      	pop	{r3}
 800a140:	469e      	mov	lr, r3
 800a142:	4770      	bx	lr
