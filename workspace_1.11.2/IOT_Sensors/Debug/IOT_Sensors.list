
IOT_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d8  080087d8  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e0  080087e0  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e0  080087e0  000187e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080087e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001874  20000114  080088fc  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  080088fc  00021988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027056  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495b  00000000  00000000  0004719a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  0004baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f78  00000000  00000000  0004dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bea5  00000000  00000000  0004fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b00  00000000  00000000  0007ba75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109645  00000000  00000000  000a1575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aabba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094d0  00000000  00000000  001aac0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800869c 	.word	0x0800869c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800869c 	.word	0x0800869c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <vApplicationGetIdleTaskMemory+0x2c>)
 800094c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <vApplicationGetIdleTaskMemory+0x30>)
 8000952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000130 	.word	0x20000130
 800096c:	200001e4 	.word	0x200001e4

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f001 fa67 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f89f 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 fa69 	bl	8000e54 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000982:	f000 f8fd 	bl	8000b80 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000986:	f000 f933 	bl	8000bf0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800098a:	f000 f971 	bl	8000c70 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800098e:	f000 f995 	bl	8000cbc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000992:	f000 f9d1 	bl	8000d38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000996:	f000 f9ff 	bl	8000d98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800099a:	f000 fa2d 	bl	8000df8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,mag1,sizeof(mag1),1000);
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	2230      	movs	r2, #48	; 0x30
 80009a4:	493a      	ldr	r1, [pc, #232]	; (8000a90 <main+0x120>)
 80009a6:	483b      	ldr	r0, [pc, #236]	; (8000a94 <main+0x124>)
 80009a8:	f004 fefc 	bl	80057a4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,mag2,sizeof(mag2),1000);
 80009ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b0:	222f      	movs	r2, #47	; 0x2f
 80009b2:	4939      	ldr	r1, [pc, #228]	; (8000a98 <main+0x128>)
 80009b4:	4837      	ldr	r0, [pc, #220]	; (8000a94 <main+0x124>)
 80009b6:	f004 fef5 	bl	80057a4 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 80009ba:	f001 f967 	bl	8001c8c <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,mag3,sizeof(mag3),1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	4935      	ldr	r1, [pc, #212]	; (8000a9c <main+0x12c>)
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <main+0x124>)
 80009c8:	f004 feec 	bl	80057a4 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <main+0x130>)
 80009ce:	463c      	mov	r4, r7
 80009d0:	461d      	mov	r5, r3
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009de:	463b      	mov	r3, r7
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fead 	bl	8006742 <osThreadCreate>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <main+0x134>)
 80009ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009ee:	f005 fea1 	bl	8006734 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin) != 0)
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <main+0x138>)
 80009f8:	f001 ff0e 	bl	8002818 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f7      	beq.n	80009f2 <main+0x82>
	  {
		  temp_value = BSP_TSENSOR_ReadTemp();
 8000a02:	f001 f95f 	bl	8001cc4 <BSP_TSENSOR_ReadTemp>
 8000a06:	eef0 7a40 	vmov.f32	s15, s0
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <main+0x13c>)
 8000a0c:	edc3 7a00 	vstr	s15, [r3]
		  int tmpInt1 = temp_value;
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <main+0x13c>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a1a:	ee17 3a90 	vmov	r3, s15
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
		  float tmpFrac = temp_value - tmpInt1;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <main+0x13c>)
 8000a22:	ed93 7a00 	vldr	s14, [r3]
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a34:	edc7 7a08 	vstr	s15, [r7, #32]
		  int tmpInt2 = trunc(tmpFrac * 100);
 8000a38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a3c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000ab0 <main+0x140>
 8000a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a44:	ee17 0a90 	vmov	r0, s15
 8000a48:	f7ff fd76 	bl	8000538 <__aeabi_f2d>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	460b      	mov	r3, r1
 8000a50:	ec43 2b10 	vmov	d0, r2, r3
 8000a54:	f007 fdf0 	bl	8008638 <trunc>
 8000a58:	ec53 2b10 	vmov	r2, r3, d0
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f7ff fdc2 	bl	80005e8 <__aeabi_d2iz>
 8000a64:	4603      	mov	r3, r0
 8000a66:	61fb      	str	r3, [r7, #28]
		  snprintf(str_tmp,100,"TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <main+0x144>)
 8000a70:	2164      	movs	r1, #100	; 0x64
 8000a72:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <main+0x148>)
 8000a74:	f007 fa12 	bl	8007e9c <sniprintf>
		  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp, sizeof(str_tmp),1000);
 8000a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7c:	2264      	movs	r2, #100	; 0x64
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <main+0x148>)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <main+0x124>)
 8000a82:	f004 fe8f 	bl	80057a4 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f001 fa15 	bl	8001eb8 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin) != 0)
 8000a8e:	e7b0      	b.n	80009f2 <main+0x82>
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000518 	.word	0x20000518
 8000a98:	20000030 	.word	0x20000030
 8000a9c:	20000060 	.word	0x20000060
 8000aa0:	080086d8 	.word	0x080086d8
 8000aa4:	20000b2c 	.word	0x20000b2c
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	20000b30 	.word	0x20000b30
 8000ab0:	42c80000 	.word	0x42c80000
 8000ab4:	080086c0 	.word	0x080086c0
 8000ab8:	20000b34 	.word	0x20000b34

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2244      	movs	r2, #68	; 0x44
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 f8d0 	bl	8007c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ade:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae2:	f002 fe7d 	bl	80037e0 <HAL_PWREx_ControlVoltageScaling>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aec:	f000 fb7c 	bl	80011e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af0:	f002 fe58 	bl	80037a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <SystemClock_Config+0xc0>)
 8000af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afa:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <SystemClock_Config+0xc0>)
 8000afc:	f023 0318 	bic.w	r3, r3, #24
 8000b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b04:	2314      	movs	r3, #20
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b14:	2360      	movs	r3, #96	; 0x60
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b24:	2328      	movs	r3, #40	; 0x28
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 ff73 	bl	8003a24 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b44:	f000 fb50 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fb3b 	bl	80041dc <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b6c:	f000 fb3c 	bl	80011e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b70:	f004 f874 	bl	8004c5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b74:	bf00      	nop
 8000b76:	3758      	adds	r7, #88	; 0x58
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000

08000b80 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000b86:	4a19      	ldr	r2, [pc, #100]	; (8000bec <MX_DFSDM1_Init+0x6c>)
 8000b88:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_DFSDM1_Init+0x68>)
 8000bd6:	f001 fa75 	bl	80020c4 <HAL_DFSDM_ChannelInit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000be0:	f000 fb02 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200003e4 	.word	0x200003e4
 8000bec:	40016020 	.word	0x40016020

08000bf0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <MX_I2C2_Init+0x78>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <MX_I2C2_Init+0x7c>)
 8000bfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c2a:	480e      	ldr	r0, [pc, #56]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c2c:	f001 fe47 	bl	80028be <HAL_I2C_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c36:	f000 fad7 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c3e:	f002 fbd1 	bl	80033e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c48:	f000 face 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_I2C2_Init+0x74>)
 8000c50:	f002 fc13 	bl	800347a <HAL_I2CEx_ConfigDigitalFilter>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 fac5 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000041c 	.word	0x2000041c
 8000c68:	40005800 	.word	0x40005800
 8000c6c:	10909cec 	.word	0x10909cec

08000c70 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <MX_QUADSPI_Init+0x48>)
 8000c78:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c88:	2210      	movs	r2, #16
 8000c8a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c8e:	2217      	movs	r2, #23
 8000c90:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_QUADSPI_Init+0x44>)
 8000ca0:	f002 fe04 	bl	80038ac <HAL_QSPI_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000caa:	f000 fa9d 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000470 	.word	0x20000470
 8000cb8:	a0001000 	.word	0xa0001000

08000cbc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_SPI3_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000d16:	2208      	movs	r2, #8
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_SPI3_Init+0x74>)
 8000d1c:	f004 f980 	bl	8005020 <HAL_SPI_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 fa5f 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200004b4 	.word	0x200004b4
 8000d34:	40003c00 	.word	0x40003c00

08000d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_USART1_UART_Init+0x5c>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d7c:	f004 fcc4 	bl	8005708 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 fa2f 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000518 	.word	0x20000518
 8000d94:	40013800 	.word	0x40013800

08000d98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <MX_USART3_UART_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART3_UART_Init+0x58>)
 8000ddc:	f004 fc94 	bl	8005708 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 f9ff 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000059c 	.word	0x2000059c
 8000df4:	40004800 	.word	0x40004800

08000df8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e06:	2206      	movs	r2, #6
 8000e08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3c:	f002 fb69 	bl	8003512 <HAL_PCD_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e46:	f000 f9cf 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000620 	.word	0x20000620

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4bbc      	ldr	r3, [pc, #752]	; (800115c <MX_GPIO_Init+0x308>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4abb      	ldr	r2, [pc, #748]	; (800115c <MX_GPIO_Init+0x308>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4bb9      	ldr	r3, [pc, #740]	; (800115c <MX_GPIO_Init+0x308>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4bb6      	ldr	r3, [pc, #728]	; (800115c <MX_GPIO_Init+0x308>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4ab5      	ldr	r2, [pc, #724]	; (800115c <MX_GPIO_Init+0x308>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4bb3      	ldr	r3, [pc, #716]	; (800115c <MX_GPIO_Init+0x308>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4bb0      	ldr	r3, [pc, #704]	; (800115c <MX_GPIO_Init+0x308>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4aaf      	ldr	r2, [pc, #700]	; (800115c <MX_GPIO_Init+0x308>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4bad      	ldr	r3, [pc, #692]	; (800115c <MX_GPIO_Init+0x308>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4baa      	ldr	r3, [pc, #680]	; (800115c <MX_GPIO_Init+0x308>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4aa9      	ldr	r2, [pc, #676]	; (800115c <MX_GPIO_Init+0x308>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4ba7      	ldr	r3, [pc, #668]	; (800115c <MX_GPIO_Init+0x308>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4ba4      	ldr	r3, [pc, #656]	; (800115c <MX_GPIO_Init+0x308>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4aa3      	ldr	r2, [pc, #652]	; (800115c <MX_GPIO_Init+0x308>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4ba1      	ldr	r3, [pc, #644]	; (800115c <MX_GPIO_Init+0x308>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ee8:	489d      	ldr	r0, [pc, #628]	; (8001160 <MX_GPIO_Init+0x30c>)
 8000eea:	f001 fcad 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f001 fca6 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000efc:	2200      	movs	r2, #0
 8000efe:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f02:	4898      	ldr	r0, [pc, #608]	; (8001164 <MX_GPIO_Init+0x310>)
 8000f04:	f001 fca0 	bl	8002848 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f0e:	4896      	ldr	r0, [pc, #600]	; (8001168 <MX_GPIO_Init+0x314>)
 8000f10:	f001 fc9a 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	4893      	ldr	r0, [pc, #588]	; (8001168 <MX_GPIO_Init+0x314>)
 8000f1c:	f001 fc94 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f26:	4891      	ldr	r0, [pc, #580]	; (800116c <MX_GPIO_Init+0x318>)
 8000f28:	f001 fc8e 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2120      	movs	r1, #32
 8000f30:	488c      	ldr	r0, [pc, #560]	; (8001164 <MX_GPIO_Init+0x310>)
 8000f32:	f001 fc89 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4889      	ldr	r0, [pc, #548]	; (8001160 <MX_GPIO_Init+0x30c>)
 8000f3c:	f001 fc84 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f40:	f240 1315 	movw	r3, #277	; 0x115
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4881      	ldr	r0, [pc, #516]	; (8001160 <MX_GPIO_Init+0x30c>)
 8000f5a:	f001 f9bf 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f5e:	236a      	movs	r3, #106	; 0x6a
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	487b      	ldr	r0, [pc, #492]	; (8001160 <MX_GPIO_Init+0x30c>)
 8000f74:	f001 f9b2 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BlueB_Pin */
  GPIO_InitStruct.Pin = BlueB_Pin;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4877      	ldr	r0, [pc, #476]	; (800116c <MX_GPIO_Init+0x318>)
 8000f8e:	f001 f9a5 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f92:	233f      	movs	r3, #63	; 0x3f
 8000f94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f96:	230b      	movs	r3, #11
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4871      	ldr	r0, [pc, #452]	; (800116c <MX_GPIO_Init+0x318>)
 8000fa6:	f001 f999 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000faa:	2303      	movs	r3, #3
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f001 f988 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000fcc:	f248 1304 	movw	r3, #33028	; 0x8104
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f001 f978 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000fec:	2308      	movs	r3, #8
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f001 f967 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001012:	230b      	movs	r3, #11
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f001 f95a 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001028:	23e0      	movs	r3, #224	; 0xe0
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001038:	2305      	movs	r3, #5
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f001 f949 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4841      	ldr	r0, [pc, #260]	; (8001164 <MX_GPIO_Init+0x310>)
 8001060:	f001 f93c 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001068:	230b      	movs	r3, #11
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	483b      	ldr	r0, [pc, #236]	; (8001164 <MX_GPIO_Init+0x310>)
 8001078:	f001 f930 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800107c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001080:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4833      	ldr	r0, [pc, #204]	; (8001164 <MX_GPIO_Init+0x310>)
 8001096:	f001 f921 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800109a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800109e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	482d      	ldr	r0, [pc, #180]	; (8001168 <MX_GPIO_Init+0x314>)
 80010b2:	f001 f913 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010b6:	f243 0381 	movw	r3, #12417	; 0x3081
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_GPIO_Init+0x314>)
 80010d0:	f001 f904 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	481f      	ldr	r0, [pc, #124]	; (800116c <MX_GPIO_Init+0x318>)
 80010ee:	f001 f8f5 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4818      	ldr	r0, [pc, #96]	; (800116c <MX_GPIO_Init+0x318>)
 800110a:	f001 f8e7 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111e:	2305      	movs	r3, #5
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <MX_GPIO_Init+0x314>)
 800112a:	f001 f8d7 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800112e:	2378      	movs	r3, #120	; 0x78
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_GPIO_Init+0x314>)
 800114a:	f001 f8c7 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800114e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001154:	2312      	movs	r3, #18
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	e009      	b.n	8001170 <MX_GPIO_Init+0x31c>
 800115c:	40021000 	.word	0x40021000
 8001160:	48001000 	.word	0x48001000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48000800 	.word	0x48000800
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001176:	2304      	movs	r3, #4
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0x35c>)
 8001182:	f001 f8ab 	bl	80022dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	2017      	movs	r0, #23
 800118c:	f000 ff70 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001190:	2017      	movs	r0, #23
 8001192:	f000 ff89 	bl	80020a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	2028      	movs	r0, #40	; 0x28
 800119c:	f000 ff68 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a0:	2028      	movs	r0, #40	; 0x28
 80011a2:	f000 ff81 	bl	80020a8 <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	48000400 	.word	0x48000400

080011b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f005 fb0c 	bl	80067da <osDelay>
 80011c2:	e7fb      	b.n	80011bc <StartDefaultTask+0x8>

080011c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d6:	f000 fe4f 	bl	8001e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012c00 	.word	0x40012c00

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_MspInit+0x4c>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_MspInit+0x4c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	; 0x60
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_MspInit+0x4c>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_MspInit+0x4c>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_MspInit+0x4c>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	210f      	movs	r1, #15
 800122e:	f06f 0001 	mvn.w	r0, #1
 8001232:	f000 ff1d 	bl	8002070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ac      	sub	sp, #176	; 0xb0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2288      	movs	r2, #136	; 0x88
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 fd03 	bl	8007c70 <memset>
  if(DFSDM1_Init == 0)
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d142      	bne.n	80012f8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001276:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fa00 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800128e:	f7ff ffab 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129c:	6613      	str	r3, [r2, #96]	; 0x60
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80012c2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012dc:	2306      	movs	r3, #6
 80012de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80012ea:	f000 fff7 	bl	80022dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a02      	ldr	r2, [pc, #8]	; (8001300 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012f6:	6013      	str	r3, [r2, #0]
  }

}
 80012f8:	bf00      	nop
 80012fa:	37b0      	adds	r7, #176	; 0xb0
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000b98 	.word	0x20000b98
 8001304:	40021000 	.word	0x40021000
 8001308:	48001000 	.word	0x48001000

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ac      	sub	sp, #176	; 0xb0
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2288      	movs	r2, #136	; 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f006 fc9f 	bl	8007c70 <memset>
  if(hi2c->Instance==I2C2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <HAL_I2C_MspInit+0xb0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d13b      	bne.n	80013b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f99d 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001354:	f7ff ff48 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001370:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2312      	movs	r3, #18
 800137a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800138a:	2304      	movs	r3, #4
 800138c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001394:	4619      	mov	r1, r3
 8001396:	480b      	ldr	r0, [pc, #44]	; (80013c4 <HAL_I2C_MspInit+0xb8>)
 8001398:	f000 ffa0 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 80013a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a6:	6593      	str	r3, [r2, #88]	; 0x58
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	37b0      	adds	r7, #176	; 0xb0
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40005800 	.word	0x40005800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_I2C_MspDeInit+0x3c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10f      	bne.n	80013fa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_I2C_MspDeInit+0x40>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_I2C_MspDeInit+0x40>)
 80013e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80013e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <HAL_I2C_MspDeInit+0x44>)
 80013ec:	f001 f920 	bl	8002630 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80013f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_I2C_MspDeInit+0x44>)
 80013f6:	f001 f91b 	bl	8002630 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40005800 	.word	0x40005800
 8001408:	40021000 	.word	0x40021000
 800140c:	48000400 	.word	0x48000400

08001410 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_QSPI_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d128      	bne.n	8001484 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6513      	str	r3, [r2, #80]	; 0x50
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001462:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001466:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001474:	230a      	movs	r3, #10
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_QSPI_MspInit+0x84>)
 8001480:	f000 ff2c 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	a0001000 	.word	0xa0001000
 8001490:	40021000 	.word	0x40021000
 8001494:	48001000 	.word	0x48001000

08001498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_SPI_MspInit+0x7c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d128      	bne.n	800150c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014fc:	2306      	movs	r3, #6
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <HAL_SPI_MspInit+0x84>)
 8001508:	f000 fee8 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40003c00 	.word	0x40003c00
 8001518:	40021000 	.word	0x40021000
 800151c:	48000800 	.word	0x48000800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ae      	sub	sp, #184	; 0xb8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	2288      	movs	r2, #136	; 0x88
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fb95 	bl	8007c70 <memset>
  if(huart->Instance==USART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a42      	ldr	r2, [pc, #264]	; (8001654 <HAL_UART_MspInit+0x134>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13b      	bne.n	80015c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001550:	2301      	movs	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001554:	2300      	movs	r3, #0
 8001556:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4618      	mov	r0, r3
 800155e:	f003 f893 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001568:	f7ff fe3e 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_UART_MspInit+0x138>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	4a39      	ldr	r2, [pc, #228]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6613      	str	r3, [r2, #96]	; 0x60
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_UART_MspInit+0x138>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a33      	ldr	r2, [pc, #204]	; (8001658 <HAL_UART_MspInit+0x138>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800159c:	23c0      	movs	r3, #192	; 0xc0
 800159e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <HAL_UART_MspInit+0x13c>)
 80015c2:	f000 fe8b 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c6:	e040      	b.n	800164a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_UART_MspInit+0x140>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d13b      	bne.n	800164a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d2:	2304      	movs	r3, #4
 80015d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 f852 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015ea:	f7ff fdfd 	bl	80011e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_UART_MspInit+0x138>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_UART_MspInit+0x138>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_UART_MspInit+0x138>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_UART_MspInit+0x138>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001638:	2307      	movs	r3, #7
 800163a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <HAL_UART_MspInit+0x144>)
 8001646:	f000 fe49 	bl	80022dc <HAL_GPIO_Init>
}
 800164a:	bf00      	nop
 800164c:	37b8      	adds	r7, #184	; 0xb8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40013800 	.word	0x40013800
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400
 8001660:	40004800 	.word	0x40004800
 8001664:	48000c00 	.word	0x48000c00

08001668 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ac      	sub	sp, #176	; 0xb0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2288      	movs	r2, #136	; 0x88
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f006 faf1 	bl	8007c70 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001696:	d17c      	bne.n	8001792 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800169e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016ae:	2318      	movs	r3, #24
 80016b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 ffdd 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016d4:	f7ff fd88 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_PCD_MspInit+0x134>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_PCD_MspInit+0x134>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_PCD_MspInit+0x134>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80016f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f000 fde5 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001712:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800172c:	230a      	movs	r3, #10
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f000 fdce 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_PCD_MspInit+0x134>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_PCD_MspInit+0x134>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d114      	bne.n	800178e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_PCD_MspInit+0x134>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800177c:	f002 f886 	bl	800388c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800178c:	e001      	b.n	8001792 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800178e:	f002 f87d 	bl	800388c <HAL_PWREx_EnableVddUSB>
}
 8001792:	bf00      	nop
 8001794:	37b0      	adds	r7, #176	; 0xb0
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_InitTick+0xc8>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <HAL_InitTick+0xc8>)
 80017b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_InitTick+0xc8>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c6:	f107 020c 	add.w	r2, r7, #12
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fec7 	bl	8004564 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017d6:	f002 feaf 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 80017da:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_InitTick+0xcc>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	3b01      	subs	r3, #1
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_InitTick+0xd0>)
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_InitTick+0xd4>)
 80017ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_InitTick+0xd0>)
 80017f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_InitTick+0xd0>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_InitTick+0xd0>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_InitTick+0xd0>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_InitTick+0xd0>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <HAL_InitTick+0xd0>)
 8001812:	f003 fca8 	bl	8005166 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800181c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11b      	bne.n	800185c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001824:	4812      	ldr	r0, [pc, #72]	; (8001870 <HAL_InitTick+0xd0>)
 8001826:	f003 fcff 	bl	8005228 <HAL_TIM_Base_Start_IT>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001838:	2019      	movs	r0, #25
 800183a:	f000 fc35 	bl	80020a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d808      	bhi.n	8001856 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	2019      	movs	r0, #25
 800184a:	f000 fc11 	bl	8002070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_InitTick+0xd8>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e002      	b.n	800185c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800185c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001860:	4618      	mov	r0, r3
 8001862:	3730      	adds	r7, #48	; 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	431bde83 	.word	0x431bde83
 8001870:	20000b9c 	.word	0x20000b9c
 8001874:	40012c00 	.word	0x40012c00
 8001878:	200000a4 	.word	0x200000a4

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80018ac:	2020      	movs	r0, #32
 80018ae:	f000 ffe3 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80018b2:	2040      	movs	r0, #64	; 0x40
 80018b4:	f000 ffe0 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80018b8:	2080      	movs	r0, #128	; 0x80
 80018ba:	f000 ffdd 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80018be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018c2:	f000 ffd9 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018d2:	f003 fd19 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000b9c 	.word	0x20000b9c

080018e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80018e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018e8:	f000 ffc6 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80018ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018f0:	f000 ffc2 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80018f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018f8:	f000 ffbe 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80018fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001900:	f000 ffba 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f006 f960 	bl	8007bfc <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20018000 	.word	0x20018000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000be8 	.word	0x20000be8
 8001970:	20001988 	.word	0x20001988

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff ffea 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <LoopForever+0xe>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b8:	4c0a      	ldr	r4, [pc, #40]	; (80019e4 <LoopForever+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f006 f91f 	bl	8007c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ca:	f7fe ffd1 	bl	8000970 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80019dc:	080087e8 	.word	0x080087e8
  ldr r2, =_sbss
 80019e0:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 80019e4:	20001988 	.word	0x20001988

080019e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_2_IRQHandler>
	...

080019ec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <I2Cx_MspInit+0xa8>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <I2Cx_MspInit+0xa8>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001a0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	481b      	ldr	r0, [pc, #108]	; (8001a98 <I2Cx_MspInit+0xac>)
 8001a2a:	f000 fc57 	bl	80022dc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <I2Cx_MspInit+0xac>)
 8001a36:	f000 fc51 	bl	80022dc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a62:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a68:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	2021      	movs	r0, #33	; 0x21
 8001a70:	f000 fafe 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001a74:	2021      	movs	r0, #33	; 0x21
 8001a76:	f000 fb17 	bl	80020a8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	2022      	movs	r0, #34	; 0x22
 8001a80:	f000 faf6 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001a84:	2022      	movs	r0, #34	; 0x22
 8001a86:	f000 fb0f 	bl	80020a8 <HAL_NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400

08001a9c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <I2Cx_Init+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <I2Cx_Init+0x58>)
 8001aae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff89 	bl	80019ec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 feef 	bl	80028be <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 fc7e 	bl	80033e4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40005800 	.word	0x40005800
 8001af4:	00702681 	.word	0x00702681

08001af8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	72fb      	strb	r3, [r7, #11]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	88f8      	ldrh	r0, [r7, #6]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f001 f898 	bl	8002c64 <HAL_I2C_Mem_Read>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	4619      	mov	r1, r3
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f832 	bl	8001bac <I2Cx_Error>
  }
  return status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af04      	add	r7, sp, #16
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4603      	mov	r3, r0
 8001b62:	72fb      	strb	r3, [r7, #11]
 8001b64:	460b      	mov	r3, r1
 8001b66:	813b      	strh	r3, [r7, #8]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	b299      	uxth	r1, r3
 8001b74:	88f8      	ldrh	r0, [r7, #6]
 8001b76:	893a      	ldrh	r2, [r7, #8]
 8001b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 ff57 	bl	8002a3c <HAL_I2C_Mem_Write>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f805 	bl	8001bac <I2Cx_Error>
  }
  return status;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 ff0f 	bl	80029dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff6c 	bl	8001a9c <I2Cx_Init>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <SENSOR_IO_Init+0x10>)
 8001bd2:	f7ff ff63 	bl	8001a9c <I2Cx_Init>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000bec 	.word	0x20000bec

08001be0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	460b      	mov	r3, r1
 8001bec:	71bb      	strb	r3, [r7, #6]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	79f9      	ldrb	r1, [r7, #7]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	1d7b      	adds	r3, r7, #5
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <SENSOR_IO_Write+0x30>)
 8001c04:	f7ff ffa5 	bl	8001b52 <I2Cx_WriteMultiple>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000bec 	.word	0x20000bec

08001c14 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	79f9      	ldrb	r1, [r7, #7]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f107 030f 	add.w	r3, r7, #15
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <SENSOR_IO_Read+0x38>)
 8001c3c:	f7ff ff5c 	bl	8001af8 <I2Cx_ReadMultiple>

  return read_value;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000bec 	.word	0x20000bec

08001c50 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	603a      	str	r2, [r7, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	71bb      	strb	r3, [r7, #6]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	79f9      	ldrb	r1, [r7, #7]
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2301      	movs	r3, #1
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <SENSOR_IO_ReadMultiple+0x38>)
 8001c78:	f7ff ff3e 	bl	8001af8 <I2Cx_ReadMultiple>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b29b      	uxth	r3, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000bec 	.word	0x20000bec

08001c8c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <BSP_TSENSOR_Init+0x30>)
 8001c98:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <BSP_TSENSOR_Init+0x34>)
 8001c9a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001c9c:	f7ff ff96 	bl	8001bcc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <BSP_TSENSOR_Init+0x30>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	20be      	movs	r0, #190	; 0xbe
 8001caa:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000c40 	.word	0x20000c40
 8001cc0:	20000094 	.word	0x20000094

08001cc4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <BSP_TSENSOR_ReadTemp+0x18>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	20be      	movs	r0, #190	; 0xbe
 8001cd0:	4798      	blx	r3
 8001cd2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000c40 	.word	0x20000c40

08001ce0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff8e 	bl	8001c14 <SENSOR_IO_Read>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d22:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff57 	bl	8001be0 <SENSOR_IO_Write>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b088      	sub	sp, #32
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2d8      	uxtb	r0, r3
 8001d48:	f107 0208 	add.w	r2, r7, #8
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	21b2      	movs	r1, #178	; 0xb2
 8001d50:	f7ff ff7e 	bl	8001c50 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2135      	movs	r1, #53	; 0x35
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff5a 	bl	8001c14 <SENSOR_IO_Read>
 8001d60:	4603      	mov	r3, r0
 8001d62:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	7a3b      	ldrb	r3, [r7, #8]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001d78:	7ffb      	ldrb	r3, [r7, #31]
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	7a7b      	ldrb	r3, [r7, #9]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	10db      	asrs	r3, r3, #3
 8001d92:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001d94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	b2d8      	uxtb	r0, r3
 8001da0:	f107 0208 	add.w	r2, r7, #8
 8001da4:	2304      	movs	r3, #4
 8001da6:	21bc      	movs	r1, #188	; 0xbc
 8001da8:	f7ff ff52 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001dac:	7a7b      	ldrb	r3, [r7, #9]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	7a3b      	ldrb	r3, [r7, #8]
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001dba:	7afb      	ldrb	r3, [r7, #11]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	7abb      	ldrb	r3, [r7, #10]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	b2d8      	uxtb	r0, r3
 8001dcc:	f107 0208 	add.w	r2, r7, #8
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	21aa      	movs	r1, #170	; 0xaa
 8001dd4:	f7ff ff3c 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001dd8:	7a7b      	ldrb	r3, [r7, #9]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	7a3b      	ldrb	r3, [r7, #8]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001de6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001dea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dfc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e34:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	ee07 3a90 	vmov	s15, r3
}
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f000 f901 	bl	800205a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f7ff fca1 	bl	80017a0 <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	e001      	b.n	8001e6e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e6a:	f7ff f9c3 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	200000a8 	.word	0x200000a8
 8001e9c:	20000c44 	.word	0x20000c44

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000c44 	.word	0x20000c44

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_Delay+0x44>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000a8 	.word	0x200000a8

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff4c 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002082:	f7ff ff61 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 8002086:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	6978      	ldr	r0, [r7, #20]
 800208e:	f7ff ffb1 	bl	8001ff4 <NVIC_EncodePriority>
 8002092:	4602      	mov	r2, r0
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff80 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff54 	bl	8001f64 <__NVIC_EnableIRQ>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0ac      	b.n	8002230 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f8b2 	bl	8002244 <DFSDM_GetChannelFromInstance>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_DFSDM_ChannelInit+0x174>)
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e09f      	b.n	8002230 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff f8a7 	bl	8001244 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_DFSDM_ChannelInit+0x178>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_DFSDM_ChannelInit+0x178>)
 80020fe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <HAL_DFSDM_ChannelInit+0x178>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d125      	bne.n	8002154 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800210e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002112:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4948      	ldr	r1, [pc, #288]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002128:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800212c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	493f      	ldr	r1, [pc, #252]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3c      	ldr	r2, [pc, #240]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800214e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002152:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002162:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002172:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002178:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 020f 	bic.w	r2, r2, #15
 8002190:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021b8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 0207 	and.w	r2, r2, #7
 80021e4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002210:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f810 	bl	8002244 <DFSDM_GetChannelFromInstance>
 8002224:	4602      	mov	r2, r0
 8002226:	4904      	ldr	r1, [pc, #16]	; (8002238 <HAL_DFSDM_ChannelInit+0x174>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000c4c 	.word	0x20000c4c
 800223c:	20000c48 	.word	0x20000c48
 8002240:	40016000 	.word	0x40016000

08002244 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d102      	bne.n	800225a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e02b      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <DFSDM_GetChannelFromInstance+0x80>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d102      	bne.n	8002268 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e024      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <DFSDM_GetChannelFromInstance+0x84>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002270:	2302      	movs	r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e01d      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <DFSDM_GetChannelFromInstance+0x88>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d102      	bne.n	8002284 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800227e:	2304      	movs	r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e016      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d102      	bne.n	8002292 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800228c:	2305      	movs	r3, #5
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e00f      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <DFSDM_GetChannelFromInstance+0x90>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d102      	bne.n	80022a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800229a:	2306      	movs	r3, #6
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e008      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <DFSDM_GetChannelFromInstance+0x94>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d102      	bne.n	80022ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022a8:	2307      	movs	r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e001      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022ae:	2303      	movs	r3, #3
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40016000 	.word	0x40016000
 80022c4:	40016020 	.word	0x40016020
 80022c8:	40016040 	.word	0x40016040
 80022cc:	40016080 	.word	0x40016080
 80022d0:	400160a0 	.word	0x400160a0
 80022d4:	400160c0 	.word	0x400160c0
 80022d8:	400160e0 	.word	0x400160e0

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e17f      	b.n	80025ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8171 	beq.w	80025e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d005      	beq.n	800231c <HAL_GPIO_Init+0x40>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d130      	bne.n	800237e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002352:	2201      	movs	r2, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 0201 	and.w	r2, r3, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d118      	bne.n	80023bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d017      	beq.n	80023f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ac 	beq.w	80025e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_GPIO_Init+0x330>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	4a5e      	ldr	r2, [pc, #376]	; (800260c <HAL_GPIO_Init+0x330>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6613      	str	r3, [r2, #96]	; 0x60
 800249a:	4b5c      	ldr	r3, [pc, #368]	; (800260c <HAL_GPIO_Init+0x330>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a6:	4a5a      	ldr	r2, [pc, #360]	; (8002610 <HAL_GPIO_Init+0x334>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d0:	d025      	beq.n	800251e <HAL_GPIO_Init+0x242>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x338>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x23e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x33c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x23a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x340>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x236>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x344>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x232>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x348>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x22e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x34c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x22a>
 8002502:	2306      	movs	r3, #6
 8002504:	e00c      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002506:	2307      	movs	r3, #7
 8002508:	e00a      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800250a:	2305      	movs	r3, #5
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800250e:	2304      	movs	r3, #4
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800251e:	2300      	movs	r3, #0
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_GPIO_Init+0x350>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_GPIO_Init+0x350>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_GPIO_Init+0x350>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_GPIO_Init+0x350>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_GPIO_Init+0x350>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x350>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x350>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_GPIO_Init+0x350>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f ae78 	bne.w	80022ec <HAL_GPIO_Init+0x10>
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	48001400 	.word	0x48001400
 8002628:	48001800 	.word	0x48001800
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800263e:	e0cd      	b.n	80027dc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002640:	2201      	movs	r2, #1
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80c0 	beq.w	80027d6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002656:	4a68      	ldr	r2, [pc, #416]	; (80027f8 <HAL_GPIO_DeInit+0x1c8>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800267e:	d025      	beq.n	80026cc <HAL_GPIO_DeInit+0x9c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a5e      	ldr	r2, [pc, #376]	; (80027fc <HAL_GPIO_DeInit+0x1cc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d01f      	beq.n	80026c8 <HAL_GPIO_DeInit+0x98>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <HAL_GPIO_DeInit+0x1d0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d019      	beq.n	80026c4 <HAL_GPIO_DeInit+0x94>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a5c      	ldr	r2, [pc, #368]	; (8002804 <HAL_GPIO_DeInit+0x1d4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <HAL_GPIO_DeInit+0x90>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <HAL_GPIO_DeInit+0x1d8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00d      	beq.n	80026bc <HAL_GPIO_DeInit+0x8c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a5a      	ldr	r2, [pc, #360]	; (800280c <HAL_GPIO_DeInit+0x1dc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <HAL_GPIO_DeInit+0x88>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a59      	ldr	r2, [pc, #356]	; (8002810 <HAL_GPIO_DeInit+0x1e0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d101      	bne.n	80026b4 <HAL_GPIO_DeInit+0x84>
 80026b0:	2306      	movs	r3, #6
 80026b2:	e00c      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026b4:	2307      	movs	r3, #7
 80026b6:	e00a      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026b8:	2305      	movs	r3, #5
 80026ba:	e008      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026bc:	2304      	movs	r3, #4
 80026be:	e006      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026c0:	2303      	movs	r3, #3
 80026c2:	e004      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026cc:	2300      	movs	r3, #0
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	f002 0203 	and.w	r2, r2, #3
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	4093      	lsls	r3, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d132      	bne.n	8002744 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026de:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	494b      	ldr	r1, [pc, #300]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80026ec:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4947      	ldr	r1, [pc, #284]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	4944      	ldr	r1, [pc, #272]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 8002704:	4013      	ands	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002708:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	4940      	ldr	r1, [pc, #256]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 8002712:	4013      	ands	r3, r2
 8002714:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002726:	4a34      	ldr	r2, [pc, #208]	; (80027f8 <HAL_GPIO_DeInit+0x1c8>)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	43da      	mvns	r2, r3
 8002736:	4830      	ldr	r0, [pc, #192]	; (80027f8 <HAL_GPIO_DeInit+0x1c8>)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	400a      	ands	r2, r1
 800273e:	3302      	adds	r3, #2
 8002740:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2103      	movs	r1, #3
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	08d2      	lsrs	r2, r2, #3
 8002778:	4019      	ands	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2103      	movs	r1, #3
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	2101      	movs	r1, #1
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2103      	movs	r1, #3
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c6:	2101      	movs	r1, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f47f af2b 	bne.w	8002640 <HAL_GPIO_DeInit+0x10>
  }
}
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40010000 	.word	0x40010000
 80027fc:	48000400 	.word	0x48000400
 8002800:	48000800 	.word	0x48000800
 8002804:	48000c00 	.word	0x48000c00
 8002808:	48001000 	.word	0x48001000
 800280c:	48001400 	.word	0x48001400
 8002810:	48001800 	.word	0x48001800
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002864:	e002      	b.n	800286c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f806 	bl	80028a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e081      	b.n	80029d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fd11 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2224      	movs	r2, #36	; 0x24
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800291e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	e006      	b.n	8002946 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d104      	bne.n	8002958 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002956:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800297a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69d9      	ldr	r1, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e021      	b.n	8002a32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fcde 	bl	80013c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	f040 80f9 	bne.w	8002c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x34>
 8002a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ed      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Mem_Write+0x4e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0e6      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a92:	f7ff fa05 	bl	8001ea0 <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2319      	movs	r3, #25
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fac3 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d1      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2221      	movs	r2, #33	; 0x21
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002adc:	88f8      	ldrh	r0, [r7, #6]
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4603      	mov	r3, r0
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f9d3 	bl	8002e98 <I2C_RequestMemoryWrite>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0a9      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2bff      	cmp	r3, #255	; 0xff
 8002b0c:	d90e      	bls.n	8002b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fc2b 	bl	8003380 <I2C_TransferConfig>
 8002b2a:	e00f      	b.n	8002b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fc1a 	bl	8003380 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 faad 	bl	80030b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e07b      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d034      	beq.n	8002c04 <HAL_I2C_Mem_Write+0x1c8>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d130      	bne.n	8002c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa3f 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e04d      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2bff      	cmp	r3, #255	; 0xff
 8002bc4:	d90e      	bls.n	8002be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fbcf 	bl	8003380 <I2C_TransferConfig>
 8002be2:	e00f      	b.n	8002c04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fbbe 	bl	8003380 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d19e      	bne.n	8002b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fa8c 	bl	8003130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e01a      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2220      	movs	r2, #32
 8002c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_I2C_Mem_Write+0x224>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fe00e800 	.word	0xfe00e800

08002c64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f040 80fd 	bne.w	8002e86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x34>
 8002c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0f1      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Mem_Read+0x4e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ea      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cba:	f7ff f8f1 	bl	8001ea0 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f9af 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0d5      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2222      	movs	r2, #34	; 0x22
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d04:	88f8      	ldrh	r0, [r7, #6]
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f913 	bl	8002f40 <I2C_RequestMemoryRead>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0ad      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_I2C_Mem_Read+0x22c>)
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fb17 	bl	8003380 <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_I2C_Mem_Read+0x22c>)
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb06 	bl	8003380 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f956 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07c      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d034      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d130      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f927 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04d      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fab7 	bl	8003380 <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 faa6 	bl	8003380 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d19a      	bne.n	8002d74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f974 	bl	8003130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e01a      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2220      	movs	r2, #32
 8002e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_I2C_Mem_Read+0x230>)
 8002e66:	400b      	ands	r3, r1
 8002e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	80002400 	.word	0x80002400
 8002e94:	fe00e800 	.word	0xfe00e800

08002e98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	8979      	ldrh	r1, [r7, #10]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <I2C_RequestMemoryWrite+0xa4>)
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fa5d 	bl	8003380 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8f0 	bl	80030b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e02c      	b.n	8002f34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eea:	e015      	b.n	8002f18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8d6 	bl	80030b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e012      	b.n	8002f34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0e:	893b      	ldrh	r3, [r7, #8]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f884 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	80002000 	.word	0x80002000

08002f40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <I2C_RequestMemoryRead+0xa4>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fa0a 	bl	8003380 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f89d 	bl	80030b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e02c      	b.n	8002fda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f86:	893b      	ldrh	r3, [r7, #8]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e015      	b.n	8002fbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f92:	893b      	ldrh	r3, [r7, #8]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f883 	bl	80030b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e012      	b.n	8002fda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb4:	893b      	ldrh	r3, [r7, #8]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f831 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	80002000 	.word	0x80002000

08002fe8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d103      	bne.n	8003006 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d007      	beq.n	8003024 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	619a      	str	r2, [r3, #24]
  }
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	e022      	b.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d01e      	beq.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe ff29 	bl	8001ea0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d113      	bne.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e00f      	b.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d0cd      	beq.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030bc:	e02c      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f870 	bl	80031a8 <I2C_IsErrorOccurred>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e02a      	b.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d01e      	beq.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe fee1 	bl	8001ea0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d113      	bne.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d1cb      	bne.n	80030be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313c:	e028      	b.n	8003190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f830 	bl	80031a8 <I2C_IsErrorOccurred>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e026      	b.n	80031a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe fea5 	bl	8001ea0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d113      	bne.n	8003190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e007      	b.n	80031a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d1cf      	bne.n	800313e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d075      	beq.n	80032c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031dc:	e056      	b.n	800328c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d052      	beq.n	800328c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fe5b 	bl	8001ea0 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_IsErrorOccurred+0x54>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d147      	bne.n	800328c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800320e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d12e      	bne.n	800327e <I2C_IsErrorOccurred+0xd6>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003226:	d02a      	beq.n	800327e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b20      	cmp	r3, #32
 800322c:	d027      	beq.n	800327e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800323e:	f7fe fe2f 	bl	8001ea0 <HAL_GetTick>
 8003242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003244:	e01b      	b.n	800327e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003246:	f7fe fe2b 	bl	8001ea0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b19      	cmp	r3, #25
 8003252:	d914      	bls.n	800327e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b20      	cmp	r3, #32
 800328a:	d1dc      	bne.n	8003246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d003      	beq.n	80032a2 <I2C_IsErrorOccurred+0xfa>
 800329a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d09d      	beq.n	80031de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800332e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01c      	beq.n	8003370 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff fe56 	bl	8002fe8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <I2C_IsErrorOccurred+0x1d4>)
 8003348:	400b      	ands	r3, r1
 800334a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	431a      	orrs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003374:	4618      	mov	r0, r3
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	4613      	mov	r3, r2
 8003390:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003398:	7a7b      	ldrb	r3, [r7, #9]
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <I2C_TransferConfig+0x60>)
 80033c0:	430b      	orrs	r3, r1
 80033c2:	43db      	mvns	r3, r3
 80033c4:	ea02 0103 	and.w	r1, r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	03ff63ff 	.word	0x03ff63ff

080033e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d138      	bne.n	800346c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003404:	2302      	movs	r3, #2
 8003406:	e032      	b.n	800346e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	d139      	bne.n	8003504 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800349a:	2302      	movs	r3, #2
 800349c:	e033      	b.n	8003506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2224      	movs	r2, #36	; 0x24
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003514:	b08f      	sub	sp, #60	; 0x3c
 8003516:	af0a      	add	r7, sp, #40	; 0x28
 8003518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e116      	b.n	8003752 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe f892 	bl	8001668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fe45 	bl	80061f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	687e      	ldr	r6, [r7, #4]
 8003570:	466d      	mov	r5, sp
 8003572:	f106 0410 	add.w	r4, r6, #16
 8003576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003582:	e885 0003 	stmia.w	r5, {r0, r1}
 8003586:	1d33      	adds	r3, r6, #4
 8003588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f002 fe05 	bl	800619a <USB_CoreInit>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0d7      	b.n	8003752 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f002 fe33 	bl	8006214 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e04a      	b.n	800364a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	333d      	adds	r3, #61	; 0x3d
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	333c      	adds	r3, #60	; 0x3c
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	b298      	uxth	r0, r3
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3344      	adds	r3, #68	; 0x44
 80035f0:	4602      	mov	r2, r0
 80035f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3340      	adds	r3, #64	; 0x40
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3348      	adds	r3, #72	; 0x48
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	334c      	adds	r3, #76	; 0x4c
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3354      	adds	r3, #84	; 0x54
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	3301      	adds	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d3af      	bcc.n	80035b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e044      	b.n	80036e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3301      	adds	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d3b5      	bcc.n	800365a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	687e      	ldr	r6, [r7, #4]
 80036f6:	466d      	mov	r5, sp
 80036f8:	f106 0410 	add.w	r4, r6, #16
 80036fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003708:	e885 0003 	stmia.w	r5, {r0, r1}
 800370c:	1d33      	adds	r3, r6, #4
 800370e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003710:	6838      	ldr	r0, [r7, #0]
 8003712:	f002 fdcb 	bl	80062ac <USB_DevInit>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e014      	b.n	8003752 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2b01      	cmp	r3, #1
 800373e:	d102      	bne.n	8003746 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f80a 	bl	800375a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f002 ff77 	bl	800663e <USB_DevDisconnect>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800375a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	f043 0303 	orr.w	r3, r3, #3
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_PWREx_GetVoltageRange+0x18>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40007000 	.word	0x40007000

080037e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ee:	d130      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fc:	d038      	beq.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2232      	movs	r2, #50	; 0x32
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0c9b      	lsrs	r3, r3, #18
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003824:	e002      	b.n	800382c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3b01      	subs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003838:	d102      	bne.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x60>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f2      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384c:	d110      	bne.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d007      	beq.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003868:	4a05      	ldr	r2, [pc, #20]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000
 8003884:	20000090 	.word	0x20000090
 8003888:	431bde83 	.word	0x431bde83

0800388c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	6053      	str	r3, [r2, #4]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40007000 	.word	0x40007000

080038ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7fe faf4 	bl	8001ea0 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e063      	b.n	800398c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fd99 	bl	8001410 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80038de:	f241 3188 	movw	r1, #5000	; 0x1388
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f858 	bl	8003998 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	021a      	lsls	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	2120      	movs	r1, #32
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f850 	bl	80039b4 <QSPI_WaitFlagStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d131      	bne.n	8003982 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003928:	f023 0310 	bic.w	r3, r3, #16
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6852      	ldr	r2, [r2, #4]
 8003930:	0611      	lsls	r1, r2, #24
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_QSPI_Init+0xe8>)
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6912      	ldr	r2, [r2, #16]
 800394e:	0411      	lsls	r1, r2, #16
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6952      	ldr	r2, [r2, #20]
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6992      	ldr	r2, [r2, #24]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800398a:	7afb      	ldrb	r3, [r7, #11]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	ffe0f8fe 	.word	0xffe0f8fe

08003998 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039c4:	e01a      	b.n	80039fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d016      	beq.n	80039fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fe fa67 	bl	8001ea0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2204      	movs	r2, #4
 80039e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e00e      	b.n	8003a1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1d6      	bne.n	80039c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e3ca      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a36:	4b97      	ldr	r3, [pc, #604]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a40:	4b94      	ldr	r3, [pc, #592]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80e4 	beq.w	8003c20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4a>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b0c      	cmp	r3, #12
 8003a62:	f040 808b 	bne.w	8003b7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f040 8087 	bne.w	8003b7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a6e:	4b89      	ldr	r3, [pc, #548]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_RCC_OscConfig+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e3a2      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1a      	ldr	r2, [r3, #32]
 8003a8a:	4b82      	ldr	r3, [pc, #520]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x7c>
 8003a96:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_OscConfig+0x88>
 8003aa0:	4b7c      	ldr	r3, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d223      	bcs.n	8003af8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fd87 	bl	80045c8 <RCC_SetFlashLatencyFromMSIRange>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e383      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac4:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a72      	ldr	r2, [pc, #456]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003aca:	f043 0308 	orr.w	r3, r3, #8
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b70      	ldr	r3, [pc, #448]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	496d      	ldr	r1, [pc, #436]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae2:	4b6c      	ldr	r3, [pc, #432]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	4968      	ldr	r1, [pc, #416]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
 8003af6:	e025      	b.n	8003b44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af8:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a65      	ldr	r2, [pc, #404]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4960      	ldr	r1, [pc, #384]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b16:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	495b      	ldr	r1, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fd47 	bl	80045c8 <RCC_SetFlashLatencyFromMSIRange>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e343      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b44:	f000 fc4a 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b52      	ldr	r3, [pc, #328]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	4950      	ldr	r1, [pc, #320]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <HAL_RCC_OscConfig+0x278>)
 8003b62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b64:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <HAL_RCC_OscConfig+0x27c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fe19 	bl	80017a0 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d052      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	e327      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d032      	beq.n	8003bea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a42      	ldr	r2, [pc, #264]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f986 	bl	8001ea0 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b98:	f7fe f982 	bl	8001ea0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e310      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003baa:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a36      	ldr	r2, [pc, #216]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4931      	ldr	r1, [pc, #196]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd4:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	492c      	ldr	r1, [pc, #176]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	e01a      	b.n	8003c20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf6:	f7fe f953 	bl	8001ea0 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bfe:	f7fe f94f 	bl	8001ea0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e2dd      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x1da>
 8003c1c:	e000      	b.n	8003c20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d074      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d005      	beq.n	8003c3e <HAL_RCC_OscConfig+0x21a>
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	d10e      	bne.n	8003c56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d10b      	bne.n	8003c56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d064      	beq.n	8003d14 <HAL_RCC_OscConfig+0x2f0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d160      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e2ba      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x24a>
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	e026      	b.n	8003cbc <HAL_RCC_OscConfig+0x298>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c76:	d115      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x280>
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a02      	ldr	r2, [pc, #8]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e014      	b.n	8003cbc <HAL_RCC_OscConfig+0x298>
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	080086fc 	.word	0x080086fc
 8003c9c:	20000090 	.word	0x20000090
 8003ca0:	200000a4 	.word	0x200000a4
 8003ca4:	4ba0      	ldr	r3, [pc, #640]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a9f      	ldr	r2, [pc, #636]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b9d      	ldr	r3, [pc, #628]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a9c      	ldr	r2, [pc, #624]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fe f8ec 	bl	8001ea0 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fe f8e8 	bl	8001ea0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e276      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cde:	4b92      	ldr	r3, [pc, #584]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x2a8>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f8d8 	bl	8001ea0 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fe f8d4 	bl	8001ea0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e262      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d06:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2d0>
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d060      	beq.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_OscConfig+0x310>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d119      	bne.n	8003d62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d116      	bne.n	8003d62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d34:	4b7c      	ldr	r3, [pc, #496]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_OscConfig+0x328>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e23f      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	4973      	ldr	r1, [pc, #460]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d60:	e040      	b.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d023      	beq.n	8003db2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d6a:	4b6f      	ldr	r3, [pc, #444]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6e      	ldr	r2, [pc, #440]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fe f893 	bl	8001ea0 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7e:	f7fe f88f 	bl	8001ea0 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e21d      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d90:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	495f      	ldr	r1, [pc, #380]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
 8003db0:	e018      	b.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db2:	4b5d      	ldr	r3, [pc, #372]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5c      	ldr	r2, [pc, #368]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fe f86f 	bl	8001ea0 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fe f86b 	bl	8001ea0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1f9      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd8:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d03c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01c      	beq.n	8003e32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df8:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fe f84a 	bl	8001ea0 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e10:	f7fe f846 	bl	8001ea0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e1d4      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e22:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <HAL_RCC_OscConfig+0x3ec>
 8003e30:	e01b      	b.n	8003e6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e32:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e38:	4a3b      	ldr	r2, [pc, #236]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fe f82d 	bl	8001ea0 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fe f829 	bl	8001ea0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e1b7      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ef      	bne.n	8003e4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a6 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
 8003e94:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_RCC_OscConfig+0x508>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d118      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_RCC_OscConfig+0x508>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_RCC_OscConfig+0x508>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebc:	f7fd fff0 	bl	8001ea0 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fd ffec 	bl	8001ea0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e17a      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <HAL_RCC_OscConfig+0x508>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <HAL_RCC_OscConfig+0x4d8>
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003efa:	e029      	b.n	8003f50 <HAL_RCC_OscConfig+0x52c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d115      	bne.n	8003f30 <HAL_RCC_OscConfig+0x50c>
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	4a03      	ldr	r2, [pc, #12]	; (8003f28 <HAL_RCC_OscConfig+0x504>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f24:	e014      	b.n	8003f50 <HAL_RCC_OscConfig+0x52c>
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	4b9c      	ldr	r3, [pc, #624]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	4a9b      	ldr	r2, [pc, #620]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f40:	4b98      	ldr	r3, [pc, #608]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	4a97      	ldr	r2, [pc, #604]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d016      	beq.n	8003f86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd ffa2 	bl	8001ea0 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fd ff9e 	bl	8001ea0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e12a      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f76:	4b8b      	ldr	r3, [pc, #556]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ed      	beq.n	8003f60 <HAL_RCC_OscConfig+0x53c>
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fd ff8b 	bl	8001ea0 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd ff87 	bl	8001ea0 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e113      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fa4:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ed      	bne.n	8003f8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b7a      	ldr	r3, [pc, #488]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	4a79      	ldr	r2, [pc, #484]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80fe 	beq.w	80041ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f040 80d0 	bne.w	8004178 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fd8:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d130      	bne.n	800404e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d127      	bne.n	800404e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d11f      	bne.n	800404e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004018:	2a07      	cmp	r2, #7
 800401a:	bf14      	ite	ne
 800401c:	2201      	movne	r2, #1
 800401e:	2200      	moveq	r2, #0
 8004020:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004022:	4293      	cmp	r3, r2
 8004024:	d113      	bne.n	800404e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	3b01      	subs	r3, #1
 8004034:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d109      	bne.n	800404e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d06e      	beq.n	800412c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d069      	beq.n	8004128 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004054:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004060:	4b50      	ldr	r3, [pc, #320]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0ad      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004070:	4b4c      	ldr	r3, [pc, #304]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407c:	f7fd ff10 	bl	8001ea0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd ff0c 	bl	8001ea0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e09a      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004096:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a2:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_RCC_OscConfig+0x784>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040b2:	3a01      	subs	r2, #1
 80040b4:	0112      	lsls	r2, r2, #4
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040bc:	0212      	lsls	r2, r2, #8
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c4:	0852      	lsrs	r2, r2, #1
 80040c6:	3a01      	subs	r2, #1
 80040c8:	0552      	lsls	r2, r2, #21
 80040ca:	4311      	orrs	r1, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040d0:	0852      	lsrs	r2, r2, #1
 80040d2:	3a01      	subs	r2, #1
 80040d4:	0652      	lsls	r2, r2, #25
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040dc:	0912      	lsrs	r2, r2, #4
 80040de:	0452      	lsls	r2, r2, #17
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4930      	ldr	r1, [pc, #192]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004100:	f7fd fece 	bl	8001ea0 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd feca 	bl	8001ea0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e058      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004126:	e050      	b.n	80041ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e04f      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d148      	bne.n	80041ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004144:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004150:	f7fd fea6 	bl	8001ea0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd fea2 	bl	8001ea0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e030      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x734>
 8004176:	e028      	b.n	80041ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d023      	beq.n	80041c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <HAL_RCC_OscConfig+0x780>)
 8004184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fe89 	bl	8001ea0 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004190:	e00c      	b.n	80041ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fd fe85 	bl	8001ea0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d905      	bls.n	80041ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e013      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
 80041a4:	40021000 	.word	0x40021000
 80041a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_OscConfig+0x7b0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ec      	bne.n	8004192 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_OscConfig+0x7b0>)
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	4905      	ldr	r1, [pc, #20]	; (80041d4 <HAL_RCC_OscConfig+0x7b0>)
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_RCC_OscConfig+0x7b4>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
 80041c4:	e001      	b.n	80041ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	feeefffc 	.word	0xfeeefffc

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0e7      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b75      	ldr	r3, [pc, #468]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b72      	ldr	r3, [pc, #456]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0207 	bic.w	r2, r3, #7
 8004206:	4970      	ldr	r1, [pc, #448]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b6e      	ldr	r3, [pc, #440]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0cf      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b66      	ldr	r3, [pc, #408]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004238:	429a      	cmp	r2, r3
 800423a:	d908      	bls.n	800424e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4960      	ldr	r1, [pc, #384]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04c      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004262:	4b5a      	ldr	r3, [pc, #360]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d121      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0a6      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	4b54      	ldr	r3, [pc, #336]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d115      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e09a      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004292:	4b4e      	ldr	r3, [pc, #312]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e08e      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a2:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e086      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b46      	ldr	r3, [pc, #280]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4943      	ldr	r1, [pc, #268]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd fdec 	bl	8001ea0 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fd fde8 	bl	8001ea0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e06e      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	429a      	cmp	r2, r3
 800430e:	d208      	bcs.n	8004322 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	492b      	ldr	r1, [pc, #172]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d210      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	4923      	ldr	r1, [pc, #140]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004340:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e036      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435e:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4918      	ldr	r1, [pc, #96]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4910      	ldr	r1, [pc, #64]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004390:	f000 f824 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	490b      	ldr	r1, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x1f4>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1f8>)
 80043ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1fc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd f9f3 	bl	80017a0 <HAL_InitTick>
 80043ba:	4603      	mov	r3, r0
 80043bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80043be:	7afb      	ldrb	r3, [r7, #11]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40021000 	.word	0x40021000
 80043d0:	080086fc 	.word	0x080086fc
 80043d4:	20000090 	.word	0x20000090
 80043d8:	200000a4 	.word	0x200000a4

080043dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ea:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x34>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d121      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d11e      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004410:	4b34      	ldr	r3, [pc, #208]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800441c:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e005      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800442c:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004438:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d102      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e004      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d101      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d134      	bne.n	80044d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d003      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0xa6>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d003      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0xac>
 8004480:	e005      	b.n	800448e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004482:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004484:	617b      	str	r3, [r7, #20]
      break;
 8004486:	e005      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800448a:	617b      	str	r3, [r7, #20]
      break;
 800448c:	e002      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	617b      	str	r3, [r7, #20]
      break;
 8004492:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	fb03 f202 	mul.w	r2, r3, r2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	0e5b      	lsrs	r3, r3, #25
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	3301      	adds	r3, #1
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044d4:	69bb      	ldr	r3, [r7, #24]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3724      	adds	r7, #36	; 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08008714 	.word	0x08008714
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000090 	.word	0x20000090

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	0800870c 	.word	0x0800870c

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800453c:	f7ff ffda 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	0800870c 	.word	0x0800870c

08004564 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	220f      	movs	r2, #15
 8004572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0203 	and.w	r2, r3, #3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_RCC_GetClockConfig+0x60>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0207 	and.w	r2, r3, #7
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40022000 	.word	0x40022000

080045c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045e0:	f7ff f8f0 	bl	80037c4 <HAL_PWREx_GetVoltageRange>
 80045e4:	6178      	str	r0, [r7, #20]
 80045e6:	e014      	b.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	4a24      	ldr	r2, [pc, #144]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6593      	str	r3, [r2, #88]	; 0x58
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004600:	f7ff f8e0 	bl	80037c4 <HAL_PWREx_GetVoltageRange>
 8004604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800460c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004610:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004618:	d10b      	bne.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	d919      	bls.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2ba0      	cmp	r3, #160	; 0xa0
 8004624:	d902      	bls.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004626:	2302      	movs	r3, #2
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	e013      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800462c:	2301      	movs	r3, #1
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e010      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d902      	bls.n	800463e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004638:	2303      	movs	r3, #3
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e00a      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d102      	bne.n	800464a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004644:	2302      	movs	r3, #2
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	e004      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d101      	bne.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004650:	2301      	movs	r3, #1
 8004652:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 0207 	bic.w	r2, r3, #7
 800465c:	4909      	ldr	r1, [pc, #36]	; (8004684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004664:	4b07      	ldr	r3, [pc, #28]	; (8004684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	40022000 	.word	0x40022000

08004688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004690:	2300      	movs	r3, #0
 8004692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004694:	2300      	movs	r3, #0
 8004696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d041      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ac:	d02a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046b2:	d824      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046be:	d81e      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d010      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ca:	e018      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046cc:	4b86      	ldr	r3, [pc, #536]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a85      	ldr	r2, [pc, #532]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d8:	e015      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 facb 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ea:	e00c      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3320      	adds	r3, #32
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fbb6 	bl	8004e64 <RCCEx_PLLSAI2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	74fb      	strb	r3, [r7, #19]
      break;
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800470c:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471a:	4973      	ldr	r1, [pc, #460]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004722:	e001      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d041      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800473c:	d02a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800473e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004742:	d824      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004748:	d008      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800474a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800474e:	d81e      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004758:	d010      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800475a:	e018      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800475c:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4a61      	ldr	r2, [pc, #388]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004768:	e015      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fa83 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800477a:	e00c      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3320      	adds	r3, #32
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fb6e 	bl	8004e64 <RCCEx_PLLSAI2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800478c:	e003      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	74fb      	strb	r3, [r7, #19]
      break;
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800479c:	4b52      	ldr	r3, [pc, #328]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047aa:	494f      	ldr	r1, [pc, #316]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047b2:	e001      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a0 	beq.w	8004906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e0:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ea:	6593      	str	r3, [r2, #88]	; 0x58
 80047ec:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f8:	2301      	movs	r3, #1
 80047fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004806:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004808:	f7fd fb4a 	bl	8001ea0 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800480e:	e009      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004810:	f7fd fb46 	bl	8001ea0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d902      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	74fb      	strb	r3, [r7, #19]
        break;
 8004822:	e005      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004824:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ef      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d15c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004836:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	429a      	cmp	r2, r3
 8004852:	d019      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004860:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fd fb05 	bl	8001ea0 <HAL_GetTick>
 8004896:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	e00b      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd fb01 	bl	8001ea0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d902      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	74fb      	strb	r3, [r7, #19]
            break;
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ec      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f4:	7c7b      	ldrb	r3, [r7, #17]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fa:	4b9e      	ldr	r3, [pc, #632]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a9d      	ldr	r2, [pc, #628]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004912:	4b98      	ldr	r3, [pc, #608]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 0203 	bic.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	4994      	ldr	r1, [pc, #592]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004934:	4b8f      	ldr	r3, [pc, #572]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 020c 	bic.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	498c      	ldr	r1, [pc, #560]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004956:	4b87      	ldr	r3, [pc, #540]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	4983      	ldr	r1, [pc, #524]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004978:	4b7e      	ldr	r3, [pc, #504]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	497b      	ldr	r1, [pc, #492]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800499a:	4b76      	ldr	r3, [pc, #472]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a8:	4972      	ldr	r1, [pc, #456]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049bc:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	496a      	ldr	r1, [pc, #424]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049de:	4b65      	ldr	r3, [pc, #404]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	4961      	ldr	r1, [pc, #388]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a00:	4b5c      	ldr	r3, [pc, #368]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0e:	4959      	ldr	r1, [pc, #356]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a22:	4b54      	ldr	r3, [pc, #336]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	4950      	ldr	r1, [pc, #320]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	4948      	ldr	r1, [pc, #288]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a66:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	493f      	ldr	r1, [pc, #252]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a88:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	4937      	ldr	r1, [pc, #220]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e011      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004abe:	d10c      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f8d8 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	491f      	ldr	r1, [pc, #124]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b04:	d106      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b10:	60d3      	str	r3, [r2, #12]
 8004b12:	e011      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2101      	movs	r1, #1
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f8a9 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02b      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	4908      	ldr	r1, [pc, #32]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d109      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a02      	ldr	r2, [pc, #8]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e014      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f877 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02f      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb6:	4928      	ldr	r1, [pc, #160]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f854 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d014      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	74bb      	strb	r3, [r7, #18]
 8004be2:	e011      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3320      	adds	r3, #32
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f935 	bl	8004e64 <RCCEx_PLLSAI2_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c22:	490d      	ldr	r1, [pc, #52]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c36:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c46:	4904      	ldr	r1, [pc, #16]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000

08004c5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c8a:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0203 	and.w	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d10d      	bne.n	8004cc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cae:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d047      	beq.n	8004d52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	e044      	b.n	8004d52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d018      	beq.n	8004d02 <RCCEx_PLLSAI1_Config+0x86>
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d825      	bhi.n	8004d20 <RCCEx_PLLSAI1_Config+0xa4>
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d002      	beq.n	8004cde <RCCEx_PLLSAI1_Config+0x62>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d009      	beq.n	8004cf0 <RCCEx_PLLSAI1_Config+0x74>
 8004cdc:	e020      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cde:	4b60      	ldr	r3, [pc, #384]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11d      	bne.n	8004d26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cee:	e01a      	b.n	8004d26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cf0:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d00:	e013      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d02:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d0e:	4b54      	ldr	r3, [pc, #336]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d1e:	e006      	b.n	8004d2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      break;
 8004d24:	e004      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	4944      	ldr	r1, [pc, #272]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d17d      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d58:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a40      	ldr	r2, [pc, #256]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fd f89c 	bl	8001ea0 <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d6a:	e009      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d6c:	f7fd f898 	bl	8001ea0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d902      	bls.n	8004d80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d7e:	e005      	b.n	8004d8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d80:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ef      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d160      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d111      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d98:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6892      	ldr	r2, [r2, #8]
 8004da8:	0211      	lsls	r1, r2, #8
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	0912      	lsrs	r2, r2, #4
 8004db0:	0452      	lsls	r2, r2, #17
 8004db2:	430a      	orrs	r2, r1
 8004db4:	492a      	ldr	r1, [pc, #168]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	610b      	str	r3, [r1, #16]
 8004dba:	e027      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d112      	bne.n	8004de8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc2:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6892      	ldr	r2, [r2, #8]
 8004dd2:	0211      	lsls	r1, r2, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6912      	ldr	r2, [r2, #16]
 8004dd8:	0852      	lsrs	r2, r2, #1
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	0552      	lsls	r2, r2, #21
 8004dde:	430a      	orrs	r2, r1
 8004de0:	491f      	ldr	r1, [pc, #124]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	610b      	str	r3, [r1, #16]
 8004de6:	e011      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004df0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6892      	ldr	r2, [r2, #8]
 8004df8:	0211      	lsls	r1, r2, #8
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6952      	ldr	r2, [r2, #20]
 8004dfe:	0852      	lsrs	r2, r2, #1
 8004e00:	3a01      	subs	r2, #1
 8004e02:	0652      	lsls	r2, r2, #25
 8004e04:	430a      	orrs	r2, r1
 8004e06:	4916      	ldr	r1, [pc, #88]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fd f842 	bl	8001ea0 <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e1e:	e009      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e20:	f7fd f83e 	bl	8001ea0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d902      	bls.n	8004e34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	73fb      	strb	r3, [r7, #15]
          break;
 8004e32:	e005      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ef      	beq.n	8004e20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	4904      	ldr	r1, [pc, #16]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000

08004e64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e7e:	4b67      	ldr	r3, [pc, #412]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0203 	and.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10d      	bne.n	8004eaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
       ||
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e96:	4b61      	ldr	r3, [pc, #388]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d047      	beq.n	8004f3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
 8004eae:	e044      	b.n	8004f3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d018      	beq.n	8004eea <RCCEx_PLLSAI2_Config+0x86>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d825      	bhi.n	8004f08 <RCCEx_PLLSAI2_Config+0xa4>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d002      	beq.n	8004ec6 <RCCEx_PLLSAI2_Config+0x62>
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d009      	beq.n	8004ed8 <RCCEx_PLLSAI2_Config+0x74>
 8004ec4:	e020      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ec6:	4b55      	ldr	r3, [pc, #340]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d11d      	bne.n	8004f0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed6:	e01a      	b.n	8004f0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee8:	e013      	b.n	8004f12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eea:	4b4c      	ldr	r3, [pc, #304]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ef6:	4b49      	ldr	r3, [pc, #292]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f06:	e006      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f0c:	e004      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	430b      	orrs	r3, r1
 8004f34:	4939      	ldr	r1, [pc, #228]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d167      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f40:	4b36      	ldr	r3, [pc, #216]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a35      	ldr	r2, [pc, #212]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4c:	f7fc ffa8 	bl	8001ea0 <HAL_GetTick>
 8004f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f52:	e009      	b.n	8004f68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f54:	f7fc ffa4 	bl	8001ea0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d902      	bls.n	8004f68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	73fb      	strb	r3, [r7, #15]
        break;
 8004f66:	e005      	b.n	8004f74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ef      	bne.n	8004f54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d14a      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d111      	bne.n	8004fa4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f80:	4b26      	ldr	r3, [pc, #152]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6892      	ldr	r2, [r2, #8]
 8004f90:	0211      	lsls	r1, r2, #8
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68d2      	ldr	r2, [r2, #12]
 8004f96:	0912      	lsrs	r2, r2, #4
 8004f98:	0452      	lsls	r2, r2, #17
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	491f      	ldr	r1, [pc, #124]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	614b      	str	r3, [r1, #20]
 8004fa2:	e011      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6892      	ldr	r2, [r2, #8]
 8004fb4:	0211      	lsls	r1, r2, #8
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6912      	ldr	r2, [r2, #16]
 8004fba:	0852      	lsrs	r2, r2, #1
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	0652      	lsls	r2, r2, #25
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	4916      	ldr	r1, [pc, #88]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fc ff64 	bl	8001ea0 <HAL_GetTick>
 8004fd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fda:	e009      	b.n	8004ff0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fdc:	f7fc ff60 	bl	8001ea0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	73fb      	strb	r3, [r7, #15]
          break;
 8004fee:	e005      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ef      	beq.n	8004fdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4904      	ldr	r1, [pc, #16]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e095      	b.n	800515e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005042:	d009      	beq.n	8005058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	61da      	str	r2, [r3, #28]
 800504a:	e005      	b.n	8005058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc fa10 	bl	8001498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005098:	d902      	bls.n	80050a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e002      	b.n	80050a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050ae:	d007      	beq.n	80050c0 <HAL_SPI_Init+0xa0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b8:	d002      	beq.n	80050c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	ea42 0103 	orr.w	r1, r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	0c1b      	lsrs	r3, r3, #16
 800511c:	f003 0204 	and.w	r2, r3, #4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800513c:	ea42 0103 	orr.w	r1, r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e049      	b.n	800520c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f841 	bl	8005214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 f9f7 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d001      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e04f      	b.n	80052e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a23      	ldr	r2, [pc, #140]	; (80052ec <HAL_TIM_Base_Start_IT+0xc4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01d      	beq.n	800529e <HAL_TIM_Base_Start_IT+0x76>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d018      	beq.n	800529e <HAL_TIM_Base_Start_IT+0x76>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_TIM_Base_Start_IT+0x76>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_TIM_Base_Start_IT+0x76>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_TIM_Base_Start_IT+0x76>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_TIM_Base_Start_IT+0x76>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a19      	ldr	r2, [pc, #100]	; (8005300 <HAL_TIM_Base_Start_IT+0xd8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d115      	bne.n	80052ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <HAL_TIM_Base_Start_IT+0xdc>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d015      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0xb4>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b6:	d011      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	e008      	b.n	80052dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e000      	b.n	80052de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40014000 	.word	0x40014000
 8005304:	00010007 	.word	0x00010007

08005308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f905 	bl	800555a <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8f7 	bl	8005546 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f908 	bl	800556e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0204 	mvn.w	r2, #4
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8db 	bl	800555a <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8cd 	bl	8005546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8de 	bl	800556e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0208 	mvn.w	r2, #8
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f8b1 	bl	800555a <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f8a3 	bl	8005546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f8b4 	bl	800556e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f887 	bl	800555a <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f879 	bl	8005546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f88a 	bl	800556e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0201 	mvn.w	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fb fe9c 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f914 	bl	80056e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	d10e      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f907 	bl	80056f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f838 	bl	8005582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b20      	cmp	r3, #32
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0220 	mvn.w	r2, #32
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8c7 	bl	80056cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a40      	ldr	r2, [pc, #256]	; (80056ac <TIM_Base_SetConfig+0x114>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d013      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d00f      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3d      	ldr	r2, [pc, #244]	; (80056b0 <TIM_Base_SetConfig+0x118>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00b      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3c      	ldr	r2, [pc, #240]	; (80056b4 <TIM_Base_SetConfig+0x11c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3b      	ldr	r2, [pc, #236]	; (80056b8 <TIM_Base_SetConfig+0x120>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3a      	ldr	r2, [pc, #232]	; (80056bc <TIM_Base_SetConfig+0x124>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <TIM_Base_SetConfig+0x114>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01f      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d01b      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2c      	ldr	r2, [pc, #176]	; (80056b0 <TIM_Base_SetConfig+0x118>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d017      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2b      	ldr	r2, [pc, #172]	; (80056b4 <TIM_Base_SetConfig+0x11c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2a      	ldr	r2, [pc, #168]	; (80056b8 <TIM_Base_SetConfig+0x120>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00f      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a29      	ldr	r2, [pc, #164]	; (80056bc <TIM_Base_SetConfig+0x124>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <TIM_Base_SetConfig+0x128>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <TIM_Base_SetConfig+0x12c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <TIM_Base_SetConfig+0x130>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d108      	bne.n	8005644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <TIM_Base_SetConfig+0x114>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00f      	beq.n	8005690 <TIM_Base_SetConfig+0xf8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a12      	ldr	r2, [pc, #72]	; (80056bc <TIM_Base_SetConfig+0x124>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_Base_SetConfig+0xf8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <TIM_Base_SetConfig+0x128>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0xf8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <TIM_Base_SetConfig+0x12c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0xf8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0f      	ldr	r2, [pc, #60]	; (80056c8 <TIM_Base_SetConfig+0x130>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d103      	bne.n	8005698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	615a      	str	r2, [r3, #20]
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800

080056cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e040      	b.n	800579c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fef8 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	; 0x24
 8005734:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f8c0 	bl	80058cc <UART_SetConfig>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e022      	b.n	800579c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fb6c 	bl	8005e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fbf3 	bl	8005f80 <UART_CheckIdleState>
 800579a:	4603      	mov	r3, r0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	f040 8082 	bne.w	80058c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_UART_Transmit+0x26>
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07a      	b.n	80058c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_UART_Transmit+0x38>
 80057d8:	2302      	movs	r3, #2
 80057da:	e073      	b.n	80058c4 <HAL_UART_Transmit+0x120>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2221      	movs	r2, #33	; 0x21
 80057f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f2:	f7fc fb55 	bl	8001ea0 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d108      	bne.n	8005824 <HAL_UART_Transmit+0x80>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e003      	b.n	800582c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005834:	e02d      	b.n	8005892 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fbe6 	bl	8006012 <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e039      	b.n	80058c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	881a      	ldrh	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005862:	b292      	uxth	r2, r2
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3302      	adds	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e008      	b.n	8005880 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	b292      	uxth	r2, r2
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3301      	adds	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1cb      	bne.n	8005836 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fbb2 	bl	8006012 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e005      	b.n	80058c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b08a      	sub	sp, #40	; 0x28
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4ba4      	ldr	r3, [pc, #656]	; (8005b8c <UART_SetConfig+0x2c0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005904:	430b      	orrs	r3, r1
 8005906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a99      	ldr	r2, [pc, #612]	; (8005b90 <UART_SetConfig+0x2c4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	4313      	orrs	r3, r2
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a90      	ldr	r2, [pc, #576]	; (8005b94 <UART_SetConfig+0x2c8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d126      	bne.n	80059a4 <UART_SetConfig+0xd8>
 8005956:	4b90      	ldr	r3, [pc, #576]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b03      	cmp	r3, #3
 8005962:	d81b      	bhi.n	800599c <UART_SetConfig+0xd0>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0xa0>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	0800597d 	.word	0x0800597d
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005985 	.word	0x08005985
 8005978:	08005995 	.word	0x08005995
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e116      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598a:	e112      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005992:	e10e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599a:	e10a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a2:	e106      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7c      	ldr	r2, [pc, #496]	; (8005b9c <UART_SetConfig+0x2d0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d138      	bne.n	8005a20 <UART_SetConfig+0x154>
 80059ae:	4b7a      	ldr	r3, [pc, #488]	; (8005b98 <UART_SetConfig+0x2cc>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f003 030c 	and.w	r3, r3, #12
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d82d      	bhi.n	8005a18 <UART_SetConfig+0x14c>
 80059bc:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0xf8>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a19 	.word	0x08005a19
 80059d0:	08005a19 	.word	0x08005a19
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005a19 	.word	0x08005a19
 80059dc:	08005a19 	.word	0x08005a19
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a01 	.word	0x08005a01
 80059e8:	08005a19 	.word	0x08005a19
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	08005a19 	.word	0x08005a19
 80059f4:	08005a11 	.word	0x08005a11
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fe:	e0d8      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a00:	2302      	movs	r3, #2
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a06:	e0d4      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0e:	e0d0      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a10:	2308      	movs	r3, #8
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a16:	e0cc      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	e0c8      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5e      	ldr	r2, [pc, #376]	; (8005ba0 <UART_SetConfig+0x2d4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d125      	bne.n	8005a76 <UART_SetConfig+0x1aa>
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d016      	beq.n	8005a66 <UART_SetConfig+0x19a>
 8005a38:	2b30      	cmp	r3, #48	; 0x30
 8005a3a:	d818      	bhi.n	8005a6e <UART_SetConfig+0x1a2>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d00a      	beq.n	8005a56 <UART_SetConfig+0x18a>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d814      	bhi.n	8005a6e <UART_SetConfig+0x1a2>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <UART_SetConfig+0x182>
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d008      	beq.n	8005a5e <UART_SetConfig+0x192>
 8005a4c:	e00f      	b.n	8005a6e <UART_SetConfig+0x1a2>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a54:	e0ad      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a56:	2302      	movs	r3, #2
 8005a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5c:	e0a9      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a64:	e0a5      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a66:	2308      	movs	r3, #8
 8005a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6c:	e0a1      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a6e:	2310      	movs	r3, #16
 8005a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a74:	e09d      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a4a      	ldr	r2, [pc, #296]	; (8005ba4 <UART_SetConfig+0x2d8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d125      	bne.n	8005acc <UART_SetConfig+0x200>
 8005a80:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a8c:	d016      	beq.n	8005abc <UART_SetConfig+0x1f0>
 8005a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a90:	d818      	bhi.n	8005ac4 <UART_SetConfig+0x1f8>
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d00a      	beq.n	8005aac <UART_SetConfig+0x1e0>
 8005a96:	2b80      	cmp	r3, #128	; 0x80
 8005a98:	d814      	bhi.n	8005ac4 <UART_SetConfig+0x1f8>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <UART_SetConfig+0x1d8>
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d008      	beq.n	8005ab4 <UART_SetConfig+0x1e8>
 8005aa2:	e00f      	b.n	8005ac4 <UART_SetConfig+0x1f8>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aaa:	e082      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab2:	e07e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aba:	e07a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e076      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e072      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a35      	ldr	r2, [pc, #212]	; (8005ba8 <UART_SetConfig+0x2dc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12a      	bne.n	8005b2c <UART_SetConfig+0x260>
 8005ad6:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae4:	d01a      	beq.n	8005b1c <UART_SetConfig+0x250>
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aea:	d81b      	bhi.n	8005b24 <UART_SetConfig+0x258>
 8005aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af0:	d00c      	beq.n	8005b0c <UART_SetConfig+0x240>
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af6:	d815      	bhi.n	8005b24 <UART_SetConfig+0x258>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <UART_SetConfig+0x238>
 8005afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b00:	d008      	beq.n	8005b14 <UART_SetConfig+0x248>
 8005b02:	e00f      	b.n	8005b24 <UART_SetConfig+0x258>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0a:	e052      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b12:	e04e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1a:	e04a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b22:	e046      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2a:	e042      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <UART_SetConfig+0x2c4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d13a      	bne.n	8005bac <UART_SetConfig+0x2e0>
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b44:	d01a      	beq.n	8005b7c <UART_SetConfig+0x2b0>
 8005b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b4a:	d81b      	bhi.n	8005b84 <UART_SetConfig+0x2b8>
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b50:	d00c      	beq.n	8005b6c <UART_SetConfig+0x2a0>
 8005b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b56:	d815      	bhi.n	8005b84 <UART_SetConfig+0x2b8>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <UART_SetConfig+0x298>
 8005b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b60:	d008      	beq.n	8005b74 <UART_SetConfig+0x2a8>
 8005b62:	e00f      	b.n	8005b84 <UART_SetConfig+0x2b8>
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6a:	e022      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b72:	e01e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7a:	e01a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e016      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8a:	e012      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b8c:	efff69f3 	.word	0xefff69f3
 8005b90:	40008000 	.word	0x40008000
 8005b94:	40013800 	.word	0x40013800
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	40004400 	.word	0x40004400
 8005ba0:	40004800 	.word	0x40004800
 8005ba4:	40004c00 	.word	0x40004c00
 8005ba8:	40005000 	.word	0x40005000
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a9f      	ldr	r2, [pc, #636]	; (8005e34 <UART_SetConfig+0x568>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d17a      	bne.n	8005cb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d824      	bhi.n	8005c0e <UART_SetConfig+0x342>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x300>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bf9 	.word	0x08005bf9
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005bff 	.word	0x08005bff
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c0f 	.word	0x08005c0f
 8005be8:	08005c0f 	.word	0x08005c0f
 8005bec:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fe fc8c 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b8f      	ldr	r3, [pc, #572]	; (8005e38 <UART_SetConfig+0x56c>)
 8005bfa:	61fb      	str	r3, [r7, #28]
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe fbed 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8005c02:	61f8      	str	r0, [r7, #28]
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61fb      	str	r3, [r7, #28]
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80fb 	beq.w	8005e18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d305      	bcc.n	8005c3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d903      	bls.n	8005c46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c44:	e0e8      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	461c      	mov	r4, r3
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	022b      	lsls	r3, r5, #8
 8005c58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c5c:	0222      	lsls	r2, r4, #8
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	6849      	ldr	r1, [r1, #4]
 8005c62:	0849      	lsrs	r1, r1, #1
 8005c64:	2000      	movs	r0, #0
 8005c66:	4688      	mov	r8, r1
 8005c68:	4681      	mov	r9, r0
 8005c6a:	eb12 0a08 	adds.w	sl, r2, r8
 8005c6e:	eb43 0b09 	adc.w	fp, r3, r9
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c80:	4650      	mov	r0, sl
 8005c82:	4659      	mov	r1, fp
 8005c84:	f7fa fcd8 	bl	8000638 <__aeabi_uldivmod>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c96:	d308      	bcc.n	8005caa <UART_SetConfig+0x3de>
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d204      	bcs.n	8005caa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	e0b6      	b.n	8005e18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cb0:	e0b2      	b.n	8005e18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d15e      	bne.n	8005d7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d828      	bhi.n	8005d16 <UART_SetConfig+0x44a>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0x400>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	08005d17 	.word	0x08005d17
 8005cdc:	08005d07 	.word	0x08005d07
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d17 	.word	0x08005d17
 8005ce8:	08005d17 	.word	0x08005d17
 8005cec:	08005d0f 	.word	0x08005d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fe fc0c 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005cf4:	61f8      	str	r0, [r7, #28]
        break;
 8005cf6:	e014      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf8:	f7fe fc1e 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005cfc:	61f8      	str	r0, [r7, #28]
        break;
 8005cfe:	e010      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d00:	4b4d      	ldr	r3, [pc, #308]	; (8005e38 <UART_SetConfig+0x56c>)
 8005d02:	61fb      	str	r3, [r7, #28]
        break;
 8005d04:	e00d      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d06:	f7fe fb69 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8005d0a:	61f8      	str	r0, [r7, #28]
        break;
 8005d0c:	e009      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d12:	61fb      	str	r3, [r7, #28]
        break;
 8005d14:	e005      	b.n	8005d22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d077      	beq.n	8005e18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	005a      	lsls	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b0f      	cmp	r3, #15
 8005d42:	d916      	bls.n	8005d72 <UART_SetConfig+0x4a6>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4a:	d212      	bcs.n	8005d72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f023 030f 	bic.w	r3, r3, #15
 8005d54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	8afb      	ldrh	r3, [r7, #22]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	8afa      	ldrh	r2, [r7, #22]
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e052      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d78:	e04e      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d827      	bhi.n	8005dd2 <UART_SetConfig+0x506>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x4bc>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	08005dd3 	.word	0x08005dd3
 8005d98:	08005dc3 	.word	0x08005dc3
 8005d9c:	08005dd3 	.word	0x08005dd3
 8005da0:	08005dd3 	.word	0x08005dd3
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dac:	f7fe fbae 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005db0:	61f8      	str	r0, [r7, #28]
        break;
 8005db2:	e014      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fe fbc0 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005db8:	61f8      	str	r0, [r7, #28]
        break;
 8005dba:	e010      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <UART_SetConfig+0x56c>)
 8005dbe:	61fb      	str	r3, [r7, #28]
        break;
 8005dc0:	e00d      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc2:	f7fe fb0b 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8005dc6:	61f8      	str	r0, [r7, #28]
        break;
 8005dc8:	e009      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	61fb      	str	r3, [r7, #28]
        break;
 8005dd0:	e005      	b.n	8005dde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d019      	beq.n	8005e18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	085a      	lsrs	r2, r3, #1
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d909      	bls.n	8005e12 <UART_SetConfig+0x546>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d205      	bcs.n	8005e12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e002      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3728      	adds	r7, #40	; 0x28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e32:	bf00      	nop
 8005e34:	40008000 	.word	0x40008000
 8005e38:	00f42400 	.word	0x00f42400

08005e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f3a:	d10a      	bne.n	8005f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f90:	f7fb ff86 	bl	8001ea0 <HAL_GetTick>
 8005f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d10e      	bne.n	8005fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f82d 	bl	8006012 <UART_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e023      	b.n	800600a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d10e      	bne.n	8005fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f817 	bl	8006012 <UART_WaitOnFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e00d      	b.n	800600a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b09c      	sub	sp, #112	; 0x70
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006022:	e0a5      	b.n	8006170 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	f000 80a1 	beq.w	8006170 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602e:	f7fb ff37 	bl	8001ea0 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800603a:	429a      	cmp	r2, r3
 800603c:	d302      	bcc.n	8006044 <UART_WaitOnFlagUntilTimeout+0x32>
 800603e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006040:	2b00      	cmp	r3, #0
 8006042:	d13e      	bne.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006058:	667b      	str	r3, [r7, #100]	; 0x64
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006064:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e6      	bne.n	8006044 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3308      	adds	r3, #8
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	663b      	str	r3, [r7, #96]	; 0x60
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006096:	64ba      	str	r2, [r7, #72]	; 0x48
 8006098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800609c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e5      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e067      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d04f      	beq.n	8006170 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060de:	d147      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
 800610a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800610e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e6      	bne.n	80060ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	613b      	str	r3, [r7, #16]
   return(result);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	66bb      	str	r3, [r7, #104]	; 0x68
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800613c:	623a      	str	r2, [r7, #32]
 800613e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	61bb      	str	r3, [r7, #24]
   return(result);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e010      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	429a      	cmp	r2, r3
 800618c:	f43f af4a 	beq.w	8006024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3770      	adds	r7, #112	; 0x70
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800619a:	b084      	sub	sp, #16
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	f107 001c 	add.w	r0, r7, #28
 80061a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fa6f 	bl	800669c <USB_CoreReset>
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
 80061d4:	e005      	b.n	80061e2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ee:	b004      	add	sp, #16
 80061f0:	4770      	bx	lr

080061f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f023 0201 	bic.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d115      	bne.n	8006262 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006242:	2001      	movs	r0, #1
 8006244:	f7fb fe38 	bl	8001eb8 <HAL_Delay>
      ms++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa16 	bl	8006680 <USB_GetMode>
 8006254:	4603      	mov	r3, r0
 8006256:	2b01      	cmp	r3, #1
 8006258:	d01e      	beq.n	8006298 <USB_SetCurrentMode+0x84>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b31      	cmp	r3, #49	; 0x31
 800625e:	d9f0      	bls.n	8006242 <USB_SetCurrentMode+0x2e>
 8006260:	e01a      	b.n	8006298 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d115      	bne.n	8006294 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006274:	2001      	movs	r0, #1
 8006276:	f7fb fe1f 	bl	8001eb8 <HAL_Delay>
      ms++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f9fd 	bl	8006680 <USB_GetMode>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <USB_SetCurrentMode+0x84>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b31      	cmp	r3, #49	; 0x31
 8006290:	d9f0      	bls.n	8006274 <USB_SetCurrentMode+0x60>
 8006292:	e001      	b.n	8006298 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e005      	b.n	80062a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b32      	cmp	r3, #50	; 0x32
 800629c:	d101      	bne.n	80062a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062ac:	b084      	sub	sp, #16
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b086      	sub	sp, #24
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	e009      	b.n	80062e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	3340      	adds	r3, #64	; 0x40
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3301      	adds	r3, #1
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b0e      	cmp	r3, #14
 80062e4:	d9f2      	bls.n	80062cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11c      	bne.n	8006326 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062fa:	f043 0302 	orr.w	r3, r3, #2
 80062fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e005      	b.n	8006332 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006338:	461a      	mov	r2, r3
 800633a:	2300      	movs	r3, #0
 800633c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006344:	4619      	mov	r1, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	461a      	mov	r2, r3
 800634e:	680b      	ldr	r3, [r1, #0]
 8006350:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006352:	2103      	movs	r1, #3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f959 	bl	800660c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800635a:	2110      	movs	r1, #16
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f8f1 	bl	8006544 <USB_FlushTxFifo>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f91d 	bl	80065ac <USB_FlushRxFifo>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006382:	461a      	mov	r2, r3
 8006384:	2300      	movs	r3, #0
 8006386:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	461a      	mov	r2, r3
 800639c:	2300      	movs	r3, #0
 800639e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e043      	b.n	800642e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063bc:	d118      	bne.n	80063f0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	461a      	mov	r2, r3
 80063d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e013      	b.n	8006402 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	461a      	mov	r2, r3
 80063e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e008      	b.n	8006402 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	461a      	mov	r2, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	461a      	mov	r2, r3
 8006410:	2300      	movs	r3, #0
 8006412:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	461a      	mov	r2, r3
 8006422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006426:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3301      	adds	r3, #1
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	429a      	cmp	r2, r3
 8006434:	d3b7      	bcc.n	80063a6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	e043      	b.n	80064c4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006452:	d118      	bne.n	8006486 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e013      	b.n	8006498 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	461a      	mov	r2, r3
 800647e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e008      	b.n	8006498 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	461a      	mov	r2, r3
 8006494:	2300      	movs	r3, #0
 8006496:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	461a      	mov	r2, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	461a      	mov	r2, r3
 80064b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	3301      	adds	r3, #1
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d3b7      	bcc.n	800643c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f043 0210 	orr.w	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <USB_DevInit+0x294>)
 8006500:	4313      	orrs	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f043 0208 	orr.w	r2, r3, #8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800651a:	2b01      	cmp	r3, #1
 800651c:	d107      	bne.n	800652e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800653a:	b004      	add	sp, #16
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	803c3800 	.word	0x803c3800

08006544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <USB_FlushTxFifo+0x64>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e01b      	b.n	800659c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	daf2      	bge.n	8006552 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	019b      	lsls	r3, r3, #6
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <USB_FlushTxFifo+0x64>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d901      	bls.n	800658e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e006      	b.n	800659c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b20      	cmp	r3, #32
 8006598:	d0f0      	beq.n	800657c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	00030d40 	.word	0x00030d40

080065ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a11      	ldr	r2, [pc, #68]	; (8006608 <USB_FlushRxFifo+0x5c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e018      	b.n	80065fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	daf2      	bge.n	80065b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2210      	movs	r2, #16
 80065da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a08      	ldr	r2, [pc, #32]	; (8006608 <USB_FlushRxFifo+0x5c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e006      	b.n	80065fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d0f0      	beq.n	80065dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	00030d40 	.word	0x00030d40

0800660c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006658:	f023 0303 	bic.w	r3, r3, #3
 800665c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666c:	f043 0302 	orr.w	r3, r3, #2
 8006670:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	f003 0301 	and.w	r3, r3, #1
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a13      	ldr	r2, [pc, #76]	; (8006700 <USB_CoreReset+0x64>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e01b      	b.n	80066f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	daf2      	bge.n	80066a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a09      	ldr	r2, [pc, #36]	; (8006700 <USB_CoreReset+0x64>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e006      	b.n	80066f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d0f0      	beq.n	80066d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	00030d40 	.word	0x00030d40

08006704 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006716:	2b84      	cmp	r3, #132	; 0x84
 8006718:	d005      	beq.n	8006726 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800671a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	3303      	adds	r3, #3
 8006724:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006726:	68fb      	ldr	r3, [r7, #12]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006738:	f000 faf6 	bl	8006d28 <vTaskStartScheduler>
  
  return osOK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	bd80      	pop	{r7, pc}

08006742 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006744:	b089      	sub	sp, #36	; 0x24
 8006746:	af04      	add	r7, sp, #16
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d020      	beq.n	8006796 <osThreadCreate+0x54>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01c      	beq.n	8006796 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685c      	ldr	r4, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681d      	ldr	r5, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691e      	ldr	r6, [r3, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff ffc8 	bl	8006704 <makeFreeRtosPriority>
 8006774:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800677e:	9202      	str	r2, [sp, #8]
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	9100      	str	r1, [sp, #0]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	4632      	mov	r2, r6
 8006788:	4629      	mov	r1, r5
 800678a:	4620      	mov	r0, r4
 800678c:	f000 f8ed 	bl	800696a <xTaskCreateStatic>
 8006790:	4603      	mov	r3, r0
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e01c      	b.n	80067d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685c      	ldr	r4, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067a2:	b29e      	uxth	r6, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ffaa 	bl	8006704 <makeFreeRtosPriority>
 80067b0:	4602      	mov	r2, r0
 80067b2:	f107 030c 	add.w	r3, r7, #12
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	9200      	str	r2, [sp, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	4632      	mov	r2, r6
 80067be:	4629      	mov	r1, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f92f 	bl	8006a24 <xTaskCreate>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d001      	beq.n	80067d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80067d0:	68fb      	ldr	r3, [r7, #12]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <osDelay+0x16>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	e000      	b.n	80067f2 <osDelay+0x18>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa64 	bl	8006cc0 <vTaskDelay>
  
  return osOK;
 80067f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f103 0208 	add.w	r2, r3, #8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f04f 32ff 	mov.w	r2, #4294967295
 800681a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f103 0208 	add.w	r2, r3, #8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f103 0208 	add.w	r2, r3, #8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d103      	bne.n	80068c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e00c      	b.n	80068de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3308      	adds	r3, #8
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e002      	b.n	80068d2 <vListInsert+0x2e>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d2f6      	bcs.n	80068cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6892      	ldr	r2, [r2, #8]
 800692c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6852      	ldr	r2, [r2, #4]
 8006936:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	429a      	cmp	r2, r3
 8006940:	d103      	bne.n	800694a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800696a:	b580      	push	{r7, lr}
 800696c:	b08e      	sub	sp, #56	; 0x38
 800696e:	af04      	add	r7, sp, #16
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <xTaskCreateStatic+0x46>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61fb      	str	r3, [r7, #28]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b0:	23b4      	movs	r3, #180	; 0xb4
 80069b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	2bb4      	cmp	r3, #180	; 0xb4
 80069b8:	d00a      	beq.n	80069d0 <xTaskCreateStatic+0x66>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	61bb      	str	r3, [r7, #24]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01e      	beq.n	8006a16 <xTaskCreateStatic+0xac>
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01b      	beq.n	8006a16 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069f0:	2300      	movs	r3, #0
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	9302      	str	r3, [sp, #8]
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f851 	bl	8006ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a10:	f000 f8ec 	bl	8006bec <prvAddNewTaskToReadyList>
 8006a14:	e001      	b.n	8006a1a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a1a:	697b      	ldr	r3, [r7, #20]
	}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3728      	adds	r7, #40	; 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af04      	add	r7, sp, #16
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fef5 	bl	8007828 <pvPortMalloc>
 8006a3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00e      	beq.n	8006a64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a46:	20b4      	movs	r0, #180	; 0xb4
 8006a48:	f000 feee 	bl	8007828 <pvPortMalloc>
 8006a4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	631a      	str	r2, [r3, #48]	; 0x30
 8006a5a:	e005      	b.n	8006a68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a5c:	6978      	ldr	r0, [r7, #20]
 8006a5e:	f000 ffaf 	bl	80079c0 <vPortFree>
 8006a62:	e001      	b.n	8006a68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d017      	beq.n	8006a9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a76:	88fa      	ldrh	r2, [r7, #6]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9303      	str	r3, [sp, #12]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f80f 	bl	8006ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a92:	69f8      	ldr	r0, [r7, #28]
 8006a94:	f000 f8aa 	bl	8006bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	e002      	b.n	8006aa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f023 0307 	bic.w	r3, r3, #7
 8006ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	617b      	str	r3, [r7, #20]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01f      	beq.n	8006b3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e012      	b.n	8006b2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	7819      	ldrb	r1, [r3, #0]
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	3334      	adds	r3, #52	; 0x34
 8006b14:	460a      	mov	r2, r1
 8006b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b0f      	cmp	r3, #15
 8006b2e:	d9e9      	bls.n	8006b04 <prvInitialiseNewTask+0x54>
 8006b30:	e000      	b.n	8006b34 <prvInitialiseNewTask+0x84>
			{
				break;
 8006b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b3c:	e003      	b.n	8006b46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	2b06      	cmp	r3, #6
 8006b4a:	d901      	bls.n	8006b50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fe6b 	bl	8006842 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	3318      	adds	r3, #24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fe66 	bl	8006842 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f1c3 0207 	rsb	r2, r3, #7
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	334c      	adds	r3, #76	; 0x4c
 8006ba0:	2260      	movs	r2, #96	; 0x60
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 f863 	bl	8007c70 <memset>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <prvInitialiseNewTask+0x130>)
 8006bae:	651a      	str	r2, [r3, #80]	; 0x50
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	4a0c      	ldr	r2, [pc, #48]	; (8006be4 <prvInitialiseNewTask+0x134>)
 8006bb4:	655a      	str	r2, [r3, #84]	; 0x54
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <prvInitialiseNewTask+0x138>)
 8006bba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	69b8      	ldr	r0, [r7, #24]
 8006bc2:	f000 fc1f 	bl	8007404 <pxPortInitialiseStack>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd8:	bf00      	nop
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	08008764 	.word	0x08008764
 8006be4:	08008784 	.word	0x08008784
 8006be8:	08008744 	.word	0x08008744

08006bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf4:	f000 fd36 	bl	8007664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf8:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <prvAddNewTaskToReadyList+0xb8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <prvAddNewTaskToReadyList+0xb8>)
 8006c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c0a:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c10:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <prvAddNewTaskToReadyList+0xb8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d110      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c18:	f000 facc 	bl	80071b4 <prvInitialiseTaskLists>
 8006c1c:	e00d      	b.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c1e:	4b23      	ldr	r3, [pc, #140]	; (8006cac <prvAddNewTaskToReadyList+0xc0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c26:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d802      	bhi.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c34:	4a1c      	ldr	r2, [pc, #112]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c3a:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	2201      	movs	r2, #1
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <prvAddNewTaskToReadyList+0xcc>)
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7ff fdf5 	bl	800685c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c72:	f000 fd27 	bl	80076c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <prvAddNewTaskToReadyList+0xc0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d207      	bcs.n	8006c9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000d6c 	.word	0x20000d6c
 8006ca8:	20000c6c 	.word	0x20000c6c
 8006cac:	20000d78 	.word	0x20000d78
 8006cb0:	20000d88 	.word	0x20000d88
 8006cb4:	20000d74 	.word	0x20000d74
 8006cb8:	20000c70 	.word	0x20000c70
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d017      	beq.n	8006d02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cd2:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <vTaskDelay+0x60>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <vTaskDelay+0x30>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	60bb      	str	r3, [r7, #8]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cf0:	f000 f884 	bl	8006dfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb1e 	bl	8007338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cfc:	f000 f88c 	bl	8006e18 <xTaskResumeAll>
 8006d00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d107      	bne.n	8006d18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d08:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <vTaskDelay+0x64>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000d94 	.word	0x20000d94
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d36:	463a      	mov	r2, r7
 8006d38:	1d39      	adds	r1, r7, #4
 8006d3a:	f107 0308 	add.w	r3, r7, #8
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7f9 fdfc 	bl	800093c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	9202      	str	r2, [sp, #8]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	460a      	mov	r2, r1
 8006d56:	4921      	ldr	r1, [pc, #132]	; (8006ddc <vTaskStartScheduler+0xb4>)
 8006d58:	4821      	ldr	r0, [pc, #132]	; (8006de0 <vTaskStartScheduler+0xb8>)
 8006d5a:	f7ff fe06 	bl	800696a <xTaskCreateStatic>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4a20      	ldr	r2, [pc, #128]	; (8006de4 <vTaskStartScheduler+0xbc>)
 8006d62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d64:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <vTaskStartScheduler+0xbc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e001      	b.n	8006d76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d11b      	bne.n	8006db4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	613b      	str	r3, [r7, #16]
}
 8006d8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d90:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <vTaskStartScheduler+0xc0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	334c      	adds	r3, #76	; 0x4c
 8006d96:	4a15      	ldr	r2, [pc, #84]	; (8006dec <vTaskStartScheduler+0xc4>)
 8006d98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <vTaskStartScheduler+0xc8>)
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006da0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006da2:	4b14      	ldr	r3, [pc, #80]	; (8006df4 <vTaskStartScheduler+0xcc>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <vTaskStartScheduler+0xd0>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dae:	f000 fbb7 	bl	8007520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006db2:	e00e      	b.n	8006dd2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d10a      	bne.n	8006dd2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60fb      	str	r3, [r7, #12]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vTaskStartScheduler+0xa8>
}
 8006dd2:	bf00      	nop
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	080086f4 	.word	0x080086f4
 8006de0:	08007185 	.word	0x08007185
 8006de4:	20000d90 	.word	0x20000d90
 8006de8:	20000c6c 	.word	0x20000c6c
 8006dec:	200000b0 	.word	0x200000b0
 8006df0:	20000d8c 	.word	0x20000d8c
 8006df4:	20000d78 	.word	0x20000d78
 8006df8:	20000d70 	.word	0x20000d70

08006dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <vTaskSuspendAll+0x18>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	4a03      	ldr	r2, [pc, #12]	; (8006e14 <vTaskSuspendAll+0x18>)
 8006e08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e0a:	bf00      	nop
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20000d94 	.word	0x20000d94

08006e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e26:	4b41      	ldr	r3, [pc, #260]	; (8006f2c <xTaskResumeAll+0x114>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	603b      	str	r3, [r7, #0]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e44:	f000 fc0e 	bl	8007664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e48:	4b38      	ldr	r3, [pc, #224]	; (8006f2c <xTaskResumeAll+0x114>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4a37      	ldr	r2, [pc, #220]	; (8006f2c <xTaskResumeAll+0x114>)
 8006e50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e52:	4b36      	ldr	r3, [pc, #216]	; (8006f2c <xTaskResumeAll+0x114>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d161      	bne.n	8006f1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e5a:	4b35      	ldr	r3, [pc, #212]	; (8006f30 <xTaskResumeAll+0x118>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d05d      	beq.n	8006f1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e62:	e02e      	b.n	8006ec2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e64:	4b33      	ldr	r3, [pc, #204]	; (8006f34 <xTaskResumeAll+0x11c>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3318      	adds	r3, #24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fd50 	bl	8006916 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fd4b 	bl	8006916 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	2201      	movs	r2, #1
 8006e86:	409a      	lsls	r2, r3
 8006e88:	4b2b      	ldr	r3, [pc, #172]	; (8006f38 <xTaskResumeAll+0x120>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <xTaskResumeAll+0x120>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <xTaskResumeAll+0x124>)
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7ff fcd7 	bl	800685c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	4b23      	ldr	r3, [pc, #140]	; (8006f40 <xTaskResumeAll+0x128>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d302      	bcc.n	8006ec2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ebc:	4b21      	ldr	r3, [pc, #132]	; (8006f44 <xTaskResumeAll+0x12c>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <xTaskResumeAll+0x11c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1cc      	bne.n	8006e64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ed0:	f000 fa12 	bl	80072f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <xTaskResumeAll+0x130>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ee0:	f000 f836 	bl	8006f50 <xTaskIncrementTick>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006eea:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <xTaskResumeAll+0x12c>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f1      	bne.n	8006ee0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006efc:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <xTaskResumeAll+0x130>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <xTaskResumeAll+0x12c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <xTaskResumeAll+0x134>)
 8006f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f1e:	f000 fbd1 	bl	80076c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f22:	68bb      	ldr	r3, [r7, #8]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000d94 	.word	0x20000d94
 8006f30:	20000d6c 	.word	0x20000d6c
 8006f34:	20000d2c 	.word	0x20000d2c
 8006f38:	20000d74 	.word	0x20000d74
 8006f3c:	20000c70 	.word	0x20000c70
 8006f40:	20000c6c 	.word	0x20000c6c
 8006f44:	20000d80 	.word	0x20000d80
 8006f48:	20000d7c 	.word	0x20000d7c
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5a:	4b4e      	ldr	r3, [pc, #312]	; (8007094 <xTaskIncrementTick+0x144>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 808e 	bne.w	8007080 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f64:	4b4c      	ldr	r3, [pc, #304]	; (8007098 <xTaskIncrementTick+0x148>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f6c:	4a4a      	ldr	r2, [pc, #296]	; (8007098 <xTaskIncrementTick+0x148>)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d120      	bne.n	8006fba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f78:	4b48      	ldr	r3, [pc, #288]	; (800709c <xTaskIncrementTick+0x14c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	603b      	str	r3, [r7, #0]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xTaskIncrementTick+0x46>
 8006f98:	4b40      	ldr	r3, [pc, #256]	; (800709c <xTaskIncrementTick+0x14c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	4b40      	ldr	r3, [pc, #256]	; (80070a0 <xTaskIncrementTick+0x150>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a3e      	ldr	r2, [pc, #248]	; (800709c <xTaskIncrementTick+0x14c>)
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	4a3e      	ldr	r2, [pc, #248]	; (80070a0 <xTaskIncrementTick+0x150>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	4b3d      	ldr	r3, [pc, #244]	; (80070a4 <xTaskIncrementTick+0x154>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	4a3c      	ldr	r2, [pc, #240]	; (80070a4 <xTaskIncrementTick+0x154>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	f000 f99f 	bl	80072f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fba:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <xTaskIncrementTick+0x158>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d348      	bcc.n	8007056 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc4:	4b35      	ldr	r3, [pc, #212]	; (800709c <xTaskIncrementTick+0x14c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fce:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <xTaskIncrementTick+0x158>)
 8006fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd4:	601a      	str	r2, [r3, #0]
					break;
 8006fd6:	e03e      	b.n	8007056 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd8:	4b30      	ldr	r3, [pc, #192]	; (800709c <xTaskIncrementTick+0x14c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d203      	bcs.n	8006ff8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ff0:	4a2d      	ldr	r2, [pc, #180]	; (80070a8 <xTaskIncrementTick+0x158>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ff6:	e02e      	b.n	8007056 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fc8a 	bl	8006916 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	3318      	adds	r3, #24
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff fc81 	bl	8006916 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2201      	movs	r2, #1
 800701a:	409a      	lsls	r2, r3
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <xTaskIncrementTick+0x15c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4313      	orrs	r3, r2
 8007022:	4a22      	ldr	r2, [pc, #136]	; (80070ac <xTaskIncrementTick+0x15c>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <xTaskIncrementTick+0x160>)
 8007034:	441a      	add	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7ff fc0d 	bl	800685c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007046:	4b1b      	ldr	r3, [pc, #108]	; (80070b4 <xTaskIncrementTick+0x164>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	429a      	cmp	r2, r3
 800704e:	d3b9      	bcc.n	8006fc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007054:	e7b6      	b.n	8006fc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <xTaskIncrementTick+0x164>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4914      	ldr	r1, [pc, #80]	; (80070b0 <xTaskIncrementTick+0x160>)
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d901      	bls.n	8007072 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007072:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <xTaskIncrementTick+0x168>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800707a:	2301      	movs	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	e004      	b.n	800708a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <xTaskIncrementTick+0x16c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	4a0d      	ldr	r2, [pc, #52]	; (80070bc <xTaskIncrementTick+0x16c>)
 8007088:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800708a:	697b      	ldr	r3, [r7, #20]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000d94 	.word	0x20000d94
 8007098:	20000d70 	.word	0x20000d70
 800709c:	20000d24 	.word	0x20000d24
 80070a0:	20000d28 	.word	0x20000d28
 80070a4:	20000d84 	.word	0x20000d84
 80070a8:	20000d8c 	.word	0x20000d8c
 80070ac:	20000d74 	.word	0x20000d74
 80070b0:	20000c70 	.word	0x20000c70
 80070b4:	20000c6c 	.word	0x20000c6c
 80070b8:	20000d80 	.word	0x20000d80
 80070bc:	20000d7c 	.word	0x20000d7c

080070c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070c6:	4b29      	ldr	r3, [pc, #164]	; (800716c <vTaskSwitchContext+0xac>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070ce:	4b28      	ldr	r3, [pc, #160]	; (8007170 <vTaskSwitchContext+0xb0>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070d4:	e044      	b.n	8007160 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80070d6:	4b26      	ldr	r3, [pc, #152]	; (8007170 <vTaskSwitchContext+0xb0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070dc:	4b25      	ldr	r3, [pc, #148]	; (8007174 <vTaskSwitchContext+0xb4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	fab3 f383 	clz	r3, r3
 80070e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	f1c3 031f 	rsb	r3, r3, #31
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	4921      	ldr	r1, [pc, #132]	; (8007178 <vTaskSwitchContext+0xb8>)
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	607b      	str	r3, [r7, #4]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <vTaskSwitchContext+0x5a>
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4a14      	ldr	r2, [pc, #80]	; (8007178 <vTaskSwitchContext+0xb8>)
 8007128:	4413      	add	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3308      	adds	r3, #8
 800713e:	429a      	cmp	r2, r3
 8007140:	d104      	bne.n	800714c <vTaskSwitchContext+0x8c>
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	605a      	str	r2, [r3, #4]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4a0a      	ldr	r2, [pc, #40]	; (800717c <vTaskSwitchContext+0xbc>)
 8007154:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <vTaskSwitchContext+0xbc>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	334c      	adds	r3, #76	; 0x4c
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <vTaskSwitchContext+0xc0>)
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000d94 	.word	0x20000d94
 8007170:	20000d80 	.word	0x20000d80
 8007174:	20000d74 	.word	0x20000d74
 8007178:	20000c70 	.word	0x20000c70
 800717c:	20000c6c 	.word	0x20000c6c
 8007180:	200000b0 	.word	0x200000b0

08007184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800718c:	f000 f852 	bl	8007234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <prvIdleTask+0x28>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d9f9      	bls.n	800718c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <prvIdleTask+0x2c>)
 800719a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071a8:	e7f0      	b.n	800718c <prvIdleTask+0x8>
 80071aa:	bf00      	nop
 80071ac:	20000c70 	.word	0x20000c70
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	e00c      	b.n	80071da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4a12      	ldr	r2, [pc, #72]	; (8007214 <prvInitialiseTaskLists+0x60>)
 80071cc:	4413      	add	r3, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fb17 	bl	8006802 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3301      	adds	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b06      	cmp	r3, #6
 80071de:	d9ef      	bls.n	80071c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e0:	480d      	ldr	r0, [pc, #52]	; (8007218 <prvInitialiseTaskLists+0x64>)
 80071e2:	f7ff fb0e 	bl	8006802 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071e6:	480d      	ldr	r0, [pc, #52]	; (800721c <prvInitialiseTaskLists+0x68>)
 80071e8:	f7ff fb0b 	bl	8006802 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071ec:	480c      	ldr	r0, [pc, #48]	; (8007220 <prvInitialiseTaskLists+0x6c>)
 80071ee:	f7ff fb08 	bl	8006802 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071f2:	480c      	ldr	r0, [pc, #48]	; (8007224 <prvInitialiseTaskLists+0x70>)
 80071f4:	f7ff fb05 	bl	8006802 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071f8:	480b      	ldr	r0, [pc, #44]	; (8007228 <prvInitialiseTaskLists+0x74>)
 80071fa:	f7ff fb02 	bl	8006802 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvInitialiseTaskLists+0x78>)
 8007200:	4a05      	ldr	r2, [pc, #20]	; (8007218 <prvInitialiseTaskLists+0x64>)
 8007202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <prvInitialiseTaskLists+0x7c>)
 8007206:	4a05      	ldr	r2, [pc, #20]	; (800721c <prvInitialiseTaskLists+0x68>)
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000c70 	.word	0x20000c70
 8007218:	20000cfc 	.word	0x20000cfc
 800721c:	20000d10 	.word	0x20000d10
 8007220:	20000d2c 	.word	0x20000d2c
 8007224:	20000d40 	.word	0x20000d40
 8007228:	20000d58 	.word	0x20000d58
 800722c:	20000d24 	.word	0x20000d24
 8007230:	20000d28 	.word	0x20000d28

08007234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723a:	e019      	b.n	8007270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800723c:	f000 fa12 	bl	8007664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <prvCheckTasksWaitingTermination+0x50>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fb62 	bl	8006916 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007252:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3b01      	subs	r3, #1
 8007258:	4a0b      	ldr	r2, [pc, #44]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 800725a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <prvCheckTasksWaitingTermination+0x58>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3b01      	subs	r3, #1
 8007262:	4a0a      	ldr	r2, [pc, #40]	; (800728c <prvCheckTasksWaitingTermination+0x58>)
 8007264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007266:	f000 fa2d 	bl	80076c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f810 	bl	8007290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <prvCheckTasksWaitingTermination+0x58>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e1      	bne.n	800723c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000d40 	.word	0x20000d40
 8007288:	20000d6c 	.word	0x20000d6c
 800728c:	20000d54 	.word	0x20000d54

08007290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	334c      	adds	r3, #76	; 0x4c
 800729c:	4618      	mov	r0, r3
 800729e:	f000 fd91 	bl	8007dc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d108      	bne.n	80072be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fb85 	bl	80079c0 <vPortFree>
				vPortFree( pxTCB );
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb82 	bl	80079c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072bc:	e018      	b.n	80072f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d103      	bne.n	80072d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb79 	bl	80079c0 <vPortFree>
	}
 80072ce:	e00f      	b.n	80072f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d00a      	beq.n	80072f0 <prvDeleteTCB+0x60>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	60fb      	str	r3, [r7, #12]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <prvDeleteTCB+0x5e>
	}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <prvResetNextTaskUnblockTime+0x38>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <prvResetNextTaskUnblockTime+0x3c>)
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007310:	e008      	b.n	8007324 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007312:	4b07      	ldr	r3, [pc, #28]	; (8007330 <prvResetNextTaskUnblockTime+0x38>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4a04      	ldr	r2, [pc, #16]	; (8007334 <prvResetNextTaskUnblockTime+0x3c>)
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20000d24 	.word	0x20000d24
 8007334:	20000d8c 	.word	0x20000d8c

08007338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007348:	4b28      	ldr	r3, [pc, #160]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3304      	adds	r3, #4
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fae1 	bl	8006916 <uxListRemove>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800735a:	4b24      	ldr	r3, [pc, #144]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	2201      	movs	r2, #1
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	43da      	mvns	r2, r3
 8007368:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4013      	ands	r3, r2
 800736e:	4a20      	ldr	r2, [pc, #128]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007378:	d10a      	bne.n	8007390 <prvAddCurrentTaskToDelayedList+0x58>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007380:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	481a      	ldr	r0, [pc, #104]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800738a:	f7ff fa67 	bl	800685c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800738e:	e026      	b.n	80073de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007398:	4b14      	ldr	r3, [pc, #80]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d209      	bcs.n	80073bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7ff fa75 	bl	80068a4 <vListInsert>
}
 80073ba:	e010      	b.n	80073de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7ff fa6b 	bl	80068a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d202      	bcs.n	80073de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6013      	str	r3, [r2, #0]
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000d70 	.word	0x20000d70
 80073ec:	20000c6c 	.word	0x20000c6c
 80073f0:	20000d74 	.word	0x20000d74
 80073f4:	20000d58 	.word	0x20000d58
 80073f8:	20000d28 	.word	0x20000d28
 80073fc:	20000d24 	.word	0x20000d24
 8007400:	20000d8c 	.word	0x20000d8c

08007404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3b04      	subs	r3, #4
 8007414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800741c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b04      	subs	r3, #4
 8007422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f023 0201 	bic.w	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b04      	subs	r3, #4
 8007432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007434:	4a0c      	ldr	r2, [pc, #48]	; (8007468 <pxPortInitialiseStack+0x64>)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3b14      	subs	r3, #20
 800743e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3b04      	subs	r3, #4
 800744a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f06f 0202 	mvn.w	r2, #2
 8007452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3b20      	subs	r3, #32
 8007458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	0800746d 	.word	0x0800746d

0800746c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007476:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <prvTaskExitError+0x54>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d00a      	beq.n	8007496 <prvTaskExitError+0x2a>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <prvTaskExitError+0x28>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	60bb      	str	r3, [r7, #8]
}
 80074a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074aa:	bf00      	nop
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0fc      	beq.n	80074ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	200000ac 	.word	0x200000ac
	...

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074f8:	4808      	ldr	r0, [pc, #32]	; (800751c <prvPortStartFirstTask+0x24>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8814 	msr	CONTROL, r0
 800750a:	b662      	cpsie	i
 800750c:	b661      	cpsie	f
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	df00      	svc	0
 8007518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800751a:	bf00      	nop
 800751c:	e000ed08 	.word	0xe000ed08

08007520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007526:	4b46      	ldr	r3, [pc, #280]	; (8007640 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a46      	ldr	r2, [pc, #280]	; (8007644 <xPortStartScheduler+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x26>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007546:	4b3e      	ldr	r3, [pc, #248]	; (8007640 <xPortStartScheduler+0x120>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a3f      	ldr	r2, [pc, #252]	; (8007648 <xPortStartScheduler+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10a      	bne.n	8007566 <xPortStartScheduler+0x46>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007566:	4b39      	ldr	r3, [pc, #228]	; (800764c <xPortStartScheduler+0x12c>)
 8007568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	22ff      	movs	r2, #255	; 0xff
 8007576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007588:	b2da      	uxtb	r2, r3
 800758a:	4b31      	ldr	r3, [pc, #196]	; (8007650 <xPortStartScheduler+0x130>)
 800758c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800758e:	4b31      	ldr	r3, [pc, #196]	; (8007654 <xPortStartScheduler+0x134>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007594:	e009      	b.n	80075aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007596:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3b01      	subs	r3, #1
 800759c:	4a2d      	ldr	r2, [pc, #180]	; (8007654 <xPortStartScheduler+0x134>)
 800759e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d0ef      	beq.n	8007596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075b6:	4b27      	ldr	r3, [pc, #156]	; (8007654 <xPortStartScheduler+0x134>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1c3 0307 	rsb	r3, r3, #7
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d00a      	beq.n	80075d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60bb      	str	r3, [r7, #8]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075d8:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <xPortStartScheduler+0x134>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <xPortStartScheduler+0x134>)
 80075e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <xPortStartScheduler+0x134>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ea:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <xPortStartScheduler+0x134>)
 80075ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075f6:	4b18      	ldr	r3, [pc, #96]	; (8007658 <xPortStartScheduler+0x138>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a17      	ldr	r2, [pc, #92]	; (8007658 <xPortStartScheduler+0x138>)
 80075fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <xPortStartScheduler+0x138>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <xPortStartScheduler+0x138>)
 8007608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800760e:	f000 f8dd 	bl	80077cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <xPortStartScheduler+0x13c>)
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007618:	f000 f8fc 	bl	8007814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <xPortStartScheduler+0x140>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0f      	ldr	r2, [pc, #60]	; (8007660 <xPortStartScheduler+0x140>)
 8007622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007628:	f7ff ff66 	bl	80074f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800762c:	f7ff fd48 	bl	80070c0 <vTaskSwitchContext>
	prvTaskExitError();
 8007630:	f7ff ff1c 	bl	800746c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	e000ed00 	.word	0xe000ed00
 8007644:	410fc271 	.word	0x410fc271
 8007648:	410fc270 	.word	0x410fc270
 800764c:	e000e400 	.word	0xe000e400
 8007650:	20000d98 	.word	0x20000d98
 8007654:	20000d9c 	.word	0x20000d9c
 8007658:	e000ed20 	.word	0xe000ed20
 800765c:	200000ac 	.word	0x200000ac
 8007660:	e000ef34 	.word	0xe000ef34

08007664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	607b      	str	r3, [r7, #4]
}
 800767c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800767e:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <vPortEnterCritical+0x58>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <vPortEnterCritical+0x58>)
 8007686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <vPortEnterCritical+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10f      	bne.n	80076b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <vPortEnterCritical+0x5c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vPortEnterCritical+0x4a>
	}
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	200000ac 	.word	0x200000ac
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <vPortExitCritical+0x50>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <vPortExitCritical+0x24>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	607b      	str	r3, [r7, #4]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <vPortExitCritical+0x50>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	4a09      	ldr	r2, [pc, #36]	; (8007714 <vPortExitCritical+0x50>)
 80076f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <vPortExitCritical+0x50>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <vPortExitCritical+0x42>
 80076fa:	2300      	movs	r3, #0
 80076fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	200000ac 	.word	0x200000ac
	...

08007720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007720:	f3ef 8009 	mrs	r0, PSP
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4b15      	ldr	r3, [pc, #84]	; (8007780 <pxCurrentTCBConst>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	f01e 0f10 	tst.w	lr, #16
 8007730:	bf08      	it	eq
 8007732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	6010      	str	r0, [r2, #0]
 800773c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007744:	f380 8811 	msr	BASEPRI, r0
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f7ff fcb6 	bl	80070c0 <vTaskSwitchContext>
 8007754:	f04f 0000 	mov.w	r0, #0
 8007758:	f380 8811 	msr	BASEPRI, r0
 800775c:	bc09      	pop	{r0, r3}
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	6808      	ldr	r0, [r1, #0]
 8007762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007766:	f01e 0f10 	tst.w	lr, #16
 800776a:	bf08      	it	eq
 800776c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007770:	f380 8809 	msr	PSP, r0
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst>:
 8007780:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077a2:	f7ff fbd5 	bl	8006f50 <xTaskIncrementTick>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <SysTick_Handler+0x40>)
 80077ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f383 8811 	msr	BASEPRI, r3
}
 80077be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <vPortSetupTimerInterrupt+0x38>)
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <vPortSetupTimerInterrupt+0x3c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <vPortSetupTimerInterrupt+0x40>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	4a09      	ldr	r2, [pc, #36]	; (8007810 <vPortSetupTimerInterrupt+0x44>)
 80077ea:	3b01      	subs	r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	e000e010 	.word	0xe000e010
 8007804:	e000e018 	.word	0xe000e018
 8007808:	20000090 	.word	0x20000090
 800780c:	10624dd3 	.word	0x10624dd3
 8007810:	e000e014 	.word	0xe000e014

08007814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007824 <vPortEnableVFP+0x10>
 8007818:	6801      	ldr	r1, [r0, #0]
 800781a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800781e:	6001      	str	r1, [r0, #0]
 8007820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007822:	bf00      	nop
 8007824:	e000ed88 	.word	0xe000ed88

08007828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	; 0x28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007834:	f7ff fae2 	bl	8006dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007838:	4b5b      	ldr	r3, [pc, #364]	; (80079a8 <pvPortMalloc+0x180>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007840:	f000 f920 	bl	8007a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007844:	4b59      	ldr	r3, [pc, #356]	; (80079ac <pvPortMalloc+0x184>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8093 	bne.w	8007978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01d      	beq.n	8007894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007858:	2208      	movs	r2, #8
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d014      	beq.n	8007894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f023 0307 	bic.w	r3, r3, #7
 8007870:	3308      	adds	r3, #8
 8007872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <pvPortMalloc+0x6c>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	617b      	str	r3, [r7, #20]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d06e      	beq.n	8007978 <pvPortMalloc+0x150>
 800789a:	4b45      	ldr	r3, [pc, #276]	; (80079b0 <pvPortMalloc+0x188>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d869      	bhi.n	8007978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078a4:	4b43      	ldr	r3, [pc, #268]	; (80079b4 <pvPortMalloc+0x18c>)
 80078a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078a8:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <pvPortMalloc+0x18c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ae:	e004      	b.n	80078ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d903      	bls.n	80078cc <pvPortMalloc+0xa4>
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1f1      	bne.n	80078b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078cc:	4b36      	ldr	r3, [pc, #216]	; (80079a8 <pvPortMalloc+0x180>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d050      	beq.n	8007978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2208      	movs	r2, #8
 80078dc:	4413      	add	r3, r2
 80078de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	2308      	movs	r3, #8
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d91f      	bls.n	8007938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4413      	add	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <pvPortMalloc+0xf8>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	613b      	str	r3, [r7, #16]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007932:	69b8      	ldr	r0, [r7, #24]
 8007934:	f000 f908 	bl	8007b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007938:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <pvPortMalloc+0x188>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <pvPortMalloc+0x188>)
 8007944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007946:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <pvPortMalloc+0x188>)
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <pvPortMalloc+0x190>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d203      	bcs.n	800795a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007952:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <pvPortMalloc+0x188>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a18      	ldr	r2, [pc, #96]	; (80079b8 <pvPortMalloc+0x190>)
 8007958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <pvPortMalloc+0x184>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	431a      	orrs	r2, r3
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800796e:	4b13      	ldr	r3, [pc, #76]	; (80079bc <pvPortMalloc+0x194>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	4a11      	ldr	r2, [pc, #68]	; (80079bc <pvPortMalloc+0x194>)
 8007976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007978:	f7ff fa4e 	bl	8006e18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <pvPortMalloc+0x174>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60fb      	str	r3, [r7, #12]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <pvPortMalloc+0x172>
	return pvReturn;
 800799c:	69fb      	ldr	r3, [r7, #28]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3728      	adds	r7, #40	; 0x28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20001960 	.word	0x20001960
 80079ac:	20001974 	.word	0x20001974
 80079b0:	20001964 	.word	0x20001964
 80079b4:	20001958 	.word	0x20001958
 80079b8:	20001968 	.word	0x20001968
 80079bc:	2000196c 	.word	0x2000196c

080079c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d04d      	beq.n	8007a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079d2:	2308      	movs	r3, #8
 80079d4:	425b      	negs	r3, r3
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4413      	add	r3, r2
 80079da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <vPortFree+0xb8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <vPortFree+0x44>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60fb      	str	r3, [r7, #12]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <vPortFree+0x62>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	60bb      	str	r3, [r7, #8]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <vPortFree+0xb8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01e      	beq.n	8007a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d11a      	bne.n	8007a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <vPortFree+0xb8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	401a      	ands	r2, r3
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a48:	f7ff f9d8 	bl	8006dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <vPortFree+0xbc>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4413      	add	r3, r2
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <vPortFree+0xbc>)
 8007a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a5a:	6938      	ldr	r0, [r7, #16]
 8007a5c:	f000 f874 	bl	8007b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <vPortFree+0xc0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <vPortFree+0xc0>)
 8007a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a6a:	f7ff f9d5 	bl	8006e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a6e:	bf00      	nop
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20001974 	.word	0x20001974
 8007a7c:	20001964 	.word	0x20001964
 8007a80:	20001970 	.word	0x20001970

08007a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <prvHeapInit+0xac>)
 8007a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00c      	beq.n	8007ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0307 	bic.w	r3, r3, #7
 8007aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <prvHeapInit+0xac>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007abc:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <prvHeapInit+0xb0>)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ac2:	4b1c      	ldr	r3, [pc, #112]	; (8007b34 <prvHeapInit+0xb0>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0307 	bic.w	r3, r3, #7
 8007ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4a15      	ldr	r2, [pc, #84]	; (8007b38 <prvHeapInit+0xb4>)
 8007ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <prvHeapInit+0xb4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007aee:	4b12      	ldr	r3, [pc, #72]	; (8007b38 <prvHeapInit+0xb4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b04:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <prvHeapInit+0xb4>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <prvHeapInit+0xb8>)
 8007b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <prvHeapInit+0xbc>)
 8007b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b1c:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <prvHeapInit+0xc0>)
 8007b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b22:	601a      	str	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	20000da0 	.word	0x20000da0
 8007b34:	20001958 	.word	0x20001958
 8007b38:	20001960 	.word	0x20001960
 8007b3c:	20001968 	.word	0x20001968
 8007b40:	20001964 	.word	0x20001964
 8007b44:	20001974 	.word	0x20001974

08007b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b50:	4b28      	ldr	r3, [pc, #160]	; (8007bf4 <prvInsertBlockIntoFreeList+0xac>)
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e002      	b.n	8007b5c <prvInsertBlockIntoFreeList+0x14>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d8f7      	bhi.n	8007b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4413      	add	r3, r2
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d108      	bne.n	8007b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	441a      	add	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d118      	bne.n	8007bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d00d      	beq.n	8007bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	441a      	add	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e008      	b.n	8007bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e003      	b.n	8007bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d002      	beq.n	8007be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20001958 	.word	0x20001958
 8007bf8:	20001960 	.word	0x20001960

08007bfc <__errno>:
 8007bfc:	4b01      	ldr	r3, [pc, #4]	; (8007c04 <__errno+0x8>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	200000b0 	.word	0x200000b0

08007c08 <__libc_init_array>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4d0d      	ldr	r5, [pc, #52]	; (8007c40 <__libc_init_array+0x38>)
 8007c0c:	4c0d      	ldr	r4, [pc, #52]	; (8007c44 <__libc_init_array+0x3c>)
 8007c0e:	1b64      	subs	r4, r4, r5
 8007c10:	10a4      	asrs	r4, r4, #2
 8007c12:	2600      	movs	r6, #0
 8007c14:	42a6      	cmp	r6, r4
 8007c16:	d109      	bne.n	8007c2c <__libc_init_array+0x24>
 8007c18:	4d0b      	ldr	r5, [pc, #44]	; (8007c48 <__libc_init_array+0x40>)
 8007c1a:	4c0c      	ldr	r4, [pc, #48]	; (8007c4c <__libc_init_array+0x44>)
 8007c1c:	f000 fd3e 	bl	800869c <_init>
 8007c20:	1b64      	subs	r4, r4, r5
 8007c22:	10a4      	asrs	r4, r4, #2
 8007c24:	2600      	movs	r6, #0
 8007c26:	42a6      	cmp	r6, r4
 8007c28:	d105      	bne.n	8007c36 <__libc_init_array+0x2e>
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c30:	4798      	blx	r3
 8007c32:	3601      	adds	r6, #1
 8007c34:	e7ee      	b.n	8007c14 <__libc_init_array+0xc>
 8007c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3a:	4798      	blx	r3
 8007c3c:	3601      	adds	r6, #1
 8007c3e:	e7f2      	b.n	8007c26 <__libc_init_array+0x1e>
 8007c40:	080087e0 	.word	0x080087e0
 8007c44:	080087e0 	.word	0x080087e0
 8007c48:	080087e0 	.word	0x080087e0
 8007c4c:	080087e4 	.word	0x080087e4

08007c50 <__retarget_lock_acquire_recursive>:
 8007c50:	4770      	bx	lr

08007c52 <__retarget_lock_release_recursive>:
 8007c52:	4770      	bx	lr

08007c54 <memcpy>:
 8007c54:	440a      	add	r2, r1
 8007c56:	4291      	cmp	r1, r2
 8007c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c5c:	d100      	bne.n	8007c60 <memcpy+0xc>
 8007c5e:	4770      	bx	lr
 8007c60:	b510      	push	{r4, lr}
 8007c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6a:	4291      	cmp	r1, r2
 8007c6c:	d1f9      	bne.n	8007c62 <memcpy+0xe>
 8007c6e:	bd10      	pop	{r4, pc}

08007c70 <memset>:
 8007c70:	4402      	add	r2, r0
 8007c72:	4603      	mov	r3, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <sbrk_aligned>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	4e0e      	ldr	r6, [pc, #56]	; (8007cbc <sbrk_aligned+0x3c>)
 8007c84:	460c      	mov	r4, r1
 8007c86:	6831      	ldr	r1, [r6, #0]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	b911      	cbnz	r1, 8007c92 <sbrk_aligned+0x12>
 8007c8c:	f000 f8f6 	bl	8007e7c <_sbrk_r>
 8007c90:	6030      	str	r0, [r6, #0]
 8007c92:	4621      	mov	r1, r4
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 f8f1 	bl	8007e7c <_sbrk_r>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d00a      	beq.n	8007cb4 <sbrk_aligned+0x34>
 8007c9e:	1cc4      	adds	r4, r0, #3
 8007ca0:	f024 0403 	bic.w	r4, r4, #3
 8007ca4:	42a0      	cmp	r0, r4
 8007ca6:	d007      	beq.n	8007cb8 <sbrk_aligned+0x38>
 8007ca8:	1a21      	subs	r1, r4, r0
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 f8e6 	bl	8007e7c <_sbrk_r>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d101      	bne.n	8007cb8 <sbrk_aligned+0x38>
 8007cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8007cb8:	4620      	mov	r0, r4
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	20001980 	.word	0x20001980

08007cc0 <_malloc_r>:
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	1ccd      	adds	r5, r1, #3
 8007cc6:	f025 0503 	bic.w	r5, r5, #3
 8007cca:	3508      	adds	r5, #8
 8007ccc:	2d0c      	cmp	r5, #12
 8007cce:	bf38      	it	cc
 8007cd0:	250c      	movcc	r5, #12
 8007cd2:	2d00      	cmp	r5, #0
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	db01      	blt.n	8007cdc <_malloc_r+0x1c>
 8007cd8:	42a9      	cmp	r1, r5
 8007cda:	d905      	bls.n	8007ce8 <_malloc_r+0x28>
 8007cdc:	230c      	movs	r3, #12
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce8:	4e2e      	ldr	r6, [pc, #184]	; (8007da4 <_malloc_r+0xe4>)
 8007cea:	f000 f90b 	bl	8007f04 <__malloc_lock>
 8007cee:	6833      	ldr	r3, [r6, #0]
 8007cf0:	461c      	mov	r4, r3
 8007cf2:	bb34      	cbnz	r4, 8007d42 <_malloc_r+0x82>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	f7ff ffc2 	bl	8007c80 <sbrk_aligned>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	4604      	mov	r4, r0
 8007d00:	d14d      	bne.n	8007d9e <_malloc_r+0xde>
 8007d02:	6834      	ldr	r4, [r6, #0]
 8007d04:	4626      	mov	r6, r4
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	d140      	bne.n	8007d8c <_malloc_r+0xcc>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4638      	mov	r0, r7
 8007d10:	eb04 0803 	add.w	r8, r4, r3
 8007d14:	f000 f8b2 	bl	8007e7c <_sbrk_r>
 8007d18:	4580      	cmp	r8, r0
 8007d1a:	d13a      	bne.n	8007d92 <_malloc_r+0xd2>
 8007d1c:	6821      	ldr	r1, [r4, #0]
 8007d1e:	3503      	adds	r5, #3
 8007d20:	1a6d      	subs	r5, r5, r1
 8007d22:	f025 0503 	bic.w	r5, r5, #3
 8007d26:	3508      	adds	r5, #8
 8007d28:	2d0c      	cmp	r5, #12
 8007d2a:	bf38      	it	cc
 8007d2c:	250c      	movcc	r5, #12
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ffa5 	bl	8007c80 <sbrk_aligned>
 8007d36:	3001      	adds	r0, #1
 8007d38:	d02b      	beq.n	8007d92 <_malloc_r+0xd2>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	442b      	add	r3, r5
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	e00e      	b.n	8007d60 <_malloc_r+0xa0>
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	1b52      	subs	r2, r2, r5
 8007d46:	d41e      	bmi.n	8007d86 <_malloc_r+0xc6>
 8007d48:	2a0b      	cmp	r2, #11
 8007d4a:	d916      	bls.n	8007d7a <_malloc_r+0xba>
 8007d4c:	1961      	adds	r1, r4, r5
 8007d4e:	42a3      	cmp	r3, r4
 8007d50:	6025      	str	r5, [r4, #0]
 8007d52:	bf18      	it	ne
 8007d54:	6059      	strne	r1, [r3, #4]
 8007d56:	6863      	ldr	r3, [r4, #4]
 8007d58:	bf08      	it	eq
 8007d5a:	6031      	streq	r1, [r6, #0]
 8007d5c:	5162      	str	r2, [r4, r5]
 8007d5e:	604b      	str	r3, [r1, #4]
 8007d60:	4638      	mov	r0, r7
 8007d62:	f104 060b 	add.w	r6, r4, #11
 8007d66:	f000 f8d3 	bl	8007f10 <__malloc_unlock>
 8007d6a:	f026 0607 	bic.w	r6, r6, #7
 8007d6e:	1d23      	adds	r3, r4, #4
 8007d70:	1af2      	subs	r2, r6, r3
 8007d72:	d0b6      	beq.n	8007ce2 <_malloc_r+0x22>
 8007d74:	1b9b      	subs	r3, r3, r6
 8007d76:	50a3      	str	r3, [r4, r2]
 8007d78:	e7b3      	b.n	8007ce2 <_malloc_r+0x22>
 8007d7a:	6862      	ldr	r2, [r4, #4]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	bf0c      	ite	eq
 8007d80:	6032      	streq	r2, [r6, #0]
 8007d82:	605a      	strne	r2, [r3, #4]
 8007d84:	e7ec      	b.n	8007d60 <_malloc_r+0xa0>
 8007d86:	4623      	mov	r3, r4
 8007d88:	6864      	ldr	r4, [r4, #4]
 8007d8a:	e7b2      	b.n	8007cf2 <_malloc_r+0x32>
 8007d8c:	4634      	mov	r4, r6
 8007d8e:	6876      	ldr	r6, [r6, #4]
 8007d90:	e7b9      	b.n	8007d06 <_malloc_r+0x46>
 8007d92:	230c      	movs	r3, #12
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	4638      	mov	r0, r7
 8007d98:	f000 f8ba 	bl	8007f10 <__malloc_unlock>
 8007d9c:	e7a1      	b.n	8007ce2 <_malloc_r+0x22>
 8007d9e:	6025      	str	r5, [r4, #0]
 8007da0:	e7de      	b.n	8007d60 <_malloc_r+0xa0>
 8007da2:	bf00      	nop
 8007da4:	2000197c 	.word	0x2000197c

08007da8 <cleanup_glue>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	460c      	mov	r4, r1
 8007dac:	6809      	ldr	r1, [r1, #0]
 8007dae:	4605      	mov	r5, r0
 8007db0:	b109      	cbz	r1, 8007db6 <cleanup_glue+0xe>
 8007db2:	f7ff fff9 	bl	8007da8 <cleanup_glue>
 8007db6:	4621      	mov	r1, r4
 8007db8:	4628      	mov	r0, r5
 8007dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dbe:	f000 b8ad 	b.w	8007f1c <_free_r>
	...

08007dc4 <_reclaim_reent>:
 8007dc4:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <_reclaim_reent+0xb4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4283      	cmp	r3, r0
 8007dca:	b570      	push	{r4, r5, r6, lr}
 8007dcc:	4604      	mov	r4, r0
 8007dce:	d051      	beq.n	8007e74 <_reclaim_reent+0xb0>
 8007dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007dd2:	b143      	cbz	r3, 8007de6 <_reclaim_reent+0x22>
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d14a      	bne.n	8007e70 <_reclaim_reent+0xac>
 8007dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ddc:	6819      	ldr	r1, [r3, #0]
 8007dde:	b111      	cbz	r1, 8007de6 <_reclaim_reent+0x22>
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 f89b 	bl	8007f1c <_free_r>
 8007de6:	6961      	ldr	r1, [r4, #20]
 8007de8:	b111      	cbz	r1, 8007df0 <_reclaim_reent+0x2c>
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 f896 	bl	8007f1c <_free_r>
 8007df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007df2:	b111      	cbz	r1, 8007dfa <_reclaim_reent+0x36>
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 f891 	bl	8007f1c <_free_r>
 8007dfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007dfc:	b111      	cbz	r1, 8007e04 <_reclaim_reent+0x40>
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 f88c 	bl	8007f1c <_free_r>
 8007e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e06:	b111      	cbz	r1, 8007e0e <_reclaim_reent+0x4a>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 f887 	bl	8007f1c <_free_r>
 8007e0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e10:	b111      	cbz	r1, 8007e18 <_reclaim_reent+0x54>
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 f882 	bl	8007f1c <_free_r>
 8007e18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e1a:	b111      	cbz	r1, 8007e22 <_reclaim_reent+0x5e>
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 f87d 	bl	8007f1c <_free_r>
 8007e22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e24:	b111      	cbz	r1, 8007e2c <_reclaim_reent+0x68>
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f878 	bl	8007f1c <_free_r>
 8007e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e2e:	b111      	cbz	r1, 8007e36 <_reclaim_reent+0x72>
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 f873 	bl	8007f1c <_free_r>
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	b1e3      	cbz	r3, 8007e74 <_reclaim_reent+0xb0>
 8007e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4798      	blx	r3
 8007e40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e42:	b1b9      	cbz	r1, 8007e74 <_reclaim_reent+0xb0>
 8007e44:	4620      	mov	r0, r4
 8007e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e4a:	f7ff bfad 	b.w	8007da8 <cleanup_glue>
 8007e4e:	5949      	ldr	r1, [r1, r5]
 8007e50:	b941      	cbnz	r1, 8007e64 <_reclaim_reent+0xa0>
 8007e52:	3504      	adds	r5, #4
 8007e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e56:	2d80      	cmp	r5, #128	; 0x80
 8007e58:	68d9      	ldr	r1, [r3, #12]
 8007e5a:	d1f8      	bne.n	8007e4e <_reclaim_reent+0x8a>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f85d 	bl	8007f1c <_free_r>
 8007e62:	e7ba      	b.n	8007dda <_reclaim_reent+0x16>
 8007e64:	680e      	ldr	r6, [r1, #0]
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f858 	bl	8007f1c <_free_r>
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	e7ef      	b.n	8007e50 <_reclaim_reent+0x8c>
 8007e70:	2500      	movs	r5, #0
 8007e72:	e7ef      	b.n	8007e54 <_reclaim_reent+0x90>
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
 8007e76:	bf00      	nop
 8007e78:	200000b0 	.word	0x200000b0

08007e7c <_sbrk_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d06      	ldr	r5, [pc, #24]	; (8007e98 <_sbrk_r+0x1c>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	f7f9 fd3e 	bl	8001908 <_sbrk>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_sbrk_r+0x1a>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_sbrk_r+0x1a>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20001984 	.word	0x20001984

08007e9c <sniprintf>:
 8007e9c:	b40c      	push	{r2, r3}
 8007e9e:	b530      	push	{r4, r5, lr}
 8007ea0:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <sniprintf+0x64>)
 8007ea2:	1e0c      	subs	r4, r1, #0
 8007ea4:	681d      	ldr	r5, [r3, #0]
 8007ea6:	b09d      	sub	sp, #116	; 0x74
 8007ea8:	da08      	bge.n	8007ebc <sniprintf+0x20>
 8007eaa:	238b      	movs	r3, #139	; 0x8b
 8007eac:	602b      	str	r3, [r5, #0]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	b01d      	add	sp, #116	; 0x74
 8007eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007eb8:	b002      	add	sp, #8
 8007eba:	4770      	bx	lr
 8007ebc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ec4:	bf14      	ite	ne
 8007ec6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007eca:	4623      	moveq	r3, r4
 8007ecc:	9304      	str	r3, [sp, #16]
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ed4:	9002      	str	r0, [sp, #8]
 8007ed6:	9006      	str	r0, [sp, #24]
 8007ed8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ede:	ab21      	add	r3, sp, #132	; 0x84
 8007ee0:	a902      	add	r1, sp, #8
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	f000 f8c1 	bl	800806c <_svfiprintf_r>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	bfbc      	itt	lt
 8007eee:	238b      	movlt	r3, #139	; 0x8b
 8007ef0:	602b      	strlt	r3, [r5, #0]
 8007ef2:	2c00      	cmp	r4, #0
 8007ef4:	d0dd      	beq.n	8007eb2 <sniprintf+0x16>
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e7d9      	b.n	8007eb2 <sniprintf+0x16>
 8007efe:	bf00      	nop
 8007f00:	200000b0 	.word	0x200000b0

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_lock+0x8>)
 8007f06:	f7ff bea3 	b.w	8007c50 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20001978 	.word	0x20001978

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f7ff be9e 	b.w	8007c52 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	20001978 	.word	0x20001978

08007f1c <_free_r>:
 8007f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d044      	beq.n	8007fac <_free_r+0x90>
 8007f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f26:	9001      	str	r0, [sp, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f2e:	bfb8      	it	lt
 8007f30:	18e4      	addlt	r4, r4, r3
 8007f32:	f7ff ffe7 	bl	8007f04 <__malloc_lock>
 8007f36:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <_free_r+0x94>)
 8007f38:	9801      	ldr	r0, [sp, #4]
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	b933      	cbnz	r3, 8007f4c <_free_r+0x30>
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6014      	str	r4, [r2, #0]
 8007f42:	b003      	add	sp, #12
 8007f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f48:	f7ff bfe2 	b.w	8007f10 <__malloc_unlock>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d908      	bls.n	8007f62 <_free_r+0x46>
 8007f50:	6825      	ldr	r5, [r4, #0]
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf01      	itttt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	1949      	addeq	r1, r1, r5
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	e7ed      	b.n	8007f3e <_free_r+0x22>
 8007f62:	461a      	mov	r2, r3
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b10b      	cbz	r3, 8007f6c <_free_r+0x50>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d9fa      	bls.n	8007f62 <_free_r+0x46>
 8007f6c:	6811      	ldr	r1, [r2, #0]
 8007f6e:	1855      	adds	r5, r2, r1
 8007f70:	42a5      	cmp	r5, r4
 8007f72:	d10b      	bne.n	8007f8c <_free_r+0x70>
 8007f74:	6824      	ldr	r4, [r4, #0]
 8007f76:	4421      	add	r1, r4
 8007f78:	1854      	adds	r4, r2, r1
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	d1e0      	bne.n	8007f42 <_free_r+0x26>
 8007f80:	681c      	ldr	r4, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	4421      	add	r1, r4
 8007f88:	6011      	str	r1, [r2, #0]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0x26>
 8007f8c:	d902      	bls.n	8007f94 <_free_r+0x78>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	e7d6      	b.n	8007f42 <_free_r+0x26>
 8007f94:	6825      	ldr	r5, [r4, #0]
 8007f96:	1961      	adds	r1, r4, r5
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf04      	itt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	bf04      	itt	eq
 8007fa4:	1949      	addeq	r1, r1, r5
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	6054      	str	r4, [r2, #4]
 8007faa:	e7ca      	b.n	8007f42 <_free_r+0x26>
 8007fac:	b003      	add	sp, #12
 8007fae:	bd30      	pop	{r4, r5, pc}
 8007fb0:	2000197c 	.word	0x2000197c

08007fb4 <__ssputs_r>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	688e      	ldr	r6, [r1, #8]
 8007fba:	429e      	cmp	r6, r3
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	4690      	mov	r8, r2
 8007fc2:	461f      	mov	r7, r3
 8007fc4:	d838      	bhi.n	8008038 <__ssputs_r+0x84>
 8007fc6:	898a      	ldrh	r2, [r1, #12]
 8007fc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fcc:	d032      	beq.n	8008034 <__ssputs_r+0x80>
 8007fce:	6825      	ldr	r5, [r4, #0]
 8007fd0:	6909      	ldr	r1, [r1, #16]
 8007fd2:	eba5 0901 	sub.w	r9, r5, r1
 8007fd6:	6965      	ldr	r5, [r4, #20]
 8007fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	444b      	add	r3, r9
 8007fe4:	106d      	asrs	r5, r5, #1
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	bf38      	it	cc
 8007fea:	461d      	movcc	r5, r3
 8007fec:	0553      	lsls	r3, r2, #21
 8007fee:	d531      	bpl.n	8008054 <__ssputs_r+0xa0>
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7ff fe65 	bl	8007cc0 <_malloc_r>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	b950      	cbnz	r0, 8008010 <__ssputs_r+0x5c>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	f8ca 3000 	str.w	r3, [sl]
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008010:	6921      	ldr	r1, [r4, #16]
 8008012:	464a      	mov	r2, r9
 8008014:	f7ff fe1e 	bl	8007c54 <memcpy>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800801e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	6126      	str	r6, [r4, #16]
 8008026:	6165      	str	r5, [r4, #20]
 8008028:	444e      	add	r6, r9
 800802a:	eba5 0509 	sub.w	r5, r5, r9
 800802e:	6026      	str	r6, [r4, #0]
 8008030:	60a5      	str	r5, [r4, #8]
 8008032:	463e      	mov	r6, r7
 8008034:	42be      	cmp	r6, r7
 8008036:	d900      	bls.n	800803a <__ssputs_r+0x86>
 8008038:	463e      	mov	r6, r7
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	4632      	mov	r2, r6
 800803e:	4641      	mov	r1, r8
 8008040:	f000 faa8 	bl	8008594 <memmove>
 8008044:	68a3      	ldr	r3, [r4, #8]
 8008046:	1b9b      	subs	r3, r3, r6
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	4433      	add	r3, r6
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	2000      	movs	r0, #0
 8008052:	e7db      	b.n	800800c <__ssputs_r+0x58>
 8008054:	462a      	mov	r2, r5
 8008056:	f000 fab7 	bl	80085c8 <_realloc_r>
 800805a:	4606      	mov	r6, r0
 800805c:	2800      	cmp	r0, #0
 800805e:	d1e1      	bne.n	8008024 <__ssputs_r+0x70>
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	4650      	mov	r0, sl
 8008064:	f7ff ff5a 	bl	8007f1c <_free_r>
 8008068:	e7c7      	b.n	8007ffa <__ssputs_r+0x46>
	...

0800806c <_svfiprintf_r>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4698      	mov	r8, r3
 8008072:	898b      	ldrh	r3, [r1, #12]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	b09d      	sub	sp, #116	; 0x74
 8008078:	4607      	mov	r7, r0
 800807a:	460d      	mov	r5, r1
 800807c:	4614      	mov	r4, r2
 800807e:	d50e      	bpl.n	800809e <_svfiprintf_r+0x32>
 8008080:	690b      	ldr	r3, [r1, #16]
 8008082:	b963      	cbnz	r3, 800809e <_svfiprintf_r+0x32>
 8008084:	2140      	movs	r1, #64	; 0x40
 8008086:	f7ff fe1b 	bl	8007cc0 <_malloc_r>
 800808a:	6028      	str	r0, [r5, #0]
 800808c:	6128      	str	r0, [r5, #16]
 800808e:	b920      	cbnz	r0, 800809a <_svfiprintf_r+0x2e>
 8008090:	230c      	movs	r3, #12
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e0d1      	b.n	800823e <_svfiprintf_r+0x1d2>
 800809a:	2340      	movs	r3, #64	; 0x40
 800809c:	616b      	str	r3, [r5, #20]
 800809e:	2300      	movs	r3, #0
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	2320      	movs	r3, #32
 80080a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ac:	2330      	movs	r3, #48	; 0x30
 80080ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008258 <_svfiprintf_r+0x1ec>
 80080b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080b6:	f04f 0901 	mov.w	r9, #1
 80080ba:	4623      	mov	r3, r4
 80080bc:	469a      	mov	sl, r3
 80080be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c2:	b10a      	cbz	r2, 80080c8 <_svfiprintf_r+0x5c>
 80080c4:	2a25      	cmp	r2, #37	; 0x25
 80080c6:	d1f9      	bne.n	80080bc <_svfiprintf_r+0x50>
 80080c8:	ebba 0b04 	subs.w	fp, sl, r4
 80080cc:	d00b      	beq.n	80080e6 <_svfiprintf_r+0x7a>
 80080ce:	465b      	mov	r3, fp
 80080d0:	4622      	mov	r2, r4
 80080d2:	4629      	mov	r1, r5
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ff6d 	bl	8007fb4 <__ssputs_r>
 80080da:	3001      	adds	r0, #1
 80080dc:	f000 80aa 	beq.w	8008234 <_svfiprintf_r+0x1c8>
 80080e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e2:	445a      	add	r2, fp
 80080e4:	9209      	str	r2, [sp, #36]	; 0x24
 80080e6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 80a2 	beq.w	8008234 <_svfiprintf_r+0x1c8>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f04f 32ff 	mov.w	r2, #4294967295
 80080f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fa:	f10a 0a01 	add.w	sl, sl, #1
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008106:	931a      	str	r3, [sp, #104]	; 0x68
 8008108:	4654      	mov	r4, sl
 800810a:	2205      	movs	r2, #5
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	4851      	ldr	r0, [pc, #324]	; (8008258 <_svfiprintf_r+0x1ec>)
 8008112:	f7f8 f85d 	bl	80001d0 <memchr>
 8008116:	9a04      	ldr	r2, [sp, #16]
 8008118:	b9d8      	cbnz	r0, 8008152 <_svfiprintf_r+0xe6>
 800811a:	06d0      	lsls	r0, r2, #27
 800811c:	bf44      	itt	mi
 800811e:	2320      	movmi	r3, #32
 8008120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008124:	0711      	lsls	r1, r2, #28
 8008126:	bf44      	itt	mi
 8008128:	232b      	movmi	r3, #43	; 0x2b
 800812a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800812e:	f89a 3000 	ldrb.w	r3, [sl]
 8008132:	2b2a      	cmp	r3, #42	; 0x2a
 8008134:	d015      	beq.n	8008162 <_svfiprintf_r+0xf6>
 8008136:	9a07      	ldr	r2, [sp, #28]
 8008138:	4654      	mov	r4, sl
 800813a:	2000      	movs	r0, #0
 800813c:	f04f 0c0a 	mov.w	ip, #10
 8008140:	4621      	mov	r1, r4
 8008142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008146:	3b30      	subs	r3, #48	; 0x30
 8008148:	2b09      	cmp	r3, #9
 800814a:	d94e      	bls.n	80081ea <_svfiprintf_r+0x17e>
 800814c:	b1b0      	cbz	r0, 800817c <_svfiprintf_r+0x110>
 800814e:	9207      	str	r2, [sp, #28]
 8008150:	e014      	b.n	800817c <_svfiprintf_r+0x110>
 8008152:	eba0 0308 	sub.w	r3, r0, r8
 8008156:	fa09 f303 	lsl.w	r3, r9, r3
 800815a:	4313      	orrs	r3, r2
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	46a2      	mov	sl, r4
 8008160:	e7d2      	b.n	8008108 <_svfiprintf_r+0x9c>
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	1d19      	adds	r1, r3, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	9103      	str	r1, [sp, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfbb      	ittet	lt
 800816e:	425b      	neglt	r3, r3
 8008170:	f042 0202 	orrlt.w	r2, r2, #2
 8008174:	9307      	strge	r3, [sp, #28]
 8008176:	9307      	strlt	r3, [sp, #28]
 8008178:	bfb8      	it	lt
 800817a:	9204      	strlt	r2, [sp, #16]
 800817c:	7823      	ldrb	r3, [r4, #0]
 800817e:	2b2e      	cmp	r3, #46	; 0x2e
 8008180:	d10c      	bne.n	800819c <_svfiprintf_r+0x130>
 8008182:	7863      	ldrb	r3, [r4, #1]
 8008184:	2b2a      	cmp	r3, #42	; 0x2a
 8008186:	d135      	bne.n	80081f4 <_svfiprintf_r+0x188>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	9203      	str	r2, [sp, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfb8      	it	lt
 8008194:	f04f 33ff 	movlt.w	r3, #4294967295
 8008198:	3402      	adds	r4, #2
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008268 <_svfiprintf_r+0x1fc>
 80081a0:	7821      	ldrb	r1, [r4, #0]
 80081a2:	2203      	movs	r2, #3
 80081a4:	4650      	mov	r0, sl
 80081a6:	f7f8 f813 	bl	80001d0 <memchr>
 80081aa:	b140      	cbz	r0, 80081be <_svfiprintf_r+0x152>
 80081ac:	2340      	movs	r3, #64	; 0x40
 80081ae:	eba0 000a 	sub.w	r0, r0, sl
 80081b2:	fa03 f000 	lsl.w	r0, r3, r0
 80081b6:	9b04      	ldr	r3, [sp, #16]
 80081b8:	4303      	orrs	r3, r0
 80081ba:	3401      	adds	r4, #1
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c2:	4826      	ldr	r0, [pc, #152]	; (800825c <_svfiprintf_r+0x1f0>)
 80081c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081c8:	2206      	movs	r2, #6
 80081ca:	f7f8 f801 	bl	80001d0 <memchr>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d038      	beq.n	8008244 <_svfiprintf_r+0x1d8>
 80081d2:	4b23      	ldr	r3, [pc, #140]	; (8008260 <_svfiprintf_r+0x1f4>)
 80081d4:	bb1b      	cbnz	r3, 800821e <_svfiprintf_r+0x1b2>
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	3307      	adds	r3, #7
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	3308      	adds	r3, #8
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e4:	4433      	add	r3, r6
 80081e6:	9309      	str	r3, [sp, #36]	; 0x24
 80081e8:	e767      	b.n	80080ba <_svfiprintf_r+0x4e>
 80081ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ee:	460c      	mov	r4, r1
 80081f0:	2001      	movs	r0, #1
 80081f2:	e7a5      	b.n	8008140 <_svfiprintf_r+0xd4>
 80081f4:	2300      	movs	r3, #0
 80081f6:	3401      	adds	r4, #1
 80081f8:	9305      	str	r3, [sp, #20]
 80081fa:	4619      	mov	r1, r3
 80081fc:	f04f 0c0a 	mov.w	ip, #10
 8008200:	4620      	mov	r0, r4
 8008202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008206:	3a30      	subs	r2, #48	; 0x30
 8008208:	2a09      	cmp	r2, #9
 800820a:	d903      	bls.n	8008214 <_svfiprintf_r+0x1a8>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0c5      	beq.n	800819c <_svfiprintf_r+0x130>
 8008210:	9105      	str	r1, [sp, #20]
 8008212:	e7c3      	b.n	800819c <_svfiprintf_r+0x130>
 8008214:	fb0c 2101 	mla	r1, ip, r1, r2
 8008218:	4604      	mov	r4, r0
 800821a:	2301      	movs	r3, #1
 800821c:	e7f0      	b.n	8008200 <_svfiprintf_r+0x194>
 800821e:	ab03      	add	r3, sp, #12
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	462a      	mov	r2, r5
 8008224:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <_svfiprintf_r+0x1f8>)
 8008226:	a904      	add	r1, sp, #16
 8008228:	4638      	mov	r0, r7
 800822a:	f3af 8000 	nop.w
 800822e:	1c42      	adds	r2, r0, #1
 8008230:	4606      	mov	r6, r0
 8008232:	d1d6      	bne.n	80081e2 <_svfiprintf_r+0x176>
 8008234:	89ab      	ldrh	r3, [r5, #12]
 8008236:	065b      	lsls	r3, r3, #25
 8008238:	f53f af2c 	bmi.w	8008094 <_svfiprintf_r+0x28>
 800823c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800823e:	b01d      	add	sp, #116	; 0x74
 8008240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	ab03      	add	r3, sp, #12
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	462a      	mov	r2, r5
 800824a:	4b06      	ldr	r3, [pc, #24]	; (8008264 <_svfiprintf_r+0x1f8>)
 800824c:	a904      	add	r1, sp, #16
 800824e:	4638      	mov	r0, r7
 8008250:	f000 f87a 	bl	8008348 <_printf_i>
 8008254:	e7eb      	b.n	800822e <_svfiprintf_r+0x1c2>
 8008256:	bf00      	nop
 8008258:	080087a4 	.word	0x080087a4
 800825c:	080087ae 	.word	0x080087ae
 8008260:	00000000 	.word	0x00000000
 8008264:	08007fb5 	.word	0x08007fb5
 8008268:	080087aa 	.word	0x080087aa

0800826c <_printf_common>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	4616      	mov	r6, r2
 8008272:	4699      	mov	r9, r3
 8008274:	688a      	ldr	r2, [r1, #8]
 8008276:	690b      	ldr	r3, [r1, #16]
 8008278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800827c:	4293      	cmp	r3, r2
 800827e:	bfb8      	it	lt
 8008280:	4613      	movlt	r3, r2
 8008282:	6033      	str	r3, [r6, #0]
 8008284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008288:	4607      	mov	r7, r0
 800828a:	460c      	mov	r4, r1
 800828c:	b10a      	cbz	r2, 8008292 <_printf_common+0x26>
 800828e:	3301      	adds	r3, #1
 8008290:	6033      	str	r3, [r6, #0]
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	0699      	lsls	r1, r3, #26
 8008296:	bf42      	ittt	mi
 8008298:	6833      	ldrmi	r3, [r6, #0]
 800829a:	3302      	addmi	r3, #2
 800829c:	6033      	strmi	r3, [r6, #0]
 800829e:	6825      	ldr	r5, [r4, #0]
 80082a0:	f015 0506 	ands.w	r5, r5, #6
 80082a4:	d106      	bne.n	80082b4 <_printf_common+0x48>
 80082a6:	f104 0a19 	add.w	sl, r4, #25
 80082aa:	68e3      	ldr	r3, [r4, #12]
 80082ac:	6832      	ldr	r2, [r6, #0]
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	dc26      	bgt.n	8008302 <_printf_common+0x96>
 80082b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082b8:	1e13      	subs	r3, r2, #0
 80082ba:	6822      	ldr	r2, [r4, #0]
 80082bc:	bf18      	it	ne
 80082be:	2301      	movne	r3, #1
 80082c0:	0692      	lsls	r2, r2, #26
 80082c2:	d42b      	bmi.n	800831c <_printf_common+0xb0>
 80082c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082c8:	4649      	mov	r1, r9
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c0      	blx	r8
 80082ce:	3001      	adds	r0, #1
 80082d0:	d01e      	beq.n	8008310 <_printf_common+0xa4>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	68e5      	ldr	r5, [r4, #12]
 80082d6:	6832      	ldr	r2, [r6, #0]
 80082d8:	f003 0306 	and.w	r3, r3, #6
 80082dc:	2b04      	cmp	r3, #4
 80082de:	bf08      	it	eq
 80082e0:	1aad      	subeq	r5, r5, r2
 80082e2:	68a3      	ldr	r3, [r4, #8]
 80082e4:	6922      	ldr	r2, [r4, #16]
 80082e6:	bf0c      	ite	eq
 80082e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082ec:	2500      	movne	r5, #0
 80082ee:	4293      	cmp	r3, r2
 80082f0:	bfc4      	itt	gt
 80082f2:	1a9b      	subgt	r3, r3, r2
 80082f4:	18ed      	addgt	r5, r5, r3
 80082f6:	2600      	movs	r6, #0
 80082f8:	341a      	adds	r4, #26
 80082fa:	42b5      	cmp	r5, r6
 80082fc:	d11a      	bne.n	8008334 <_printf_common+0xc8>
 80082fe:	2000      	movs	r0, #0
 8008300:	e008      	b.n	8008314 <_printf_common+0xa8>
 8008302:	2301      	movs	r3, #1
 8008304:	4652      	mov	r2, sl
 8008306:	4649      	mov	r1, r9
 8008308:	4638      	mov	r0, r7
 800830a:	47c0      	blx	r8
 800830c:	3001      	adds	r0, #1
 800830e:	d103      	bne.n	8008318 <_printf_common+0xac>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008318:	3501      	adds	r5, #1
 800831a:	e7c6      	b.n	80082aa <_printf_common+0x3e>
 800831c:	18e1      	adds	r1, r4, r3
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	2030      	movs	r0, #48	; 0x30
 8008322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008326:	4422      	add	r2, r4
 8008328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800832c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008330:	3302      	adds	r3, #2
 8008332:	e7c7      	b.n	80082c4 <_printf_common+0x58>
 8008334:	2301      	movs	r3, #1
 8008336:	4622      	mov	r2, r4
 8008338:	4649      	mov	r1, r9
 800833a:	4638      	mov	r0, r7
 800833c:	47c0      	blx	r8
 800833e:	3001      	adds	r0, #1
 8008340:	d0e6      	beq.n	8008310 <_printf_common+0xa4>
 8008342:	3601      	adds	r6, #1
 8008344:	e7d9      	b.n	80082fa <_printf_common+0x8e>
	...

08008348 <_printf_i>:
 8008348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800834c:	7e0f      	ldrb	r7, [r1, #24]
 800834e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008350:	2f78      	cmp	r7, #120	; 0x78
 8008352:	4691      	mov	r9, r2
 8008354:	4680      	mov	r8, r0
 8008356:	460c      	mov	r4, r1
 8008358:	469a      	mov	sl, r3
 800835a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800835e:	d807      	bhi.n	8008370 <_printf_i+0x28>
 8008360:	2f62      	cmp	r7, #98	; 0x62
 8008362:	d80a      	bhi.n	800837a <_printf_i+0x32>
 8008364:	2f00      	cmp	r7, #0
 8008366:	f000 80d8 	beq.w	800851a <_printf_i+0x1d2>
 800836a:	2f58      	cmp	r7, #88	; 0x58
 800836c:	f000 80a3 	beq.w	80084b6 <_printf_i+0x16e>
 8008370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008378:	e03a      	b.n	80083f0 <_printf_i+0xa8>
 800837a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800837e:	2b15      	cmp	r3, #21
 8008380:	d8f6      	bhi.n	8008370 <_printf_i+0x28>
 8008382:	a101      	add	r1, pc, #4	; (adr r1, 8008388 <_printf_i+0x40>)
 8008384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008388:	080083e1 	.word	0x080083e1
 800838c:	080083f5 	.word	0x080083f5
 8008390:	08008371 	.word	0x08008371
 8008394:	08008371 	.word	0x08008371
 8008398:	08008371 	.word	0x08008371
 800839c:	08008371 	.word	0x08008371
 80083a0:	080083f5 	.word	0x080083f5
 80083a4:	08008371 	.word	0x08008371
 80083a8:	08008371 	.word	0x08008371
 80083ac:	08008371 	.word	0x08008371
 80083b0:	08008371 	.word	0x08008371
 80083b4:	08008501 	.word	0x08008501
 80083b8:	08008425 	.word	0x08008425
 80083bc:	080084e3 	.word	0x080084e3
 80083c0:	08008371 	.word	0x08008371
 80083c4:	08008371 	.word	0x08008371
 80083c8:	08008523 	.word	0x08008523
 80083cc:	08008371 	.word	0x08008371
 80083d0:	08008425 	.word	0x08008425
 80083d4:	08008371 	.word	0x08008371
 80083d8:	08008371 	.word	0x08008371
 80083dc:	080084eb 	.word	0x080084eb
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	1d1a      	adds	r2, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	602a      	str	r2, [r5, #0]
 80083e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083f0:	2301      	movs	r3, #1
 80083f2:	e0a3      	b.n	800853c <_printf_i+0x1f4>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	6829      	ldr	r1, [r5, #0]
 80083f8:	0606      	lsls	r6, r0, #24
 80083fa:	f101 0304 	add.w	r3, r1, #4
 80083fe:	d50a      	bpl.n	8008416 <_printf_i+0xce>
 8008400:	680e      	ldr	r6, [r1, #0]
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	2e00      	cmp	r6, #0
 8008406:	da03      	bge.n	8008410 <_printf_i+0xc8>
 8008408:	232d      	movs	r3, #45	; 0x2d
 800840a:	4276      	negs	r6, r6
 800840c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008410:	485e      	ldr	r0, [pc, #376]	; (800858c <_printf_i+0x244>)
 8008412:	230a      	movs	r3, #10
 8008414:	e019      	b.n	800844a <_printf_i+0x102>
 8008416:	680e      	ldr	r6, [r1, #0]
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800841e:	bf18      	it	ne
 8008420:	b236      	sxthne	r6, r6
 8008422:	e7ef      	b.n	8008404 <_printf_i+0xbc>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	1d19      	adds	r1, r3, #4
 800842a:	6029      	str	r1, [r5, #0]
 800842c:	0601      	lsls	r1, r0, #24
 800842e:	d501      	bpl.n	8008434 <_printf_i+0xec>
 8008430:	681e      	ldr	r6, [r3, #0]
 8008432:	e002      	b.n	800843a <_printf_i+0xf2>
 8008434:	0646      	lsls	r6, r0, #25
 8008436:	d5fb      	bpl.n	8008430 <_printf_i+0xe8>
 8008438:	881e      	ldrh	r6, [r3, #0]
 800843a:	4854      	ldr	r0, [pc, #336]	; (800858c <_printf_i+0x244>)
 800843c:	2f6f      	cmp	r7, #111	; 0x6f
 800843e:	bf0c      	ite	eq
 8008440:	2308      	moveq	r3, #8
 8008442:	230a      	movne	r3, #10
 8008444:	2100      	movs	r1, #0
 8008446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800844a:	6865      	ldr	r5, [r4, #4]
 800844c:	60a5      	str	r5, [r4, #8]
 800844e:	2d00      	cmp	r5, #0
 8008450:	bfa2      	ittt	ge
 8008452:	6821      	ldrge	r1, [r4, #0]
 8008454:	f021 0104 	bicge.w	r1, r1, #4
 8008458:	6021      	strge	r1, [r4, #0]
 800845a:	b90e      	cbnz	r6, 8008460 <_printf_i+0x118>
 800845c:	2d00      	cmp	r5, #0
 800845e:	d04d      	beq.n	80084fc <_printf_i+0x1b4>
 8008460:	4615      	mov	r5, r2
 8008462:	fbb6 f1f3 	udiv	r1, r6, r3
 8008466:	fb03 6711 	mls	r7, r3, r1, r6
 800846a:	5dc7      	ldrb	r7, [r0, r7]
 800846c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008470:	4637      	mov	r7, r6
 8008472:	42bb      	cmp	r3, r7
 8008474:	460e      	mov	r6, r1
 8008476:	d9f4      	bls.n	8008462 <_printf_i+0x11a>
 8008478:	2b08      	cmp	r3, #8
 800847a:	d10b      	bne.n	8008494 <_printf_i+0x14c>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	07de      	lsls	r6, r3, #31
 8008480:	d508      	bpl.n	8008494 <_printf_i+0x14c>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	6861      	ldr	r1, [r4, #4]
 8008486:	4299      	cmp	r1, r3
 8008488:	bfde      	ittt	le
 800848a:	2330      	movle	r3, #48	; 0x30
 800848c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008490:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008494:	1b52      	subs	r2, r2, r5
 8008496:	6122      	str	r2, [r4, #16]
 8008498:	f8cd a000 	str.w	sl, [sp]
 800849c:	464b      	mov	r3, r9
 800849e:	aa03      	add	r2, sp, #12
 80084a0:	4621      	mov	r1, r4
 80084a2:	4640      	mov	r0, r8
 80084a4:	f7ff fee2 	bl	800826c <_printf_common>
 80084a8:	3001      	adds	r0, #1
 80084aa:	d14c      	bne.n	8008546 <_printf_i+0x1fe>
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	b004      	add	sp, #16
 80084b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b6:	4835      	ldr	r0, [pc, #212]	; (800858c <_printf_i+0x244>)
 80084b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084bc:	6829      	ldr	r1, [r5, #0]
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80084c4:	6029      	str	r1, [r5, #0]
 80084c6:	061d      	lsls	r5, r3, #24
 80084c8:	d514      	bpl.n	80084f4 <_printf_i+0x1ac>
 80084ca:	07df      	lsls	r7, r3, #31
 80084cc:	bf44      	itt	mi
 80084ce:	f043 0320 	orrmi.w	r3, r3, #32
 80084d2:	6023      	strmi	r3, [r4, #0]
 80084d4:	b91e      	cbnz	r6, 80084de <_printf_i+0x196>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	f023 0320 	bic.w	r3, r3, #32
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	2310      	movs	r3, #16
 80084e0:	e7b0      	b.n	8008444 <_printf_i+0xfc>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	f043 0320 	orr.w	r3, r3, #32
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	2378      	movs	r3, #120	; 0x78
 80084ec:	4828      	ldr	r0, [pc, #160]	; (8008590 <_printf_i+0x248>)
 80084ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084f2:	e7e3      	b.n	80084bc <_printf_i+0x174>
 80084f4:	0659      	lsls	r1, r3, #25
 80084f6:	bf48      	it	mi
 80084f8:	b2b6      	uxthmi	r6, r6
 80084fa:	e7e6      	b.n	80084ca <_printf_i+0x182>
 80084fc:	4615      	mov	r5, r2
 80084fe:	e7bb      	b.n	8008478 <_printf_i+0x130>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	6826      	ldr	r6, [r4, #0]
 8008504:	6961      	ldr	r1, [r4, #20]
 8008506:	1d18      	adds	r0, r3, #4
 8008508:	6028      	str	r0, [r5, #0]
 800850a:	0635      	lsls	r5, r6, #24
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	d501      	bpl.n	8008514 <_printf_i+0x1cc>
 8008510:	6019      	str	r1, [r3, #0]
 8008512:	e002      	b.n	800851a <_printf_i+0x1d2>
 8008514:	0670      	lsls	r0, r6, #25
 8008516:	d5fb      	bpl.n	8008510 <_printf_i+0x1c8>
 8008518:	8019      	strh	r1, [r3, #0]
 800851a:	2300      	movs	r3, #0
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	4615      	mov	r5, r2
 8008520:	e7ba      	b.n	8008498 <_printf_i+0x150>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	1d1a      	adds	r2, r3, #4
 8008526:	602a      	str	r2, [r5, #0]
 8008528:	681d      	ldr	r5, [r3, #0]
 800852a:	6862      	ldr	r2, [r4, #4]
 800852c:	2100      	movs	r1, #0
 800852e:	4628      	mov	r0, r5
 8008530:	f7f7 fe4e 	bl	80001d0 <memchr>
 8008534:	b108      	cbz	r0, 800853a <_printf_i+0x1f2>
 8008536:	1b40      	subs	r0, r0, r5
 8008538:	6060      	str	r0, [r4, #4]
 800853a:	6863      	ldr	r3, [r4, #4]
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	2300      	movs	r3, #0
 8008540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008544:	e7a8      	b.n	8008498 <_printf_i+0x150>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	462a      	mov	r2, r5
 800854a:	4649      	mov	r1, r9
 800854c:	4640      	mov	r0, r8
 800854e:	47d0      	blx	sl
 8008550:	3001      	adds	r0, #1
 8008552:	d0ab      	beq.n	80084ac <_printf_i+0x164>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	079b      	lsls	r3, r3, #30
 8008558:	d413      	bmi.n	8008582 <_printf_i+0x23a>
 800855a:	68e0      	ldr	r0, [r4, #12]
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	4298      	cmp	r0, r3
 8008560:	bfb8      	it	lt
 8008562:	4618      	movlt	r0, r3
 8008564:	e7a4      	b.n	80084b0 <_printf_i+0x168>
 8008566:	2301      	movs	r3, #1
 8008568:	4632      	mov	r2, r6
 800856a:	4649      	mov	r1, r9
 800856c:	4640      	mov	r0, r8
 800856e:	47d0      	blx	sl
 8008570:	3001      	adds	r0, #1
 8008572:	d09b      	beq.n	80084ac <_printf_i+0x164>
 8008574:	3501      	adds	r5, #1
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	9903      	ldr	r1, [sp, #12]
 800857a:	1a5b      	subs	r3, r3, r1
 800857c:	42ab      	cmp	r3, r5
 800857e:	dcf2      	bgt.n	8008566 <_printf_i+0x21e>
 8008580:	e7eb      	b.n	800855a <_printf_i+0x212>
 8008582:	2500      	movs	r5, #0
 8008584:	f104 0619 	add.w	r6, r4, #25
 8008588:	e7f5      	b.n	8008576 <_printf_i+0x22e>
 800858a:	bf00      	nop
 800858c:	080087b5 	.word	0x080087b5
 8008590:	080087c6 	.word	0x080087c6

08008594 <memmove>:
 8008594:	4288      	cmp	r0, r1
 8008596:	b510      	push	{r4, lr}
 8008598:	eb01 0402 	add.w	r4, r1, r2
 800859c:	d902      	bls.n	80085a4 <memmove+0x10>
 800859e:	4284      	cmp	r4, r0
 80085a0:	4623      	mov	r3, r4
 80085a2:	d807      	bhi.n	80085b4 <memmove+0x20>
 80085a4:	1e43      	subs	r3, r0, #1
 80085a6:	42a1      	cmp	r1, r4
 80085a8:	d008      	beq.n	80085bc <memmove+0x28>
 80085aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085b2:	e7f8      	b.n	80085a6 <memmove+0x12>
 80085b4:	4402      	add	r2, r0
 80085b6:	4601      	mov	r1, r0
 80085b8:	428a      	cmp	r2, r1
 80085ba:	d100      	bne.n	80085be <memmove+0x2a>
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085c6:	e7f7      	b.n	80085b8 <memmove+0x24>

080085c8 <_realloc_r>:
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	4680      	mov	r8, r0
 80085ce:	4614      	mov	r4, r2
 80085d0:	460e      	mov	r6, r1
 80085d2:	b921      	cbnz	r1, 80085de <_realloc_r+0x16>
 80085d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085d8:	4611      	mov	r1, r2
 80085da:	f7ff bb71 	b.w	8007cc0 <_malloc_r>
 80085de:	b92a      	cbnz	r2, 80085ec <_realloc_r+0x24>
 80085e0:	f7ff fc9c 	bl	8007f1c <_free_r>
 80085e4:	4625      	mov	r5, r4
 80085e6:	4628      	mov	r0, r5
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	f000 f81b 	bl	8008626 <_malloc_usable_size_r>
 80085f0:	4284      	cmp	r4, r0
 80085f2:	4607      	mov	r7, r0
 80085f4:	d802      	bhi.n	80085fc <_realloc_r+0x34>
 80085f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085fa:	d812      	bhi.n	8008622 <_realloc_r+0x5a>
 80085fc:	4621      	mov	r1, r4
 80085fe:	4640      	mov	r0, r8
 8008600:	f7ff fb5e 	bl	8007cc0 <_malloc_r>
 8008604:	4605      	mov	r5, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	d0ed      	beq.n	80085e6 <_realloc_r+0x1e>
 800860a:	42bc      	cmp	r4, r7
 800860c:	4622      	mov	r2, r4
 800860e:	4631      	mov	r1, r6
 8008610:	bf28      	it	cs
 8008612:	463a      	movcs	r2, r7
 8008614:	f7ff fb1e 	bl	8007c54 <memcpy>
 8008618:	4631      	mov	r1, r6
 800861a:	4640      	mov	r0, r8
 800861c:	f7ff fc7e 	bl	8007f1c <_free_r>
 8008620:	e7e1      	b.n	80085e6 <_realloc_r+0x1e>
 8008622:	4635      	mov	r5, r6
 8008624:	e7df      	b.n	80085e6 <_realloc_r+0x1e>

08008626 <_malloc_usable_size_r>:
 8008626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862a:	1f18      	subs	r0, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfbc      	itt	lt
 8008630:	580b      	ldrlt	r3, [r1, r0]
 8008632:	18c0      	addlt	r0, r0, r3
 8008634:	4770      	bx	lr
	...

08008638 <trunc>:
 8008638:	ec51 0b10 	vmov	r0, r1, d0
 800863c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008640:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008644:	2b13      	cmp	r3, #19
 8008646:	b5d0      	push	{r4, r6, r7, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	dc10      	bgt.n	800866e <trunc+0x36>
 800864c:	2b00      	cmp	r3, #0
 800864e:	bfa5      	ittet	ge
 8008650:	4a11      	ldrge	r2, [pc, #68]	; (8008698 <trunc+0x60>)
 8008652:	fa42 f303 	asrge.w	r3, r2, r3
 8008656:	2100      	movlt	r1, #0
 8008658:	2100      	movge	r1, #0
 800865a:	bfb9      	ittee	lt
 800865c:	2000      	movlt	r0, #0
 800865e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8008662:	2000      	movge	r0, #0
 8008664:	ea24 0103 	bicge.w	r1, r4, r3
 8008668:	ec41 0b10 	vmov	d0, r0, r1
 800866c:	bdd0      	pop	{r4, r6, r7, pc}
 800866e:	2b33      	cmp	r3, #51	; 0x33
 8008670:	dd08      	ble.n	8008684 <trunc+0x4c>
 8008672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008676:	d1f7      	bne.n	8008668 <trunc+0x30>
 8008678:	ee10 2a10 	vmov	r2, s0
 800867c:	460b      	mov	r3, r1
 800867e:	f7f7 fdfd 	bl	800027c <__adddf3>
 8008682:	e7f1      	b.n	8008668 <trunc+0x30>
 8008684:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008688:	f04f 33ff 	mov.w	r3, #4294967295
 800868c:	fa23 f202 	lsr.w	r2, r3, r2
 8008690:	ea20 0602 	bic.w	r6, r0, r2
 8008694:	4630      	mov	r0, r6
 8008696:	e7e7      	b.n	8008668 <trunc+0x30>
 8008698:	000fffff 	.word	0x000fffff

0800869c <_init>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr

080086a8 <_fini>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr
