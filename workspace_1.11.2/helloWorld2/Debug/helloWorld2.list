
helloWorld2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007340  08007340  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007348  08007348  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007348  08007348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b4  20000074  080073c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001828  080073c4  00021828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002520c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459a  00000000  00000000  000452b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00049850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb0  00000000  00000000  0004b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bced  00000000  00000000  0004d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024705  00000000  00000000  00079465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108542  00000000  00000000  0009db6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a60ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091d8  00000000  00000000  001a60fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007234 	.word	0x08007234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007234 	.word	0x08007234

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <__io_putchar>:
# else
# define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *fp)
# endif

PUTCHAR_PROTOTYPE
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <__io_putchar+0x20>)
 800051a:	f003 fec3 	bl	80042a4 <HAL_UART_Transmit>
	return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000478 	.word	0x20000478

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f001 f818 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f829 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f9f3 	bl	8000924 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800053e:	f000 f887 	bl	8000650 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000542:	f000 f8bd 	bl	80006c0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000546:	f000 f8fb 	bl	8000740 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800054a:	f000 f91f 	bl	800078c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800054e:	f000 f95b 	bl	8000808 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000552:	f000 f989 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000556:	f000 f9b7 	bl	80008c8 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HelloWorldTask */
  osThreadDef(HelloWorldTask, StartHelloWorld, osPriorityNormal, 0, 128);
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <main+0x58>)
 800055c:	1d3c      	adds	r4, r7, #4
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HelloWorldTaskHandle = osThreadCreate(osThread(HelloWorldTask), NULL);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f004 fe66 	bl	8005242 <osThreadCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <main+0x5c>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 fe5a 	bl	8005234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x54>
 8000582:	bf00      	nop
 8000584:	0800725c 	.word	0x0800725c
 8000588:	20000a8c 	.word	0x20000a8c

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b096      	sub	sp, #88	; 0x58
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2244      	movs	r2, #68	; 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 f9d1 	bl	8006942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b2:	f001 fe95 	bl	80022e0 <HAL_PWREx_ControlVoltageScaling>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005bc:	f000 fb84 	bl	8000cc8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c0:	f001 fe70 	bl	80022a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <SystemClock_Config+0xc0>)
 80005c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ca:	4a20      	ldr	r2, [pc, #128]	; (800064c <SystemClock_Config+0xc0>)
 80005cc:	f023 0318 	bic.w	r3, r3, #24
 80005d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d4:	2314      	movs	r3, #20
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e4:	2360      	movs	r3, #96	; 0x60
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ec:	2301      	movs	r3, #1
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005f4:	2328      	movs	r3, #40	; 0x28
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ff8b 	bl	8002524 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000614:	f000 fb58 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2303      	movs	r3, #3
 800061e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	2104      	movs	r1, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fb53 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800063c:	f000 fb44 	bl	8000cc8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000640:	f003 f88c 	bl	800375c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000644:	bf00      	nop
 8000646:	3758      	adds	r7, #88	; 0x58
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000656:	4a19      	ldr	r2, [pc, #100]	; (80006bc <MX_DFSDM1_Init+0x6c>)
 8000658:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 800065c:	2201      	movs	r2, #1
 800065e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000668:	2202      	movs	r2, #2
 800066a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 800067a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000688:	2204      	movs	r2, #4
 800068a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 8000694:	2201      	movs	r2, #1
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_DFSDM1_Init+0x68>)
 80006a6:	f001 f89d 	bl	80017e4 <HAL_DFSDM_ChannelInit>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006b0:	f000 fb0a 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000344 	.word	0x20000344
 80006bc:	40016020 	.word	0x40016020

080006c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_I2C2_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_I2C2_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_I2C2_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_I2C2_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_I2C2_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_I2C2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_I2C2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_I2C2_Init+0x74>)
 80006fc:	f001 fb63 	bl	8001dc6 <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 fadf 	bl	8000cc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_I2C2_Init+0x74>)
 800070e:	f001 fbe9 	bl	8001ee4 <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 fad6 	bl	8000cc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_I2C2_Init+0x74>)
 8000720:	f001 fc2b 	bl	8001f7a <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 facd 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000037c 	.word	0x2000037c
 8000738:	40005800 	.word	0x40005800
 800073c:	10909cec 	.word	0x10909cec

08000740 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_QUADSPI_Init+0x44>)
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_QUADSPI_Init+0x48>)
 8000748:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_QUADSPI_Init+0x44>)
 800074c:	2202      	movs	r2, #2
 800074e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_QUADSPI_Init+0x44>)
 8000752:	2204      	movs	r2, #4
 8000754:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_QUADSPI_Init+0x44>)
 8000758:	2210      	movs	r2, #16
 800075a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_QUADSPI_Init+0x44>)
 800075e:	2217      	movs	r2, #23
 8000760:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_QUADSPI_Init+0x44>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_QUADSPI_Init+0x44>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_QUADSPI_Init+0x44>)
 8000770:	f001 fe1c 	bl	80023ac <HAL_QSPI_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800077a:	f000 faa5 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200003d0 	.word	0x200003d0
 8000788:	a0001000 	.word	0xa0001000

0800078c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_SPI3_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_SPI3_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_SPI3_Init+0x74>)
 8000798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI3_Init+0x74>)
 80007a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_SPI3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI3_Init+0x74>)
 80007ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI3_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_SPI3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI3_Init+0x74>)
 80007da:	2207      	movs	r2, #7
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_SPI3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI3_Init+0x74>)
 80007e6:	2208      	movs	r2, #8
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_SPI3_Init+0x74>)
 80007ec:	f003 f998 	bl	8003b20 <HAL_SPI_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 fa67 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000414 	.word	0x20000414
 8000804:	40003c00 	.word	0x40003c00

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART1_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_USART1_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART1_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USART1_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART1_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART1_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART1_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART1_UART_Init+0x58>)
 800084c:	f003 fcdc 	bl	8004208 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 fa37 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000478 	.word	0x20000478
 8000864:	40013800 	.word	0x40013800

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART3_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008ac:	f003 fcac 	bl	8004208 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 fa07 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200004fc 	.word	0x200004fc
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2206      	movs	r2, #6
 80008d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2202      	movs	r2, #2
 80008de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	f001 fb81 	bl	8002012 <HAL_PCD_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f9d7 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000580 	.word	0x20000580

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	4bbd      	ldr	r3, [pc, #756]	; (8000c30 <MX_GPIO_Init+0x30c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4abc      	ldr	r2, [pc, #752]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4bba      	ldr	r3, [pc, #744]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4bb7      	ldr	r3, [pc, #732]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4ab6      	ldr	r2, [pc, #728]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4bb4      	ldr	r3, [pc, #720]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4bb1      	ldr	r3, [pc, #708]	; (8000c30 <MX_GPIO_Init+0x30c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4ab0      	ldr	r2, [pc, #704]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4bae      	ldr	r3, [pc, #696]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4bab      	ldr	r3, [pc, #684]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4aaa      	ldr	r2, [pc, #680]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4ba8      	ldr	r3, [pc, #672]	; (8000c30 <MX_GPIO_Init+0x30c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4ba5      	ldr	r3, [pc, #660]	; (8000c30 <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4aa4      	ldr	r2, [pc, #656]	; (8000c30 <MX_GPIO_Init+0x30c>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4ba2      	ldr	r3, [pc, #648]	; (8000c30 <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009b8:	489e      	ldr	r0, [pc, #632]	; (8000c34 <MX_GPIO_Init+0x310>)
 80009ba:	f001 f9c9 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f248 1104 	movw	r1, #33028	; 0x8104
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 f9c2 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009cc:	2200      	movs	r2, #0
 80009ce:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009d2:	4899      	ldr	r0, [pc, #612]	; (8000c38 <MX_GPIO_Init+0x314>)
 80009d4:	f001 f9bc 	bl	8001d50 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f241 0181 	movw	r1, #4225	; 0x1081
 80009de:	4897      	ldr	r0, [pc, #604]	; (8000c3c <MX_GPIO_Init+0x318>)
 80009e0:	f001 f9b6 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	4894      	ldr	r0, [pc, #592]	; (8000c3c <MX_GPIO_Init+0x318>)
 80009ec:	f001 f9b0 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009f6:	4892      	ldr	r0, [pc, #584]	; (8000c40 <MX_GPIO_Init+0x31c>)
 80009f8:	f001 f9aa 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2120      	movs	r1, #32
 8000a00:	488d      	ldr	r0, [pc, #564]	; (8000c38 <MX_GPIO_Init+0x314>)
 8000a02:	f001 f9a5 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2101      	movs	r1, #1
 8000a0a:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x310>)
 8000a0c:	f001 f9a0 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a10:	f240 1315 	movw	r3, #277	; 0x115
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4882      	ldr	r0, [pc, #520]	; (8000c34 <MX_GPIO_Init+0x310>)
 8000a2a:	f000 ffe7 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a2e:	236a      	movs	r3, #106	; 0x6a
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	487c      	ldr	r0, [pc, #496]	; (8000c34 <MX_GPIO_Init+0x310>)
 8000a44:	f000 ffda 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4878      	ldr	r0, [pc, #480]	; (8000c40 <MX_GPIO_Init+0x31c>)
 8000a60:	f000 ffcc 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a64:	233f      	movs	r3, #63	; 0x3f
 8000a66:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4872      	ldr	r0, [pc, #456]	; (8000c40 <MX_GPIO_Init+0x31c>)
 8000a78:	f000 ffc0 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f000 ffaf 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a9e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 ff9f 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f000 ff8e 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f000 ff81 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000afa:	23e0      	movs	r3, #224	; 0xe0
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 ff70 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4841      	ldr	r0, [pc, #260]	; (8000c38 <MX_GPIO_Init+0x314>)
 8000b32:	f000 ff63 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b36:	2302      	movs	r3, #2
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b3a:	230b      	movs	r3, #11
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	483b      	ldr	r0, [pc, #236]	; (8000c38 <MX_GPIO_Init+0x314>)
 8000b4a:	f000 ff57 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b4e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b52:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4834      	ldr	r0, [pc, #208]	; (8000c38 <MX_GPIO_Init+0x314>)
 8000b68:	f000 ff48 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b6c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b70:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	482e      	ldr	r0, [pc, #184]	; (8000c3c <MX_GPIO_Init+0x318>)
 8000b84:	f000 ff3a 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b88:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <MX_GPIO_Init+0x318>)
 8000ba2:	f000 ff2b 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ba6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4820      	ldr	r0, [pc, #128]	; (8000c40 <MX_GPIO_Init+0x31c>)
 8000bc0:	f000 ff1c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4819      	ldr	r0, [pc, #100]	; (8000c40 <MX_GPIO_Init+0x31c>)
 8000bdc:	f000 ff0e 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000be0:	2302      	movs	r3, #2
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <MX_GPIO_Init+0x318>)
 8000bfc:	f000 fefe 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c00:	2378      	movs	r3, #120	; 0x78
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c10:	2307      	movs	r3, #7
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_GPIO_Init+0x318>)
 8000c1c:	f000 feee 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <MX_GPIO_Init+0x320>
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48001000 	.word	0x48001000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000c00 	.word	0x48000c00
 8000c40:	48000800 	.word	0x48000800
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <MX_GPIO_Init+0x360>)
 8000c56:	f000 fed1 	bl	80019fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2017      	movs	r0, #23
 8000c60:	f000 fd96 	bl	8001790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c64:	2017      	movs	r0, #23
 8000c66:	f000 fdaf 	bl	80017c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	2028      	movs	r0, #40	; 0x28
 8000c70:	f000 fd8e 	bl	8001790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c74:	2028      	movs	r0, #40	; 0x28
 8000c76:	f000 fda7 	bl	80017c8 <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	48000400 	.word	0x48000400

08000c88 <StartHelloWorld>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHelloWorld */
void StartHelloWorld(void const * argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c94:	f004 fb21 	bl	80052da <osDelay>
    printf("Hello World (2)\r\n");
 8000c98:	4801      	ldr	r0, [pc, #4]	; (8000ca0 <StartHelloWorld+0x18>)
 8000c9a:	f005 ff5d 	bl	8006b58 <puts>
    osDelay(1000);
 8000c9e:	e7f7      	b.n	8000c90 <StartHelloWorld+0x8>
 8000ca0:	08007278 	.word	0x08007278

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb6:	f000 fc6f 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40012c00 	.word	0x40012c00

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_MspInit+0x4c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_MspInit+0x4c>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_MspInit+0x4c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	f06f 0001 	mvn.w	r0, #1
 8000d12:	f000 fd3d 	bl	8001790 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0ac      	sub	sp, #176	; 0xb0
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2288      	movs	r2, #136	; 0x88
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fdfc 	bl	8006942 <memset>
  if(DFSDM1_Init == 0)
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d142      	bne.n	8000dd8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fa10 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d6e:	f7ff ffab 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000da2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dca:	f000 fe17 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a02      	ldr	r2, [pc, #8]	; (8000de0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dd6:	6013      	str	r3, [r2, #0]
  }

}
 8000dd8:	bf00      	nop
 8000dda:	37b0      	adds	r7, #176	; 0xb0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000a90 	.word	0x20000a90
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48001000 	.word	0x48001000

08000dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ac      	sub	sp, #176	; 0xb0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2288      	movs	r2, #136	; 0x88
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 fd98 	bl	8006942 <memset>
  if(hi2c->Instance==I2C2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <HAL_I2C_MspInit+0xb0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13b      	bne.n	8000e94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 f9ad 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e34:	f7ff ff48 	bl	8000cc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_I2C_MspInit+0xb4>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <HAL_I2C_MspInit+0xb4>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_I2C_MspInit+0xb4>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e74:	4619      	mov	r1, r3
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <HAL_I2C_MspInit+0xb8>)
 8000e78:	f000 fdc0 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0xb4>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_I2C_MspInit+0xb4>)
 8000e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e86:	6593      	str	r3, [r2, #88]	; 0x58
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_I2C_MspInit+0xb4>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	37b0      	adds	r7, #176	; 0xb0
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40005800 	.word	0x40005800
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_QSPI_MspInit+0x7c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d128      	bne.n	8000f1c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_QSPI_MspInit+0x80>)
 8000ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <HAL_QSPI_MspInit+0x80>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6513      	str	r3, [r2, #80]	; 0x50
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_QSPI_MspInit+0x80>)
 8000ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_QSPI_MspInit+0x80>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_QSPI_MspInit+0x80>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000efa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000efe:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_QSPI_MspInit+0x84>)
 8000f18:	f000 fd70 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	a0001000 	.word	0xa0001000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48001000 	.word	0x48001000

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_SPI_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d128      	bne.n	8000fa4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_SPI_MspInit+0x80>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_SPI_MspInit+0x80>)
 8000f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_SPI_MspInit+0x80>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_SPI_MspInit+0x80>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_SPI_MspInit+0x80>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_SPI_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f82:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f94:	2306      	movs	r3, #6
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_SPI_MspInit+0x84>)
 8000fa0:	f000 fd2c 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40003c00 	.word	0x40003c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ae      	sub	sp, #184	; 0xb8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2288      	movs	r2, #136	; 0x88
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fcb2 	bl	8006942 <memset>
  if(huart->Instance==USART1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a42      	ldr	r2, [pc, #264]	; (80010ec <HAL_UART_MspInit+0x134>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13b      	bne.n	8001060 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fec:	2300      	movs	r3, #0
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f8c7 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001000:	f7ff fe62 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_UART_MspInit+0x138>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	4a39      	ldr	r2, [pc, #228]	; (80010f0 <HAL_UART_MspInit+0x138>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	6613      	str	r3, [r2, #96]	; 0x60
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_UART_MspInit+0x138>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_UART_MspInit+0x138>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <HAL_UART_MspInit+0x138>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_UART_MspInit+0x138>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001034:	23c0      	movs	r3, #192	; 0xc0
 8001036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800104c:	2307      	movs	r3, #7
 800104e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001056:	4619      	mov	r1, r3
 8001058:	4826      	ldr	r0, [pc, #152]	; (80010f4 <HAL_UART_MspInit+0x13c>)
 800105a:	f000 fccf 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105e:	e040      	b.n	80010e2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <HAL_UART_MspInit+0x140>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d13b      	bne.n	80010e2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800106a:	2304      	movs	r3, #4
 800106c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800106e:	2300      	movs	r3, #0
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f886 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001082:	f7ff fe21 	bl	8000cc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_UART_MspInit+0x138>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x138>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_UART_MspInit+0x138>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x138>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <HAL_UART_MspInit+0x138>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0x138>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d0:	2307      	movs	r3, #7
 80010d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_UART_MspInit+0x144>)
 80010de:	f000 fc8d 	bl	80019fc <HAL_GPIO_Init>
}
 80010e2:	bf00      	nop
 80010e4:	37b8      	adds	r7, #184	; 0xb8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	40004800 	.word	0x40004800
 80010fc:	48000c00 	.word	0x48000c00

08001100 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ac      	sub	sp, #176	; 0xb0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2288      	movs	r2, #136	; 0x88
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f005 fc0e 	bl	8006942 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800112e:	d17c      	bne.n	800122a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001136:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800113a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001146:	2318      	movs	r3, #24
 8001148:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800114a:	2307      	movs	r3, #7
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001156:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f002 f811 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800116c:	f7ff fdac 	bl	8000cc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_PCD_MspInit+0x134>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <HAL_PCD_MspInit+0x134>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_PCD_MspInit+0x134>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fc29 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011c4:	230a      	movs	r3, #10
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f000 fc12 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_PCD_MspInit+0x134>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a15      	ldr	r2, [pc, #84]	; (8001234 <HAL_PCD_MspInit+0x134>)
 80011de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_PCD_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_PCD_MspInit+0x134>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d114      	bne.n	8001226 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_PCD_MspInit+0x134>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_PCD_MspInit+0x134>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6593      	str	r3, [r2, #88]	; 0x58
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_PCD_MspInit+0x134>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001214:	f001 f8ba 	bl	800238c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_PCD_MspInit+0x134>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_PCD_MspInit+0x134>)
 800121e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001222:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001224:	e001      	b.n	800122a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001226:	f001 f8b1 	bl	800238c <HAL_PWREx_EnableVddUSB>
}
 800122a:	bf00      	nop
 800122c:	37b0      	adds	r7, #176	; 0xb0
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <HAL_InitTick+0xc8>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <HAL_InitTick+0xc8>)
 800124c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_InitTick+0xc8>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fefb 	bl	8003064 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800126e:	f001 fee3 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8001272:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <HAL_InitTick+0xcc>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	3b01      	subs	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_InitTick+0xd0>)
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_InitTick+0xd4>)
 8001286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_InitTick+0xd0>)
 800128a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_InitTick+0xd0>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_InitTick+0xd0>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_InitTick+0xd0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_InitTick+0xd0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <HAL_InitTick+0xd0>)
 80012aa:	f002 fcdc 	bl	8003c66 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d11b      	bne.n	80012f4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <HAL_InitTick+0xd0>)
 80012be:	f002 fd33 	bl	8003d28 <HAL_TIM_Base_Start_IT>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012d0:	2019      	movs	r0, #25
 80012d2:	f000 fa79 	bl	80017c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d808      	bhi.n	80012ee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	2019      	movs	r0, #25
 80012e2:	f000 fa55 	bl	8001790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_InitTick+0xd8>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e002      	b.n	80012f4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	431bde83 	.word	0x431bde83
 8001308:	20000a94 	.word	0x20000a94
 800130c:	40012c00 	.word	0x40012c00
 8001310:	20000004 	.word	0x20000004

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001344:	2020      	movs	r0, #32
 8001346:	f000 fd1b 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800134a:	2040      	movs	r0, #64	; 0x40
 800134c:	f000 fd18 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001350:	2080      	movs	r0, #128	; 0x80
 8001352:	f000 fd15 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001356:	f44f 7080 	mov.w	r0, #256	; 0x100
 800135a:	f000 fd11 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800136a:	f002 fd4d 	bl	8003e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000a94 	.word	0x20000a94

08001378 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800137c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001380:	f000 fcfe 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001384:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001388:	f000 fcfa 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800138c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001390:	f000 fcf6 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001394:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001398:	f000 fcf2 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800139c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013a0:	f000 fcee 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
  }

  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f883 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
  }
  return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f005 f922 	bl	80066fc <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20018000 	.word	0x20018000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000ae0 	.word	0x20000ae0
 80014ec:	20001828 	.word	0x20001828

080014f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800154c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001518:	f7ff ffea 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001542:	f005 f9d7 	bl	80068f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001546:	f7fe fff1 	bl	800052c <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800154c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001558:	08007350 	.word	0x08007350
  ldr r2, =_sbss
 800155c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001560:	20001828 	.word	0x20001828

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>

08001566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f902 	bl	800177a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	200f      	movs	r0, #15
 8001578:	f7ff fe5e 	bl	8001238 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e001      	b.n	800158c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001588:	f7ff fba4 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000ae4 	.word	0x20000ae4

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000ae4 	.word	0x20000ae4

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ff4c 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a2:	f7ff ff61 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	6978      	ldr	r0, [r7, #20]
 80017ae:	f7ff ffb1 	bl	8001714 <NVIC_EncodePriority>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff80 	bl	80016c0 <__NVIC_SetPriority>
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff54 	bl	8001684 <__NVIC_EnableIRQ>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0ac      	b.n	8001950 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f8b2 	bl	8001964 <DFSDM_GetChannelFromInstance>
 8001800:	4603      	mov	r3, r0
 8001802:	4a55      	ldr	r2, [pc, #340]	; (8001958 <HAL_DFSDM_ChannelInit+0x174>)
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e09f      	b.n	8001950 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fa87 	bl	8000d24 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_DFSDM_ChannelInit+0x178>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a4f      	ldr	r2, [pc, #316]	; (800195c <HAL_DFSDM_ChannelInit+0x178>)
 800181e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001820:	4b4e      	ldr	r3, [pc, #312]	; (800195c <HAL_DFSDM_ChannelInit+0x178>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d125      	bne.n	8001874 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 800182e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001832:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4948      	ldr	r1, [pc, #288]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a46      	ldr	r2, [pc, #280]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 8001848:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800184c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	3b01      	subs	r3, #1
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	493f      	ldr	r1, [pc, #252]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <HAL_DFSDM_ChannelInit+0x17c>)
 800186e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001872:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001882:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001892:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001898:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 020f 	bic.w	r2, r2, #15
 80018b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f002 0207 	and.w	r2, r2, #7
 8001904:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001930:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f810 	bl	8001964 <DFSDM_GetChannelFromInstance>
 8001944:	4602      	mov	r2, r0
 8001946:	4904      	ldr	r1, [pc, #16]	; (8001958 <HAL_DFSDM_ChannelInit+0x174>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000aec 	.word	0x20000aec
 800195c:	20000ae8 	.word	0x20000ae8
 8001960:	40016000 	.word	0x40016000

08001964 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d102      	bne.n	800197a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e02b      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <DFSDM_GetChannelFromInstance+0x80>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d102      	bne.n	8001988 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e024      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <DFSDM_GetChannelFromInstance+0x84>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d102      	bne.n	8001996 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001990:	2302      	movs	r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e01d      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <DFSDM_GetChannelFromInstance+0x88>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d102      	bne.n	80019a4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800199e:	2304      	movs	r3, #4
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e016      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <DFSDM_GetChannelFromInstance+0x8c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d102      	bne.n	80019b2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80019ac:	2305      	movs	r3, #5
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e00f      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <DFSDM_GetChannelFromInstance+0x90>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d102      	bne.n	80019c0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80019ba:	2306      	movs	r3, #6
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e008      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <DFSDM_GetChannelFromInstance+0x94>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d102      	bne.n	80019ce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019c8:	2307      	movs	r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e001      	b.n	80019d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019ce:	2303      	movs	r3, #3
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40016000 	.word	0x40016000
 80019e4:	40016020 	.word	0x40016020
 80019e8:	40016040 	.word	0x40016040
 80019ec:	40016080 	.word	0x40016080
 80019f0:	400160a0 	.word	0x400160a0
 80019f4:	400160c0 	.word	0x400160c0
 80019f8:	400160e0 	.word	0x400160e0

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e17f      	b.n	8001d0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8171 	beq.w	8001d06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d005      	beq.n	8001a3c <HAL_GPIO_Init+0x40>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d130      	bne.n	8001a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a72:	2201      	movs	r2, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 0201 	and.w	r2, r3, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d118      	bne.n	8001adc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	6939      	ldr	r1, [r7, #16]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80ac 	beq.w	8001d06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_GPIO_Init+0x330>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <HAL_GPIO_Init+0x330>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_GPIO_Init+0x330>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc6:	4a5a      	ldr	r2, [pc, #360]	; (8001d30 <HAL_GPIO_Init+0x334>)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x242>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x23e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_GPIO_Init+0x33c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x23a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	; (8001d3c <HAL_GPIO_Init+0x340>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x236>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_GPIO_Init+0x344>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x232>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	; (8001d44 <HAL_GPIO_Init+0x348>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x22e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <HAL_GPIO_Init+0x34c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x22a>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00c      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e00a      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x244>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c50:	4937      	ldr	r1, [pc, #220]	; (8001d30 <HAL_GPIO_Init+0x334>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c82:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_GPIO_Init+0x350>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f47f ae78 	bne.w	8001a0c <HAL_GPIO_Init+0x10>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000
 8001d34:	48000400 	.word	0x48000400
 8001d38:	48000800 	.word	0x48000800
 8001d3c:	48000c00 	.word	0x48000c00
 8001d40:	48001000 	.word	0x48001000
 8001d44:	48001400 	.word	0x48001400
 8001d48:	48001800 	.word	0x48001800
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f806 	bl	8001db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e081      	b.n	8001edc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fffd 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2224      	movs	r2, #36	; 0x24
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	e006      	b.n	8001e4e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d104      	bne.n	8001e60 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69d9      	ldr	r1, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d138      	bne.n	8001f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e032      	b.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2224      	movs	r2, #36	; 0x24
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d139      	bne.n	8002004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e033      	b.n	8002006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2224      	movs	r2, #36	; 0x24
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002004:	2302      	movs	r3, #2
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002014:	b08f      	sub	sp, #60	; 0x3c
 8002016:	af0a      	add	r7, sp, #40	; 0x28
 8002018:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e116      	b.n	8002252 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff f85e 	bl	8001100 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2203      	movs	r2, #3
 8002048:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fe45 	bl	8004cf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	687e      	ldr	r6, [r7, #4]
 8002070:	466d      	mov	r5, sp
 8002072:	f106 0410 	add.w	r4, r6, #16
 8002076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002082:	e885 0003 	stmia.w	r5, {r0, r1}
 8002086:	1d33      	adds	r3, r6, #4
 8002088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f002 fe05 	bl	8004c9a <USB_CoreInit>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0d7      	b.n	8002252 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fe33 	bl	8004d14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e04a      	b.n	800214a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	333d      	adds	r3, #61	; 0x3d
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	333c      	adds	r3, #60	; 0x3c
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	b298      	uxth	r0, r3
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3344      	adds	r3, #68	; 0x44
 80020f0:	4602      	mov	r2, r0
 80020f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3340      	adds	r3, #64	; 0x40
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3348      	adds	r3, #72	; 0x48
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	334c      	adds	r3, #76	; 0x4c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3354      	adds	r3, #84	; 0x54
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3301      	adds	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3af      	bcc.n	80020b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e044      	b.n	80021e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	3301      	adds	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3b5      	bcc.n	800215a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	687e      	ldr	r6, [r7, #4]
 80021f6:	466d      	mov	r5, sp
 80021f8:	f106 0410 	add.w	r4, r6, #16
 80021fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002204:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002208:	e885 0003 	stmia.w	r5, {r0, r1}
 800220c:	1d33      	adds	r3, r6, #4
 800220e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f002 fdcb 	bl	8004dac <USB_DevInit>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e014      	b.n	8002252 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f80a 	bl	800225a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 ff77 	bl	800513e <USB_DevDisconnect>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800225a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	f043 0303 	orr.w	r3, r3, #3
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_PWREx_GetVoltageRange+0x18>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40007000 	.word	0x40007000

080022e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ee:	d130      	bne.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022fc:	d038      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2232      	movs	r2, #50	; 0x32
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	3301      	adds	r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002324:	e002      	b.n	800232c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3b01      	subs	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002338:	d102      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f2      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234c:	d110      	bne.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e00f      	b.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d007      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002368:	4a05      	ldr	r2, [pc, #20]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000
 8002384:	20000000 	.word	0x20000000
 8002388:	431bde83 	.word	0x431bde83

0800238c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239a:	6053      	str	r3, [r2, #4]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000

080023ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff f904 	bl	80015c0 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e063      	b.n	800248c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fd65 	bl	8000ea8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80023de:	f241 3188 	movw	r1, #5000	; 0x1388
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f858 	bl	8002498 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	2120      	movs	r1, #32
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f850 	bl	80024b4 <QSPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d131      	bne.n	8002482 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002428:	f023 0310 	bic.w	r3, r3, #16
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6852      	ldr	r2, [r2, #4]
 8002430:	0611      	lsls	r1, r2, #24
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_QSPI_Init+0xe8>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6912      	ldr	r2, [r2, #16]
 800244e:	0411      	lsls	r1, r2, #16
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6952      	ldr	r2, [r2, #20]
 8002454:	4311      	orrs	r1, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6992      	ldr	r2, [r2, #24]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800248a:	7afb      	ldrb	r3, [r7, #11]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	ffe0f8fe 	.word	0xffe0f8fe

08002498 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024c4:	e01a      	b.n	80024fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d016      	beq.n	80024fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ce:	f7ff f877 	bl	80015c0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2204      	movs	r2, #4
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00e      	b.n	800251a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	429a      	cmp	r2, r3
 8002516:	d1d6      	bne.n	80024c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e3ca      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b97      	ldr	r3, [pc, #604]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b94      	ldr	r3, [pc, #592]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80e4 	beq.w	8002720 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_RCC_OscConfig+0x4a>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	f040 808b 	bne.w	800267c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b01      	cmp	r3, #1
 800256a:	f040 8087 	bne.w	800267c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256e:	4b89      	ldr	r3, [pc, #548]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e3a2      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	4b82      	ldr	r3, [pc, #520]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_RCC_OscConfig+0x7c>
 8002596:	4b7f      	ldr	r3, [pc, #508]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259e:	e005      	b.n	80025ac <HAL_RCC_OscConfig+0x88>
 80025a0:	4b7c      	ldr	r3, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d223      	bcs.n	80025f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fd87 	bl	80030c8 <RCC_SetFlashLatencyFromMSIRange>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e383      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c4:	4b73      	ldr	r3, [pc, #460]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a72      	ldr	r2, [pc, #456]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b70      	ldr	r3, [pc, #448]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	496d      	ldr	r1, [pc, #436]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e2:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	4968      	ldr	r1, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
 80025f6:	e025      	b.n	8002644 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f8:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4960      	ldr	r1, [pc, #384]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002616:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	495b      	ldr	r1, [pc, #364]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd47 	bl	80030c8 <RCC_SetFlashLatencyFromMSIRange>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e343      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002644:	f000 fc4a 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b52      	ldr	r3, [pc, #328]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	4950      	ldr	r1, [pc, #320]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_RCC_OscConfig+0x278>)
 8002662:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002664:	4b4e      	ldr	r3, [pc, #312]	; (80027a0 <HAL_RCC_OscConfig+0x27c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fde5 	bl	8001238 <HAL_InitTick>
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d052      	beq.n	800271e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	e327      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d032      	beq.n	80026ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002684:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a42      	ldr	r2, [pc, #264]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002690:	f7fe ff96 	bl	80015c0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002698:	f7fe ff92 	bl	80015c0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e310      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026aa:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a36      	ldr	r2, [pc, #216]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b34      	ldr	r3, [pc, #208]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4931      	ldr	r1, [pc, #196]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	492c      	ldr	r1, [pc, #176]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e01a      	b.n	8002720 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ea:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f6:	f7fe ff63 	bl	80015c0 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026fe:	f7fe ff5f 	bl	80015c0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e2dd      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x1da>
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d074      	beq.n	8002816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x21a>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d10e      	bne.n	8002756 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d10b      	bne.n	8002756 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d064      	beq.n	8002814 <HAL_RCC_OscConfig+0x2f0>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d160      	bne.n	8002814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e2ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x24a>
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e026      	b.n	80027bc <HAL_RCC_OscConfig+0x298>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_OscConfig+0x280>
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x298>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	08007294 	.word	0x08007294
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004
 80027a4:	4ba0      	ldr	r3, [pc, #640]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a9f      	ldr	r2, [pc, #636]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b9d      	ldr	r3, [pc, #628]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a9c      	ldr	r2, [pc, #624]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fefc 	bl	80015c0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fef8 	bl	80015c0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e276      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027de:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2a8>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fee8 	bl	80015c0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fee4 	bl	80015c0 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e262      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002806:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d0>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d060      	beq.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x310>
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d119      	bne.n	8002862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d116      	bne.n	8002862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002834:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x328>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e23f      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4973      	ldr	r1, [pc, #460]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002860:	e040      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d023      	beq.n	80028b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286a:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6e      	ldr	r2, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fea3 	bl	80015c0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fe9f 	bl	80015c0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e21d      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002890:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	495f      	ldr	r1, [pc, #380]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e018      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5c      	ldr	r2, [pc, #368]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fe7f 	bl	80015c0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fe fe7b 	bl	80015c0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1f9      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d03c      	beq.n	800296a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01c      	beq.n	8002932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fe:	4a4a      	ldr	r2, [pc, #296]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fe5a 	bl	80015c0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe fe56 	bl	80015c0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1d4      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCC_OscConfig+0x3ec>
 8002930:	e01b      	b.n	800296a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002938:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fe3d 	bl	80015c0 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe fe39 	bl	80015c0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e1b7      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ef      	bne.n	800294a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80a6 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10d      	bne.n	80029a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	6593      	str	r3, [r2, #88]	; 0x58
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d118      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029bc:	f7fe fe00 	bl	80015c0 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fdfc 	bl	80015c0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e17a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x4d8>
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029fa:	e029      	b.n	8002a50 <HAL_RCC_OscConfig+0x52c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d115      	bne.n	8002a30 <HAL_RCC_OscConfig+0x50c>
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a24:	e014      	b.n	8002a50 <HAL_RCC_OscConfig+0x52c>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	4b9c      	ldr	r3, [pc, #624]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	4a9b      	ldr	r2, [pc, #620]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a40:	4b98      	ldr	r3, [pc, #608]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	4a97      	ldr	r2, [pc, #604]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fdb2 	bl	80015c0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fdae 	bl	80015c0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e12a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a76:	4b8b      	ldr	r3, [pc, #556]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ed      	beq.n	8002a60 <HAL_RCC_OscConfig+0x53c>
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fd9b 	bl	80015c0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fd97 	bl	80015c0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e113      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa4:	4b7f      	ldr	r3, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ed      	bne.n	8002a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b7a      	ldr	r3, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	4a79      	ldr	r2, [pc, #484]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80fe 	beq.w	8002cca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	f040 80d0 	bne.w	8002c78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ad8:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d130      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	3b01      	subs	r3, #1
 8002af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d127      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b18:	2a07      	cmp	r2, #7
 8002b1a:	bf14      	ite	ne
 8002b1c:	2201      	movne	r2, #1
 8002b1e:	2200      	moveq	r2, #0
 8002b20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d113      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	3b01      	subs	r3, #1
 8002b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	3b01      	subs	r3, #1
 8002b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d06e      	beq.n	8002c2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d069      	beq.n	8002c28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0ad      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a4b      	ldr	r2, [pc, #300]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b7c:	f7fe fd20 	bl	80015c0 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fd1c 	bl	80015c0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e09a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b96:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <HAL_RCC_OscConfig+0x784>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bbc:	0212      	lsls	r2, r2, #8
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bc4:	0852      	lsrs	r2, r2, #1
 8002bc6:	3a01      	subs	r2, #1
 8002bc8:	0552      	lsls	r2, r2, #21
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0652      	lsls	r2, r2, #25
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bdc:	0912      	lsrs	r2, r2, #4
 8002bde:	0452      	lsls	r2, r2, #17
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4930      	ldr	r1, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2d      	ldr	r2, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c00:	f7fe fcde 	bl	80015c0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fcda 	bl	80015c0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c26:	e050      	b.n	8002cca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04f      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d148      	bne.n	8002cca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c50:	f7fe fcb6 	bl	80015c0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fcb2 	bl	80015c0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e030      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x734>
 8002c76:	e028      	b.n	8002cca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d023      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fc99 	bl	80015c0 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e00c      	b.n	8002cac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fc95 	bl	80015c0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d905      	bls.n	8002cac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x7b0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ec      	bne.n	8002c92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_OscConfig+0x7b0>)
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	4905      	ldr	r1, [pc, #20]	; (8002cd4 <HAL_RCC_OscConfig+0x7b0>)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x7b4>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60cb      	str	r3, [r1, #12]
 8002cc4:	e001      	b.n	8002cca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	feeefffc 	.word	0xfeeefffc

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0e7      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b75      	ldr	r3, [pc, #468]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b72      	ldr	r3, [pc, #456]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0207 	bic.w	r2, r3, #7
 8002d06:	4970      	ldr	r1, [pc, #448]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b6e      	ldr	r3, [pc, #440]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0cf      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d908      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4960      	ldr	r1, [pc, #384]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04c      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d121      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0a6      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	4b54      	ldr	r3, [pc, #336]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d115      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e09a      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d92:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e08e      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da2:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e086      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4943      	ldr	r1, [pc, #268]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fbfc 	bl	80015c0 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fbf8 	bl	80015c0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e06e      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d208      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	492b      	ldr	r1, [pc, #172]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d210      	bcs.n	8002e52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0207 	bic.w	r2, r3, #7
 8002e38:	4923      	ldr	r1, [pc, #140]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e036      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4918      	ldr	r1, [pc, #96]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4910      	ldr	r1, [pc, #64]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e90:	f000 f824 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	490b      	ldr	r1, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1fc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f9bf 	bl	8001238 <HAL_InitTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08007294 	.word	0x08007294
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eea:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x34>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d121      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d11e      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e005      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f38:	4a2b      	ldr	r2, [pc, #172]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_RCC_GetSysClockFreq+0x110>)
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e004      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f60:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d134      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0xac>
 8002f80:	e005      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCC_GetSysClockFreq+0x110>)
 8002f84:	617b      	str	r3, [r7, #20]
      break;
 8002f86:	e005      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f8a:	617b      	str	r3, [r7, #20]
      break;
 8002f8c:	e002      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	617b      	str	r3, [r7, #20]
      break;
 8002f92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	fb03 f202 	mul.w	r2, r3, r2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	0e5b      	lsrs	r3, r3, #25
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	080072ac 	.word	0x080072ac
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	007a1200 	.word	0x007a1200

08002ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003010:	f7ff fff0 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	080072a4 	.word	0x080072a4

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800303c:	f7ff ffda 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0adb      	lsrs	r3, r3, #11
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4904      	ldr	r1, [pc, #16]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	080072a4 	.word	0x080072a4

08003064 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	220f      	movs	r2, #15
 8003072:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0203 	and.w	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCC_GetClockConfig+0x60>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0207 	and.w	r2, r3, #7
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40022000 	.word	0x40022000

080030c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030e0:	f7ff f8f0 	bl	80022c4 <HAL_PWREx_GetVoltageRange>
 80030e4:	6178      	str	r0, [r7, #20]
 80030e6:	e014      	b.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6593      	str	r3, [r2, #88]	; 0x58
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003100:	f7ff f8e0 	bl	80022c4 <HAL_PWREx_GetVoltageRange>
 8003104:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d10b      	bne.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d919      	bls.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2ba0      	cmp	r3, #160	; 0xa0
 8003124:	d902      	bls.n	800312c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003126:	2302      	movs	r3, #2
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	e013      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800312c:	2301      	movs	r3, #1
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e010      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d902      	bls.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003138:	2303      	movs	r3, #3
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e00a      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d102      	bne.n	800314a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003144:	2302      	movs	r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e004      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b70      	cmp	r3, #112	; 0x70
 800314e:	d101      	bne.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003150:	2301      	movs	r3, #1
 8003152:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	4909      	ldr	r1, [pc, #36]	; (8003184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	40022000 	.word	0x40022000

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003190:	2300      	movs	r3, #0
 8003192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003194:	2300      	movs	r3, #0
 8003196:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d041      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ac:	d02a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031b2:	d824      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b8:	d008      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031be:	d81e      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c8:	d010      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031ca:	e018      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031cc:	4b86      	ldr	r3, [pc, #536]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a85      	ldr	r2, [pc, #532]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d8:	e015      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 facb 	bl	800377c <RCCEx_PLLSAI1_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031ea:	e00c      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3320      	adds	r3, #32
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fbb6 	bl	8003964 <RCCEx_PLLSAI2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031fc:	e003      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	74fb      	strb	r3, [r7, #19]
      break;
 8003202:	e000      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320c:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321a:	4973      	ldr	r1, [pc, #460]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003222:	e001      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d041      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003238:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800323c:	d02a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800323e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003242:	d824      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800324a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800324e:	d81e      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003258:	d010      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800325a:	e018      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800325c:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a61      	ldr	r2, [pc, #388]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003268:	e015      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fa83 	bl	800377c <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800327a:	e00c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3320      	adds	r3, #32
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fb6e 	bl	8003964 <RCCEx_PLLSAI2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	74fb      	strb	r3, [r7, #19]
      break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800329c:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032aa:	494f      	ldr	r1, [pc, #316]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032b2:	e001      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a0 	beq.w	8003406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a40      	ldr	r2, [pc, #256]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f8:	2301      	movs	r3, #1
 80032fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032fc:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3a      	ldr	r2, [pc, #232]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003308:	f7fe f95a 	bl	80015c0 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800330e:	e009      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fe f956 	bl	80015c0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	74fb      	strb	r3, [r7, #19]
        break;
 8003322:	e005      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003324:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d15c      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003340:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01f      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	d019      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe f915 	bl	80015c0 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003398:	e00b      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe f911 	bl	80015c0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d902      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	74fb      	strb	r3, [r7, #19]
            break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ec      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d6:	4904      	ldr	r1, [pc, #16]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033de:	e009      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f4:	7c7b      	ldrb	r3, [r7, #17]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fa:	4b9e      	ldr	r3, [pc, #632]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	4a9d      	ldr	r2, [pc, #628]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003412:	4b98      	ldr	r3, [pc, #608]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f023 0203 	bic.w	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	4994      	ldr	r1, [pc, #592]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003434:	4b8f      	ldr	r3, [pc, #572]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 020c 	bic.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	498c      	ldr	r1, [pc, #560]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003456:	4b87      	ldr	r3, [pc, #540]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	4983      	ldr	r1, [pc, #524]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003478:	4b7e      	ldr	r3, [pc, #504]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	497b      	ldr	r1, [pc, #492]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a8:	4972      	ldr	r1, [pc, #456]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034bc:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	496a      	ldr	r1, [pc, #424]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	4961      	ldr	r1, [pc, #388]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003500:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	4959      	ldr	r1, [pc, #356]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	4950      	ldr	r1, [pc, #320]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	4948      	ldr	r1, [pc, #288]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	493f      	ldr	r1, [pc, #252]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d028      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	4937      	ldr	r1, [pc, #220]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a6:	d106      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a8:	4b32      	ldr	r3, [pc, #200]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a31      	ldr	r2, [pc, #196]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b2:	60d3      	str	r3, [r2, #12]
 80035b4:	e011      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035be:	d10c      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f8d8 	bl	800377c <RCCEx_PLLSAI1_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d028      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	491f      	ldr	r1, [pc, #124]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003604:	d106      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003610:	60d3      	str	r3, [r2, #12]
 8003612:	e011      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800361c:	d10c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f8a9 	bl	800377c <RCCEx_PLLSAI1_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02b      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003652:	4908      	ldr	r1, [pc, #32]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003662:	d109      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a02      	ldr	r2, [pc, #8]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366e:	60d3      	str	r3, [r2, #12]
 8003670:	e014      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003680:	d10c      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f877 	bl	800377c <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02f      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b6:	4928      	ldr	r1, [pc, #160]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f854 	bl	800377c <RCCEx_PLLSAI1_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d014      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	74bb      	strb	r3, [r7, #18]
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3320      	adds	r3, #32
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f935 	bl	8003964 <RCCEx_PLLSAI2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003722:	490d      	ldr	r1, [pc, #52]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800374e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000

0800375c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378a:	4b75      	ldr	r3, [pc, #468]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003796:	4b72      	ldr	r3, [pc, #456]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
       ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ae:	4b6c      	ldr	r3, [pc, #432]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
       ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d047      	beq.n	8003852 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e044      	b.n	8003852 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d018      	beq.n	8003802 <RCCEx_PLLSAI1_Config+0x86>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d825      	bhi.n	8003820 <RCCEx_PLLSAI1_Config+0xa4>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d002      	beq.n	80037de <RCCEx_PLLSAI1_Config+0x62>
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d009      	beq.n	80037f0 <RCCEx_PLLSAI1_Config+0x74>
 80037dc:	e020      	b.n	8003820 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037de:	4b60      	ldr	r3, [pc, #384]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11d      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ee:	e01a      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f0:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e013      	b.n	800382a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003802:	4b57      	ldr	r3, [pc, #348]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380e:	4b54      	ldr	r3, [pc, #336]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800381e:	e006      	b.n	800382e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e004      	b.n	8003830 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800382e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003836:	4b4a      	ldr	r3, [pc, #296]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	430b      	orrs	r3, r1
 800384c:	4944      	ldr	r1, [pc, #272]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d17d      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003858:	4b41      	ldr	r3, [pc, #260]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a40      	ldr	r2, [pc, #256]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003864:	f7fd feac 	bl	80015c0 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800386a:	e009      	b.n	8003880 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800386c:	f7fd fea8 	bl	80015c0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
        break;
 800387e:	e005      	b.n	800388c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ef      	bne.n	800386c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d160      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003898:	4b31      	ldr	r3, [pc, #196]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6892      	ldr	r2, [r2, #8]
 80038a8:	0211      	lsls	r1, r2, #8
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	0912      	lsrs	r2, r2, #4
 80038b0:	0452      	lsls	r2, r2, #17
 80038b2:	430a      	orrs	r2, r1
 80038b4:	492a      	ldr	r1, [pc, #168]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	610b      	str	r3, [r1, #16]
 80038ba:	e027      	b.n	800390c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d112      	bne.n	80038e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6892      	ldr	r2, [r2, #8]
 80038d2:	0211      	lsls	r1, r2, #8
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6912      	ldr	r2, [r2, #16]
 80038d8:	0852      	lsrs	r2, r2, #1
 80038da:	3a01      	subs	r2, #1
 80038dc:	0552      	lsls	r2, r2, #21
 80038de:	430a      	orrs	r2, r1
 80038e0:	491f      	ldr	r1, [pc, #124]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	610b      	str	r3, [r1, #16]
 80038e6:	e011      	b.n	800390c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	0211      	lsls	r1, r2, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6952      	ldr	r2, [r2, #20]
 80038fe:	0852      	lsrs	r2, r2, #1
 8003900:	3a01      	subs	r2, #1
 8003902:	0652      	lsls	r2, r2, #25
 8003904:	430a      	orrs	r2, r1
 8003906:	4916      	ldr	r1, [pc, #88]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fe52 	bl	80015c0 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003920:	f7fd fe4e 	bl	80015c0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
          break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	4904      	ldr	r1, [pc, #16]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000

08003964 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003972:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d018      	beq.n	80039b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800397e:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d10d      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
       ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003996:	4b61      	ldr	r3, [pc, #388]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
       ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d047      	beq.n	8003a3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	e044      	b.n	8003a3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d018      	beq.n	80039ea <RCCEx_PLLSAI2_Config+0x86>
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d825      	bhi.n	8003a08 <RCCEx_PLLSAI2_Config+0xa4>
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d002      	beq.n	80039c6 <RCCEx_PLLSAI2_Config+0x62>
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d009      	beq.n	80039d8 <RCCEx_PLLSAI2_Config+0x74>
 80039c4:	e020      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039c6:	4b55      	ldr	r3, [pc, #340]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11d      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d6:	e01a      	b.n	8003a0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039d8:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e013      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a06:	e006      	b.n	8003a16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a0c:	e004      	b.n	8003a18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a1e:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	430b      	orrs	r3, r1
 8003a34:	4939      	ldr	r1, [pc, #228]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d167      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a40:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a35      	ldr	r2, [pc, #212]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fdb8 	bl	80015c0 <HAL_GetTick>
 8003a50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a52:	e009      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a54:	f7fd fdb4 	bl	80015c0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d902      	bls.n	8003a68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	73fb      	strb	r3, [r7, #15]
        break;
 8003a66:	e005      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a68:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ef      	bne.n	8003a54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d14a      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d111      	bne.n	8003aa4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a80:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	0211      	lsls	r1, r2, #8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	0912      	lsrs	r2, r2, #4
 8003a98:	0452      	lsls	r2, r2, #17
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	491f      	ldr	r1, [pc, #124]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	614b      	str	r3, [r1, #20]
 8003aa2:	e011      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6892      	ldr	r2, [r2, #8]
 8003ab4:	0211      	lsls	r1, r2, #8
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6912      	ldr	r2, [r2, #16]
 8003aba:	0852      	lsrs	r2, r2, #1
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0652      	lsls	r2, r2, #25
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	4916      	ldr	r1, [pc, #88]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fd74 	bl	80015c0 <HAL_GetTick>
 8003ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ada:	e009      	b.n	8003af0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003adc:	f7fd fd70 	bl	80015c0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d902      	bls.n	8003af0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	73fb      	strb	r3, [r7, #15]
          break;
 8003aee:	e005      	b.n	8003afc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ef      	beq.n	8003adc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4904      	ldr	r1, [pc, #16]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e095      	b.n	8003c5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b42:	d009      	beq.n	8003b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
 8003b4a:	e005      	b.n	8003b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd f9dc 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b98:	d902      	bls.n	8003ba0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bae:	d007      	beq.n	8003bc0 <HAL_SPI_Init+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	f003 0204 	and.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e049      	b.n	8003d0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f841 	bl	8003d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f000 f9f7 	bl	8004098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e04f      	b.n	8003de0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_TIM_Base_Start_IT+0xc4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01d      	beq.n	8003d9e <HAL_TIM_Base_Start_IT+0x76>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d018      	beq.n	8003d9e <HAL_TIM_Base_Start_IT+0x76>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_TIM_Base_Start_IT+0x76>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_TIM_Base_Start_IT+0x76>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_TIM_Base_Start_IT+0x76>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIM_Base_Start_IT+0x76>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d115      	bne.n	8003dca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d015      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0xb4>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d011      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	e008      	b.n	8003ddc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e000      	b.n	8003dde <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40013400 	.word	0x40013400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	00010007 	.word	0x00010007

08003e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0202 	mvn.w	r2, #2
 8003e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f905 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8f7 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f908 	bl	800406e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0204 	mvn.w	r2, #4
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8db 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8cd 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8de 	bl	800406e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8b1 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8a3 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8b4 	bl	800406e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0210 	mvn.w	r2, #16
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2208      	movs	r2, #8
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f887 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f879 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f88a 	bl	800406e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0201 	mvn.w	r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc fe8c 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f914 	bl	80041e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b80      	cmp	r3, #128	; 0x80
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f907 	bl	80041f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d10e      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d107      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800400a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f838 	bl	8004082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d10e      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b20      	cmp	r3, #32
 800402c:	d107      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f06f 0220 	mvn.w	r2, #32
 8004036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8c7 	bl	80041cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a40      	ldr	r2, [pc, #256]	; (80041ac <TIM_Base_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d00f      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3d      	ldr	r2, [pc, #244]	; (80041b0 <TIM_Base_SetConfig+0x118>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3c      	ldr	r2, [pc, #240]	; (80041b4 <TIM_Base_SetConfig+0x11c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <TIM_Base_SetConfig+0x120>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a3a      	ldr	r2, [pc, #232]	; (80041bc <TIM_Base_SetConfig+0x124>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <TIM_Base_SetConfig+0x114>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01f      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d01b      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <TIM_Base_SetConfig+0x118>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d017      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2b      	ldr	r2, [pc, #172]	; (80041b4 <TIM_Base_SetConfig+0x11c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <TIM_Base_SetConfig+0x120>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a29      	ldr	r2, [pc, #164]	; (80041bc <TIM_Base_SetConfig+0x124>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <TIM_Base_SetConfig+0x128>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <TIM_Base_SetConfig+0x12c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <TIM_Base_SetConfig+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a10      	ldr	r2, [pc, #64]	; (80041ac <TIM_Base_SetConfig+0x114>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <TIM_Base_SetConfig+0x124>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <TIM_Base_SetConfig+0x128>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a10      	ldr	r2, [pc, #64]	; (80041c4 <TIM_Base_SetConfig+0x12c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <TIM_Base_SetConfig+0x130>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d103      	bne.n	8004198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	615a      	str	r2, [r3, #20]
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40013400 	.word	0x40013400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e040      	b.n	800429c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fec4 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2224      	movs	r2, #36	; 0x24
 8004234:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8c0 	bl	80043cc <UART_SetConfig>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e022      	b.n	800429c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fb6c 	bl	800493c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fbf3 	bl	8004a80 <UART_CheckIdleState>
 800429a:	4603      	mov	r3, r0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	f040 8082 	bne.w	80043c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_UART_Transmit+0x26>
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07a      	b.n	80043c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_UART_Transmit+0x38>
 80042d8:	2302      	movs	r3, #2
 80042da:	e073      	b.n	80043c4 <HAL_UART_Transmit+0x120>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2221      	movs	r2, #33	; 0x21
 80042f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f2:	f7fd f965 	bl	80015c0 <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004310:	d108      	bne.n	8004324 <HAL_UART_Transmit+0x80>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d104      	bne.n	8004324 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e003      	b.n	800432c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004334:	e02d      	b.n	8004392 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fbe6 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e039      	b.n	80043c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	881a      	ldrh	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004362:	b292      	uxth	r2, r2
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3302      	adds	r3, #2
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e008      	b.n	8004380 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b292      	uxth	r2, r2
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1cb      	bne.n	8004336 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fbb2 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e005      	b.n	80043c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b08a      	sub	sp, #40	; 0x28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4ba4      	ldr	r3, [pc, #656]	; (800468c <UART_SetConfig+0x2c0>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004404:	430b      	orrs	r3, r1
 8004406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a99      	ldr	r2, [pc, #612]	; (8004690 <UART_SetConfig+0x2c4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	4313      	orrs	r3, r2
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a90      	ldr	r2, [pc, #576]	; (8004694 <UART_SetConfig+0x2c8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d126      	bne.n	80044a4 <UART_SetConfig+0xd8>
 8004456:	4b90      	ldr	r3, [pc, #576]	; (8004698 <UART_SetConfig+0x2cc>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d81b      	bhi.n	800449c <UART_SetConfig+0xd0>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0xa0>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	0800448d 	.word	0x0800448d
 8004474:	08004485 	.word	0x08004485
 8004478:	08004495 	.word	0x08004495
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e116      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e112      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e10e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e10a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e106      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a7c      	ldr	r2, [pc, #496]	; (800469c <UART_SetConfig+0x2d0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d138      	bne.n	8004520 <UART_SetConfig+0x154>
 80044ae:	4b7a      	ldr	r3, [pc, #488]	; (8004698 <UART_SetConfig+0x2cc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d82d      	bhi.n	8004518 <UART_SetConfig+0x14c>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0xf8>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004519 	.word	0x08004519
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004501 	.word	0x08004501
 80044e8:	08004519 	.word	0x08004519
 80044ec:	08004519 	.word	0x08004519
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004511 	.word	0x08004511
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e0d8      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004500:	2302      	movs	r3, #2
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e0d4      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004508:	2304      	movs	r3, #4
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e0d0      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004510:	2308      	movs	r3, #8
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e0cc      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004518:	2310      	movs	r3, #16
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e0c8      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a5e      	ldr	r2, [pc, #376]	; (80046a0 <UART_SetConfig+0x2d4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d125      	bne.n	8004576 <UART_SetConfig+0x1aa>
 800452a:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <UART_SetConfig+0x2cc>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d016      	beq.n	8004566 <UART_SetConfig+0x19a>
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d818      	bhi.n	800456e <UART_SetConfig+0x1a2>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d00a      	beq.n	8004556 <UART_SetConfig+0x18a>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d814      	bhi.n	800456e <UART_SetConfig+0x1a2>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <UART_SetConfig+0x182>
 8004548:	2b10      	cmp	r3, #16
 800454a:	d008      	beq.n	800455e <UART_SetConfig+0x192>
 800454c:	e00f      	b.n	800456e <UART_SetConfig+0x1a2>
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004554:	e0ad      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004556:	2302      	movs	r3, #2
 8004558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455c:	e0a9      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800455e:	2304      	movs	r3, #4
 8004560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004564:	e0a5      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004566:	2308      	movs	r3, #8
 8004568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456c:	e0a1      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800456e:	2310      	movs	r3, #16
 8004570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004574:	e09d      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <UART_SetConfig+0x2d8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d125      	bne.n	80045cc <UART_SetConfig+0x200>
 8004580:	4b45      	ldr	r3, [pc, #276]	; (8004698 <UART_SetConfig+0x2cc>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800458a:	2bc0      	cmp	r3, #192	; 0xc0
 800458c:	d016      	beq.n	80045bc <UART_SetConfig+0x1f0>
 800458e:	2bc0      	cmp	r3, #192	; 0xc0
 8004590:	d818      	bhi.n	80045c4 <UART_SetConfig+0x1f8>
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d00a      	beq.n	80045ac <UART_SetConfig+0x1e0>
 8004596:	2b80      	cmp	r3, #128	; 0x80
 8004598:	d814      	bhi.n	80045c4 <UART_SetConfig+0x1f8>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <UART_SetConfig+0x1d8>
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d008      	beq.n	80045b4 <UART_SetConfig+0x1e8>
 80045a2:	e00f      	b.n	80045c4 <UART_SetConfig+0x1f8>
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e082      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045ac:	2302      	movs	r3, #2
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b2:	e07e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045b4:	2304      	movs	r3, #4
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ba:	e07a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045bc:	2308      	movs	r3, #8
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c2:	e076      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045c4:	2310      	movs	r3, #16
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e072      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a35      	ldr	r2, [pc, #212]	; (80046a8 <UART_SetConfig+0x2dc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d12a      	bne.n	800462c <UART_SetConfig+0x260>
 80045d6:	4b30      	ldr	r3, [pc, #192]	; (8004698 <UART_SetConfig+0x2cc>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e4:	d01a      	beq.n	800461c <UART_SetConfig+0x250>
 80045e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ea:	d81b      	bhi.n	8004624 <UART_SetConfig+0x258>
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d00c      	beq.n	800460c <UART_SetConfig+0x240>
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d815      	bhi.n	8004624 <UART_SetConfig+0x258>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <UART_SetConfig+0x238>
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004600:	d008      	beq.n	8004614 <UART_SetConfig+0x248>
 8004602:	e00f      	b.n	8004624 <UART_SetConfig+0x258>
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e052      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800460c:	2302      	movs	r3, #2
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004612:	e04e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004614:	2304      	movs	r3, #4
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461a:	e04a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800461c:	2308      	movs	r3, #8
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004622:	e046      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004624:	2310      	movs	r3, #16
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e042      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <UART_SetConfig+0x2c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d13a      	bne.n	80046ac <UART_SetConfig+0x2e0>
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <UART_SetConfig+0x2cc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004644:	d01a      	beq.n	800467c <UART_SetConfig+0x2b0>
 8004646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800464a:	d81b      	bhi.n	8004684 <UART_SetConfig+0x2b8>
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004650:	d00c      	beq.n	800466c <UART_SetConfig+0x2a0>
 8004652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004656:	d815      	bhi.n	8004684 <UART_SetConfig+0x2b8>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <UART_SetConfig+0x298>
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d008      	beq.n	8004674 <UART_SetConfig+0x2a8>
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x2b8>
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e022      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e01e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e01a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e016      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e012      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800468c:	efff69f3 	.word	0xefff69f3
 8004690:	40008000 	.word	0x40008000
 8004694:	40013800 	.word	0x40013800
 8004698:	40021000 	.word	0x40021000
 800469c:	40004400 	.word	0x40004400
 80046a0:	40004800 	.word	0x40004800
 80046a4:	40004c00 	.word	0x40004c00
 80046a8:	40005000 	.word	0x40005000
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a9f      	ldr	r2, [pc, #636]	; (8004934 <UART_SetConfig+0x568>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d17a      	bne.n	80047b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d824      	bhi.n	800470e <UART_SetConfig+0x342>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x300>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	0800470f 	.word	0x0800470f
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	0800470f 	.word	0x0800470f
 80046dc:	080046ff 	.word	0x080046ff
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	0800470f 	.word	0x0800470f
 80046e8:	0800470f 	.word	0x0800470f
 80046ec:	08004707 	.word	0x08004707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe fc8c 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 80046f4:	61f8      	str	r0, [r7, #28]
        break;
 80046f6:	e010      	b.n	800471a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <UART_SetConfig+0x56c>)
 80046fa:	61fb      	str	r3, [r7, #28]
        break;
 80046fc:	e00d      	b.n	800471a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7fe fbed 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8004702:	61f8      	str	r0, [r7, #28]
        break;
 8004704:	e009      	b.n	800471a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	61fb      	str	r3, [r7, #28]
        break;
 800470c:	e005      	b.n	800471a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80fb 	beq.w	8004918 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	429a      	cmp	r2, r3
 8004730:	d305      	bcc.n	800473e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	429a      	cmp	r2, r3
 800473c:	d903      	bls.n	8004746 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004744:	e0e8      	b.n	8004918 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2200      	movs	r2, #0
 800474a:	461c      	mov	r4, r3
 800474c:	4615      	mov	r5, r2
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	022b      	lsls	r3, r5, #8
 8004758:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800475c:	0222      	lsls	r2, r4, #8
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	6849      	ldr	r1, [r1, #4]
 8004762:	0849      	lsrs	r1, r1, #1
 8004764:	2000      	movs	r0, #0
 8004766:	4688      	mov	r8, r1
 8004768:	4681      	mov	r9, r0
 800476a:	eb12 0a08 	adds.w	sl, r2, r8
 800476e:	eb43 0b09 	adc.w	fp, r3, r9
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004780:	4650      	mov	r0, sl
 8004782:	4659      	mov	r1, fp
 8004784:	f7fb fd24 	bl	80001d0 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004796:	d308      	bcc.n	80047aa <UART_SetConfig+0x3de>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479e:	d204      	bcs.n	80047aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]
 80047a8:	e0b6      	b.n	8004918 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047b0:	e0b2      	b.n	8004918 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ba:	d15e      	bne.n	800487a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d828      	bhi.n	8004816 <UART_SetConfig+0x44a>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x400>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004801 	.word	0x08004801
 80047d8:	08004817 	.word	0x08004817
 80047dc:	08004807 	.word	0x08004807
 80047e0:	08004817 	.word	0x08004817
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004817 	.word	0x08004817
 80047ec:	0800480f 	.word	0x0800480f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fe fc0c 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 80047f4:	61f8      	str	r0, [r7, #28]
        break;
 80047f6:	e014      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f8:	f7fe fc1e 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 80047fc:	61f8      	str	r0, [r7, #28]
        break;
 80047fe:	e010      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004800:	4b4d      	ldr	r3, [pc, #308]	; (8004938 <UART_SetConfig+0x56c>)
 8004802:	61fb      	str	r3, [r7, #28]
        break;
 8004804:	e00d      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004806:	f7fe fb69 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 800480a:	61f8      	str	r0, [r7, #28]
        break;
 800480c:	e009      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	61fb      	str	r3, [r7, #28]
        break;
 8004814:	e005      	b.n	8004822 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d077      	beq.n	8004918 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005a      	lsls	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b0f      	cmp	r3, #15
 8004842:	d916      	bls.n	8004872 <UART_SetConfig+0x4a6>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d212      	bcs.n	8004872 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f023 030f 	bic.w	r3, r3, #15
 8004854:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	b29b      	uxth	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	b29a      	uxth	r2, r3
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	4313      	orrs	r3, r2
 8004866:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	8afa      	ldrh	r2, [r7, #22]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	e052      	b.n	8004918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004878:	e04e      	b.n	8004918 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487e:	2b08      	cmp	r3, #8
 8004880:	d827      	bhi.n	80048d2 <UART_SetConfig+0x506>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x4bc>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe fbae 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 80048b0:	61f8      	str	r0, [r7, #28]
        break;
 80048b2:	e014      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fe fbc0 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61f8      	str	r0, [r7, #28]
        break;
 80048ba:	e010      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <UART_SetConfig+0x56c>)
 80048be:	61fb      	str	r3, [r7, #28]
        break;
 80048c0:	e00d      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe fb0b 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 80048c6:	61f8      	str	r0, [r7, #28]
        break;
 80048c8:	e009      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	61fb      	str	r3, [r7, #28]
        break;
 80048d0:	e005      	b.n	80048de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048dc:	bf00      	nop
    }

    if (pclk != 0U)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d019      	beq.n	8004918 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085a      	lsrs	r2, r3, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	441a      	add	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d909      	bls.n	8004912 <UART_SetConfig+0x546>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d205      	bcs.n	8004912 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	e002      	b.n	8004918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004924:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004932:	bf00      	nop
 8004934:	40008000 	.word	0x40008000
 8004938:	00f42400 	.word	0x00f42400

0800493c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3a:	d10a      	bne.n	8004a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a90:	f7fc fd96 	bl	80015c0 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d10e      	bne.n	8004ac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f82d 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e023      	b.n	8004b0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d10e      	bne.n	8004aee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f817 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e00d      	b.n	8004b0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b09c      	sub	sp, #112	; 0x70
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b22:	e0a5      	b.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	f000 80a1 	beq.w	8004c70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fc fd47 	bl	80015c0 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d13e      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b58:	667b      	str	r3, [r7, #100]	; 0x64
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e6      	bne.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b96:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e067      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d04f      	beq.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	d147      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c3c:	623a      	str	r2, [r7, #32]
 8004c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e010      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	f43f af4a 	beq.w	8004b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3770      	adds	r7, #112	; 0x70
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	f107 001c 	add.w	r0, r7, #28
 8004ca8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fa6f 	bl	800519c <USB_CoreReset>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8004cd4:	e005      	b.n	8004ce2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cee:	b004      	add	sp, #16
 8004cf0:	4770      	bx	lr

08004cf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d115      	bne.n	8004d62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d42:	2001      	movs	r0, #1
 8004d44:	f7fc fc48 	bl	80015d8 <HAL_Delay>
      ms++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa16 	bl	8005180 <USB_GetMode>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d01e      	beq.n	8004d98 <USB_SetCurrentMode+0x84>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b31      	cmp	r3, #49	; 0x31
 8004d5e:	d9f0      	bls.n	8004d42 <USB_SetCurrentMode+0x2e>
 8004d60:	e01a      	b.n	8004d98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7fc fc2f 	bl	80015d8 <HAL_Delay>
      ms++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f9fd 	bl	8005180 <USB_GetMode>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <USB_SetCurrentMode+0x84>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b31      	cmp	r3, #49	; 0x31
 8004d90:	d9f0      	bls.n	8004d74 <USB_SetCurrentMode+0x60>
 8004d92:	e001      	b.n	8004d98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e005      	b.n	8004da4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b32      	cmp	r3, #50	; 0x32
 8004d9c:	d101      	bne.n	8004da2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dac:	b084      	sub	sp, #16
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b086      	sub	sp, #24
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e009      	b.n	8004de0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3340      	adds	r3, #64	; 0x40
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0e      	cmp	r3, #14
 8004de4:	d9f2      	bls.n	8004dcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11c      	bne.n	8004e26 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfa:	f043 0302 	orr.w	r3, r3, #2
 8004dfe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e005      	b.n	8004e32 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e44:	4619      	mov	r1, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	680b      	ldr	r3, [r1, #0]
 8004e50:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e52:	2103      	movs	r1, #3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f959 	bl	800510c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8f1 	bl	8005044 <USB_FlushTxFifo>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f91d 	bl	80050ac <USB_FlushRxFifo>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	461a      	mov	r2, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e043      	b.n	8004f2e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ebc:	d118      	bne.n	8004ef0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e013      	b.n	8004f02 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e008      	b.n	8004f02 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	461a      	mov	r2, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2300      	movs	r3, #0
 8004f12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d3b7      	bcc.n	8004ea6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e043      	b.n	8004fc4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f52:	d118      	bne.n	8004f86 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	461a      	mov	r2, r3
 8004f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e013      	b.n	8004f98 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e008      	b.n	8004f98 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	461a      	mov	r2, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d3b7      	bcc.n	8004f3c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <USB_DevInit+0x294>)
 8005000:	4313      	orrs	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 0208 	orr.w	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800503a:	b004      	add	sp, #16
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	803c3800 	.word	0x803c3800

08005044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3301      	adds	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <USB_FlushTxFifo+0x64>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d901      	bls.n	8005064 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e01b      	b.n	800509c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	daf2      	bge.n	8005052 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	019b      	lsls	r3, r3, #6
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3301      	adds	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <USB_FlushTxFifo+0x64>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e006      	b.n	800509c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b20      	cmp	r3, #32
 8005098:	d0f0      	beq.n	800507c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	00030d40 	.word	0x00030d40

080050ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a11      	ldr	r2, [pc, #68]	; (8005108 <USB_FlushRxFifo+0x5c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e018      	b.n	80050fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	daf2      	bge.n	80050b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2210      	movs	r2, #16
 80050da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a08      	ldr	r2, [pc, #32]	; (8005108 <USB_FlushRxFifo+0x5c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e006      	b.n	80050fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d0f0      	beq.n	80050dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	00030d40 	.word	0x00030d40

0800510c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005158:	f023 0303 	bic.w	r3, r3, #3
 800515c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0301 	and.w	r3, r3, #1
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <USB_CoreReset+0x64>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e01b      	b.n	80051f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	daf2      	bge.n	80051a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3301      	adds	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <USB_CoreReset+0x64>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e006      	b.n	80051f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d0f0      	beq.n	80051d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	00030d40 	.word	0x00030d40

08005204 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005216:	2b84      	cmp	r3, #132	; 0x84
 8005218:	d005      	beq.n	8005226 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800521a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	3303      	adds	r3, #3
 8005224:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005238:	f000 faf6 	bl	8005828 <vTaskStartScheduler>
  
  return osOK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	bd80      	pop	{r7, pc}

08005242 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005244:	b089      	sub	sp, #36	; 0x24
 8005246:	af04      	add	r7, sp, #16
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <osThreadCreate+0x54>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685c      	ldr	r4, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681d      	ldr	r5, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691e      	ldr	r6, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ffc8 	bl	8005204 <makeFreeRtosPriority>
 8005274:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800527e:	9202      	str	r2, [sp, #8]
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	9100      	str	r1, [sp, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4632      	mov	r2, r6
 8005288:	4629      	mov	r1, r5
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f8ed 	bl	800546a <xTaskCreateStatic>
 8005290:	4603      	mov	r3, r0
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e01c      	b.n	80052d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685c      	ldr	r4, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a2:	b29e      	uxth	r6, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ffaa 	bl	8005204 <makeFreeRtosPriority>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f107 030c 	add.w	r3, r7, #12
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	9200      	str	r2, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4632      	mov	r2, r6
 80052be:	4629      	mov	r1, r5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 f92f 	bl	8005524 <xTaskCreate>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052d0:	68fb      	ldr	r3, [r7, #12]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <osDelay+0x16>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	e000      	b.n	80052f2 <osDelay+0x18>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fa64 	bl	80057c0 <vTaskDelay>
  
  return osOK;
 80052f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f103 0208 	add.w	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 32ff 	mov.w	r2, #4294967295
 800531a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f103 0208 	add.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d103      	bne.n	80053c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e00c      	b.n	80053de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3308      	adds	r3, #8
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e002      	b.n	80053d2 <vListInsert+0x2e>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d2f6      	bcs.n	80053cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6852      	ldr	r2, [r2, #4]
 8005436:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d103      	bne.n	800544a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	1e5a      	subs	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800546a:	b580      	push	{r7, lr}
 800546c:	b08e      	sub	sp, #56	; 0x38
 800546e:	af04      	add	r7, sp, #16
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <xTaskCreateStatic+0x46>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	61fb      	str	r3, [r7, #28]
}
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054b0:	23b4      	movs	r3, #180	; 0xb4
 80054b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2bb4      	cmp	r3, #180	; 0xb4
 80054b8:	d00a      	beq.n	80054d0 <xTaskCreateStatic+0x66>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	61bb      	str	r3, [r7, #24]
}
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01e      	beq.n	8005516 <xTaskCreateStatic+0xac>
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01b      	beq.n	8005516 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054f0:	2300      	movs	r3, #0
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	9302      	str	r3, [sp, #8]
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f851 	bl	80055b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005510:	f000 f8ec 	bl	80056ec <prvAddNewTaskToReadyList>
 8005514:	e001      	b.n	800551a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800551a:	697b      	ldr	r3, [r7, #20]
	}
 800551c:	4618      	mov	r0, r3
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08c      	sub	sp, #48	; 0x30
 8005528:	af04      	add	r7, sp, #16
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fef5 	bl	8006328 <pvPortMalloc>
 800553e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00e      	beq.n	8005564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005546:	20b4      	movs	r0, #180	; 0xb4
 8005548:	f000 feee 	bl	8006328 <pvPortMalloc>
 800554c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
 800555a:	e005      	b.n	8005568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800555c:	6978      	ldr	r0, [r7, #20]
 800555e:	f000 ffaf 	bl	80064c0 <vPortFree>
 8005562:	e001      	b.n	8005568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d017      	beq.n	800559e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	2300      	movs	r3, #0
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f80f 	bl	80055b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005592:	69f8      	ldr	r0, [r7, #28]
 8005594:	f000 f8aa 	bl	80056ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005598:	2301      	movs	r3, #1
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	e002      	b.n	80055a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
 80055a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055a4:	69bb      	ldr	r3, [r7, #24]
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	3b01      	subs	r3, #1
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	617b      	str	r3, [r7, #20]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01f      	beq.n	800563e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	e012      	b.n	800562a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	7819      	ldrb	r1, [r3, #0]
 800560c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	3334      	adds	r3, #52	; 0x34
 8005614:	460a      	mov	r2, r1
 8005616:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d006      	beq.n	8005632 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	3301      	adds	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b0f      	cmp	r3, #15
 800562e:	d9e9      	bls.n	8005604 <prvInitialiseNewTask+0x54>
 8005630:	e000      	b.n	8005634 <prvInitialiseNewTask+0x84>
			{
				break;
 8005632:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800563c:	e003      	b.n	8005646 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	2b06      	cmp	r3, #6
 800564a:	d901      	bls.n	8005650 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800564c:	2306      	movs	r3, #6
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005654:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	2200      	movs	r2, #0
 8005660:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	3304      	adds	r3, #4
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fe6b 	bl	8005342 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	3318      	adds	r3, #24
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fe66 	bl	8005342 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	f1c3 0207 	rsb	r2, r3, #7
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	2200      	movs	r2, #0
 8005698:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	334c      	adds	r3, #76	; 0x4c
 80056a0:	2260      	movs	r2, #96	; 0x60
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f94c 	bl	8006942 <memset>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <prvInitialiseNewTask+0x130>)
 80056ae:	651a      	str	r2, [r3, #80]	; 0x50
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <prvInitialiseNewTask+0x134>)
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <prvInitialiseNewTask+0x138>)
 80056ba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	69b8      	ldr	r0, [r7, #24]
 80056c2:	f000 fc1f 	bl	8005f04 <pxPortInitialiseStack>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d8:	bf00      	nop
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	080072fc 	.word	0x080072fc
 80056e4:	0800731c 	.word	0x0800731c
 80056e8:	080072dc 	.word	0x080072dc

080056ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056f4:	f000 fd36 	bl	8006164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <prvAddNewTaskToReadyList+0xb8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <prvAddNewTaskToReadyList+0xb8>)
 8005700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800570a:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005710:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <prvAddNewTaskToReadyList+0xb8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d110      	bne.n	800573a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005718:	f000 facc 	bl	8005cb4 <prvInitialiseTaskLists>
 800571c:	e00d      	b.n	800573a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800571e:	4b23      	ldr	r3, [pc, #140]	; (80057ac <prvAddNewTaskToReadyList+0xc0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	429a      	cmp	r2, r3
 8005732:	d802      	bhi.n	800573a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005734:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 8005742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	2201      	movs	r2, #1
 800574a:	409a      	lsls	r2, r3
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4313      	orrs	r3, r2
 8005752:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvAddNewTaskToReadyList+0xcc>)
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7ff fdf5 	bl	800535c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005772:	f000 fd27 	bl	80061c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <prvAddNewTaskToReadyList+0xc0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	429a      	cmp	r2, r3
 800578a:	d207      	bcs.n	800579c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <prvAddNewTaskToReadyList+0xd0>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000c0c 	.word	0x20000c0c
 80057a8:	20000b0c 	.word	0x20000b0c
 80057ac:	20000c18 	.word	0x20000c18
 80057b0:	20000c28 	.word	0x20000c28
 80057b4:	20000c14 	.word	0x20000c14
 80057b8:	20000b10 	.word	0x20000b10
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d017      	beq.n	8005802 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <vTaskDelay+0x60>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vTaskDelay+0x30>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	60bb      	str	r3, [r7, #8]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057f0:	f000 f884 	bl	80058fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057f4:	2100      	movs	r1, #0
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb1e 	bl	8005e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057fc:	f000 f88c 	bl	8005918 <xTaskResumeAll>
 8005800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <vTaskDelay+0x64>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000c34 	.word	0x20000c34
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005836:	463a      	mov	r2, r7
 8005838:	1d39      	adds	r1, r7, #4
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f7fa fe48 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	9202      	str	r2, [sp, #8]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	2300      	movs	r3, #0
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	460a      	mov	r2, r1
 8005856:	4921      	ldr	r1, [pc, #132]	; (80058dc <vTaskStartScheduler+0xb4>)
 8005858:	4821      	ldr	r0, [pc, #132]	; (80058e0 <vTaskStartScheduler+0xb8>)
 800585a:	f7ff fe06 	bl	800546a <xTaskCreateStatic>
 800585e:	4603      	mov	r3, r0
 8005860:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <vTaskStartScheduler+0xbc>)
 8005862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005864:	4b1f      	ldr	r3, [pc, #124]	; (80058e4 <vTaskStartScheduler+0xbc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e001      	b.n	8005876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11b      	bne.n	80058b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	613b      	str	r3, [r7, #16]
}
 800588e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005890:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <vTaskStartScheduler+0xc0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	334c      	adds	r3, #76	; 0x4c
 8005896:	4a15      	ldr	r2, [pc, #84]	; (80058ec <vTaskStartScheduler+0xc4>)
 8005898:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <vTaskStartScheduler+0xc8>)
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058a2:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <vTaskStartScheduler+0xcc>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058a8:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <vTaskStartScheduler+0xd0>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ae:	f000 fbb7 	bl	8006020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058b2:	e00e      	b.n	80058d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d10a      	bne.n	80058d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60fb      	str	r3, [r7, #12]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <vTaskStartScheduler+0xa8>
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	0800728c 	.word	0x0800728c
 80058e0:	08005c85 	.word	0x08005c85
 80058e4:	20000c30 	.word	0x20000c30
 80058e8:	20000b0c 	.word	0x20000b0c
 80058ec:	20000010 	.word	0x20000010
 80058f0:	20000c2c 	.word	0x20000c2c
 80058f4:	20000c18 	.word	0x20000c18
 80058f8:	20000c10 	.word	0x20000c10

080058fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <vTaskSuspendAll+0x18>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3301      	adds	r3, #1
 8005906:	4a03      	ldr	r2, [pc, #12]	; (8005914 <vTaskSuspendAll+0x18>)
 8005908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800590a:	bf00      	nop
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000c34 	.word	0x20000c34

08005918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <xTaskResumeAll+0x114>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskResumeAll+0x2c>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	603b      	str	r3, [r7, #0]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005944:	f000 fc0e 	bl	8006164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005948:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <xTaskResumeAll+0x114>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3b01      	subs	r3, #1
 800594e:	4a37      	ldr	r2, [pc, #220]	; (8005a2c <xTaskResumeAll+0x114>)
 8005950:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005952:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <xTaskResumeAll+0x114>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d161      	bne.n	8005a1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800595a:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <xTaskResumeAll+0x118>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d05d      	beq.n	8005a1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005962:	e02e      	b.n	80059c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005964:	4b33      	ldr	r3, [pc, #204]	; (8005a34 <xTaskResumeAll+0x11c>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3318      	adds	r3, #24
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fd50 	bl	8005416 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3304      	adds	r3, #4
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fd4b 	bl	8005416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <xTaskResumeAll+0x120>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <xTaskResumeAll+0x120>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <xTaskResumeAll+0x124>)
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7ff fcd7 	bl	800535c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <xTaskResumeAll+0x128>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059bc:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <xTaskResumeAll+0x12c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xTaskResumeAll+0x11c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1cc      	bne.n	8005964 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059d0:	f000 fa12 	bl	8005df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <xTaskResumeAll+0x130>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d010      	beq.n	8005a02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059e0:	f000 f836 	bl	8005a50 <xTaskIncrementTick>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <xTaskResumeAll+0x12c>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f1      	bne.n	80059e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80059fc:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <xTaskResumeAll+0x130>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <xTaskResumeAll+0x12c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <xTaskResumeAll+0x134>)
 8005a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a1e:	f000 fbd1 	bl	80061c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a22:	68bb      	ldr	r3, [r7, #8]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000c34 	.word	0x20000c34
 8005a30:	20000c0c 	.word	0x20000c0c
 8005a34:	20000bcc 	.word	0x20000bcc
 8005a38:	20000c14 	.word	0x20000c14
 8005a3c:	20000b10 	.word	0x20000b10
 8005a40:	20000b0c 	.word	0x20000b0c
 8005a44:	20000c20 	.word	0x20000c20
 8005a48:	20000c1c 	.word	0x20000c1c
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5a:	4b4e      	ldr	r3, [pc, #312]	; (8005b94 <xTaskIncrementTick+0x144>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 808e 	bne.w	8005b80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a64:	4b4c      	ldr	r3, [pc, #304]	; (8005b98 <xTaskIncrementTick+0x148>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a6c:	4a4a      	ldr	r2, [pc, #296]	; (8005b98 <xTaskIncrementTick+0x148>)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d120      	bne.n	8005aba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a78:	4b48      	ldr	r3, [pc, #288]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	603b      	str	r3, [r7, #0]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xTaskIncrementTick+0x46>
 8005a98:	4b40      	ldr	r3, [pc, #256]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	4b40      	ldr	r3, [pc, #256]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a3e      	ldr	r2, [pc, #248]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4a3e      	ldr	r2, [pc, #248]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4b3d      	ldr	r3, [pc, #244]	; (8005ba4 <xTaskIncrementTick+0x154>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	4a3c      	ldr	r2, [pc, #240]	; (8005ba4 <xTaskIncrementTick+0x154>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	f000 f99f 	bl	8005df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <xTaskIncrementTick+0x158>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d348      	bcc.n	8005b56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac4:	4b35      	ldr	r3, [pc, #212]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <xTaskIncrementTick+0x158>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
					break;
 8005ad6:	e03e      	b.n	8005b56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad8:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d203      	bcs.n	8005af8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005af0:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <xTaskIncrementTick+0x158>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005af6:	e02e      	b.n	8005b56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fc8a 	bl	8005416 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fc81 	bl	8005416 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	4b23      	ldr	r3, [pc, #140]	; (8005bac <xTaskIncrementTick+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	4a22      	ldr	r2, [pc, #136]	; (8005bac <xTaskIncrementTick+0x15c>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <xTaskIncrementTick+0x160>)
 8005b34:	441a      	add	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7ff fc0d 	bl	800535c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b46:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <xTaskIncrementTick+0x164>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d3b9      	bcc.n	8005ac4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b54:	e7b6      	b.n	8005ac4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <xTaskIncrementTick+0x164>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5c:	4914      	ldr	r1, [pc, #80]	; (8005bb0 <xTaskIncrementTick+0x160>)
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d901      	bls.n	8005b72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b72:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <xTaskIncrementTick+0x168>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e004      	b.n	8005b8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b80:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <xTaskIncrementTick+0x16c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	4a0d      	ldr	r2, [pc, #52]	; (8005bbc <xTaskIncrementTick+0x16c>)
 8005b88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b8a:	697b      	ldr	r3, [r7, #20]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000c34 	.word	0x20000c34
 8005b98:	20000c10 	.word	0x20000c10
 8005b9c:	20000bc4 	.word	0x20000bc4
 8005ba0:	20000bc8 	.word	0x20000bc8
 8005ba4:	20000c24 	.word	0x20000c24
 8005ba8:	20000c2c 	.word	0x20000c2c
 8005bac:	20000c14 	.word	0x20000c14
 8005bb0:	20000b10 	.word	0x20000b10
 8005bb4:	20000b0c 	.word	0x20000b0c
 8005bb8:	20000c20 	.word	0x20000c20
 8005bbc:	20000c1c 	.word	0x20000c1c

08005bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bc6:	4b29      	ldr	r3, [pc, #164]	; (8005c6c <vTaskSwitchContext+0xac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bce:	4b28      	ldr	r3, [pc, #160]	; (8005c70 <vTaskSwitchContext+0xb0>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd4:	e044      	b.n	8005c60 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <vTaskSwitchContext+0xb0>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <vTaskSwitchContext+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	fab3 f383 	clz	r3, r3
 8005be8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	f1c3 031f 	rsb	r3, r3, #31
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	4921      	ldr	r1, [pc, #132]	; (8005c78 <vTaskSwitchContext+0xb8>)
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	607b      	str	r3, [r7, #4]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <vTaskSwitchContext+0x5a>
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <vTaskSwitchContext+0xb8>)
 8005c28:	4413      	add	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d104      	bne.n	8005c4c <vTaskSwitchContext+0x8c>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <vTaskSwitchContext+0xbc>)
 8005c54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <vTaskSwitchContext+0xbc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	334c      	adds	r3, #76	; 0x4c
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <vTaskSwitchContext+0xc0>)
 8005c5e:	6013      	str	r3, [r2, #0]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	20000c34 	.word	0x20000c34
 8005c70:	20000c20 	.word	0x20000c20
 8005c74:	20000c14 	.word	0x20000c14
 8005c78:	20000b10 	.word	0x20000b10
 8005c7c:	20000b0c 	.word	0x20000b0c
 8005c80:	20000010 	.word	0x20000010

08005c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c8c:	f000 f852 	bl	8005d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <prvIdleTask+0x28>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d9f9      	bls.n	8005c8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <prvIdleTask+0x2c>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ca8:	e7f0      	b.n	8005c8c <prvIdleTask+0x8>
 8005caa:	bf00      	nop
 8005cac:	20000b10 	.word	0x20000b10
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cba:	2300      	movs	r3, #0
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	e00c      	b.n	8005cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <prvInitialiseTaskLists+0x60>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fb17 	bl	8005302 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b06      	cmp	r3, #6
 8005cde:	d9ef      	bls.n	8005cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ce0:	480d      	ldr	r0, [pc, #52]	; (8005d18 <prvInitialiseTaskLists+0x64>)
 8005ce2:	f7ff fb0e 	bl	8005302 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ce6:	480d      	ldr	r0, [pc, #52]	; (8005d1c <prvInitialiseTaskLists+0x68>)
 8005ce8:	f7ff fb0b 	bl	8005302 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cec:	480c      	ldr	r0, [pc, #48]	; (8005d20 <prvInitialiseTaskLists+0x6c>)
 8005cee:	f7ff fb08 	bl	8005302 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cf2:	480c      	ldr	r0, [pc, #48]	; (8005d24 <prvInitialiseTaskLists+0x70>)
 8005cf4:	f7ff fb05 	bl	8005302 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cf8:	480b      	ldr	r0, [pc, #44]	; (8005d28 <prvInitialiseTaskLists+0x74>)
 8005cfa:	f7ff fb02 	bl	8005302 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <prvInitialiseTaskLists+0x78>)
 8005d00:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <prvInitialiseTaskLists+0x64>)
 8005d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <prvInitialiseTaskLists+0x7c>)
 8005d06:	4a05      	ldr	r2, [pc, #20]	; (8005d1c <prvInitialiseTaskLists+0x68>)
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000b10 	.word	0x20000b10
 8005d18:	20000b9c 	.word	0x20000b9c
 8005d1c:	20000bb0 	.word	0x20000bb0
 8005d20:	20000bcc 	.word	0x20000bcc
 8005d24:	20000be0 	.word	0x20000be0
 8005d28:	20000bf8 	.word	0x20000bf8
 8005d2c:	20000bc4 	.word	0x20000bc4
 8005d30:	20000bc8 	.word	0x20000bc8

08005d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d3a:	e019      	b.n	8005d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d3c:	f000 fa12 	bl	8006164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <prvCheckTasksWaitingTermination+0x50>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fb62 	bl	8005416 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <prvCheckTasksWaitingTermination+0x54>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	4a0b      	ldr	r2, [pc, #44]	; (8005d88 <prvCheckTasksWaitingTermination+0x54>)
 8005d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <prvCheckTasksWaitingTermination+0x58>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <prvCheckTasksWaitingTermination+0x58>)
 8005d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d66:	f000 fa2d 	bl	80061c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f810 	bl	8005d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <prvCheckTasksWaitingTermination+0x58>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e1      	bne.n	8005d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000be0 	.word	0x20000be0
 8005d88:	20000c0c 	.word	0x20000c0c
 8005d8c:	20000bf4 	.word	0x20000bf4

08005d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	334c      	adds	r3, #76	; 0x4c
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fef1 	bl	8006b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 fb85 	bl	80064c0 <vPortFree>
				vPortFree( pxTCB );
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fb82 	bl	80064c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dbc:	e018      	b.n	8005df0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d103      	bne.n	8005dd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fb79 	bl	80064c0 <vPortFree>
	}
 8005dce:	e00f      	b.n	8005df0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d00a      	beq.n	8005df0 <prvDeleteTCB+0x60>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60fb      	str	r3, [r7, #12]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <prvDeleteTCB+0x5e>
	}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <prvResetNextTaskUnblockTime+0x38>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <prvResetNextTaskUnblockTime+0x3c>)
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e10:	e008      	b.n	8005e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <prvResetNextTaskUnblockTime+0x38>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <prvResetNextTaskUnblockTime+0x3c>)
 8005e22:	6013      	str	r3, [r2, #0]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000bc4 	.word	0x20000bc4
 8005e34:	20000c2c 	.word	0x20000c2c

08005e38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e48:	4b28      	ldr	r3, [pc, #160]	; (8005eec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fae1 	bl	8005416 <uxListRemove>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	2201      	movs	r2, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43da      	mvns	r2, r3
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	4a20      	ldr	r2, [pc, #128]	; (8005ef0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d10a      	bne.n	8005e90 <prvAddCurrentTaskToDelayedList+0x58>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	481a      	ldr	r0, [pc, #104]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e8a:	f7ff fa67 	bl	800535c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e8e:	e026      	b.n	8005ede <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d209      	bcs.n	8005ebc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea8:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7ff fa75 	bl	80053a4 <vListInsert>
}
 8005eba:	e010      	b.n	8005ede <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7ff fa6b 	bl	80053a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d202      	bcs.n	8005ede <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6013      	str	r3, [r2, #0]
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000c10 	.word	0x20000c10
 8005eec:	20000b0c 	.word	0x20000b0c
 8005ef0:	20000c14 	.word	0x20000c14
 8005ef4:	20000bf8 	.word	0x20000bf8
 8005ef8:	20000bc8 	.word	0x20000bc8
 8005efc:	20000bc4 	.word	0x20000bc4
 8005f00:	20000c2c 	.word	0x20000c2c

08005f04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3b04      	subs	r3, #4
 8005f14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f34:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <pxPortInitialiseStack+0x64>)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3b14      	subs	r3, #20
 8005f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f06f 0202 	mvn.w	r2, #2
 8005f52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3b20      	subs	r3, #32
 8005f58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	08005f6d 	.word	0x08005f6d

08005f6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <prvTaskExitError+0x54>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d00a      	beq.n	8005f96 <prvTaskExitError+0x2a>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60fb      	str	r3, [r7, #12]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <prvTaskExitError+0x28>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60bb      	str	r3, [r7, #8]
}
 8005fa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005faa:	bf00      	nop
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0fc      	beq.n	8005fac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	2000000c 	.word	0x2000000c
	...

08005fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <pxCurrentTCBConst2>)
 8005fd2:	6819      	ldr	r1, [r3, #0]
 8005fd4:	6808      	ldr	r0, [r1, #0]
 8005fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fda:	f380 8809 	msr	PSP, r0
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f380 8811 	msr	BASEPRI, r0
 8005fea:	4770      	bx	lr
 8005fec:	f3af 8000 	nop.w

08005ff0 <pxCurrentTCBConst2>:
 8005ff0:	20000b0c 	.word	0x20000b0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop

08005ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ff8:	4808      	ldr	r0, [pc, #32]	; (800601c <prvPortStartFirstTask+0x24>)
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	6800      	ldr	r0, [r0, #0]
 8005ffe:	f380 8808 	msr	MSP, r0
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8814 	msr	CONTROL, r0
 800600a:	b662      	cpsie	i
 800600c:	b661      	cpsie	f
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	df00      	svc	0
 8006018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800601a:	bf00      	nop
 800601c:	e000ed08 	.word	0xe000ed08

08006020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006026:	4b46      	ldr	r3, [pc, #280]	; (8006140 <xPortStartScheduler+0x120>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a46      	ldr	r2, [pc, #280]	; (8006144 <xPortStartScheduler+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10a      	bne.n	8006046 <xPortStartScheduler+0x26>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	613b      	str	r3, [r7, #16]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006046:	4b3e      	ldr	r3, [pc, #248]	; (8006140 <xPortStartScheduler+0x120>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a3f      	ldr	r2, [pc, #252]	; (8006148 <xPortStartScheduler+0x128>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d10a      	bne.n	8006066 <xPortStartScheduler+0x46>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	60fb      	str	r3, [r7, #12]
}
 8006062:	bf00      	nop
 8006064:	e7fe      	b.n	8006064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006066:	4b39      	ldr	r3, [pc, #228]	; (800614c <xPortStartScheduler+0x12c>)
 8006068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b31      	ldr	r3, [pc, #196]	; (8006150 <xPortStartScheduler+0x130>)
 800608c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <xPortStartScheduler+0x134>)
 8006090:	2207      	movs	r2, #7
 8006092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006094:	e009      	b.n	80060aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006096:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <xPortStartScheduler+0x134>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3b01      	subs	r3, #1
 800609c:	4a2d      	ldr	r2, [pc, #180]	; (8006154 <xPortStartScheduler+0x134>)
 800609e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b80      	cmp	r3, #128	; 0x80
 80060b4:	d0ef      	beq.n	8006096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <xPortStartScheduler+0x134>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f1c3 0307 	rsb	r3, r3, #7
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d00a      	beq.n	80060d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60bb      	str	r3, [r7, #8]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060d8:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <xPortStartScheduler+0x134>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <xPortStartScheduler+0x134>)
 80060e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <xPortStartScheduler+0x134>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ea:	4a1a      	ldr	r2, [pc, #104]	; (8006154 <xPortStartScheduler+0x134>)
 80060ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060f6:	4b18      	ldr	r3, [pc, #96]	; (8006158 <xPortStartScheduler+0x138>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <xPortStartScheduler+0x138>)
 80060fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <xPortStartScheduler+0x138>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a14      	ldr	r2, [pc, #80]	; (8006158 <xPortStartScheduler+0x138>)
 8006108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800610c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800610e:	f000 f8dd 	bl	80062cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006112:	4b12      	ldr	r3, [pc, #72]	; (800615c <xPortStartScheduler+0x13c>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006118:	f000 f8fc 	bl	8006314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800611c:	4b10      	ldr	r3, [pc, #64]	; (8006160 <xPortStartScheduler+0x140>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <xPortStartScheduler+0x140>)
 8006122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006128:	f7ff ff66 	bl	8005ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800612c:	f7ff fd48 	bl	8005bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8006130:	f7ff ff1c 	bl	8005f6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	e000ed00 	.word	0xe000ed00
 8006144:	410fc271 	.word	0x410fc271
 8006148:	410fc270 	.word	0x410fc270
 800614c:	e000e400 	.word	0xe000e400
 8006150:	20000c38 	.word	0x20000c38
 8006154:	20000c3c 	.word	0x20000c3c
 8006158:	e000ed20 	.word	0xe000ed20
 800615c:	2000000c 	.word	0x2000000c
 8006160:	e000ef34 	.word	0xe000ef34

08006164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	607b      	str	r3, [r7, #4]
}
 800617c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <vPortEnterCritical+0x58>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <vPortEnterCritical+0x58>)
 8006186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <vPortEnterCritical+0x58>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10f      	bne.n	80061b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <vPortEnterCritical+0x5c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	603b      	str	r3, [r7, #0]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <vPortEnterCritical+0x4a>
	}
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	2000000c 	.word	0x2000000c
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <vPortExitCritical+0x50>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <vPortExitCritical+0x24>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	607b      	str	r3, [r7, #4]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <vPortExitCritical+0x50>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	4a09      	ldr	r2, [pc, #36]	; (8006214 <vPortExitCritical+0x50>)
 80061f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <vPortExitCritical+0x50>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <vPortExitCritical+0x42>
 80061fa:	2300      	movs	r3, #0
 80061fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	2000000c 	.word	0x2000000c
	...

08006220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006220:	f3ef 8009 	mrs	r0, PSP
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	4b15      	ldr	r3, [pc, #84]	; (8006280 <pxCurrentTCBConst>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	f01e 0f10 	tst.w	lr, #16
 8006230:	bf08      	it	eq
 8006232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623a:	6010      	str	r0, [r2, #0]
 800623c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006244:	f380 8811 	msr	BASEPRI, r0
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f7ff fcb6 	bl	8005bc0 <vTaskSwitchContext>
 8006254:	f04f 0000 	mov.w	r0, #0
 8006258:	f380 8811 	msr	BASEPRI, r0
 800625c:	bc09      	pop	{r0, r3}
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	6808      	ldr	r0, [r1, #0]
 8006262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006266:	f01e 0f10 	tst.w	lr, #16
 800626a:	bf08      	it	eq
 800626c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006270:	f380 8809 	msr	PSP, r0
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	f3af 8000 	nop.w

08006280 <pxCurrentTCBConst>:
 8006280:	20000b0c 	.word	0x20000b0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop

08006288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062a2:	f7ff fbd5 	bl	8005a50 <xTaskIncrementTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <SysTick_Handler+0x40>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	2300      	movs	r3, #0
 80062b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f383 8811 	msr	BASEPRI, r3
}
 80062be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <vPortSetupTimerInterrupt+0x34>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <vPortSetupTimerInterrupt+0x38>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <vPortSetupTimerInterrupt+0x3c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a0a      	ldr	r2, [pc, #40]	; (800630c <vPortSetupTimerInterrupt+0x40>)
 80062e2:	fba2 2303 	umull	r2, r3, r2, r3
 80062e6:	099b      	lsrs	r3, r3, #6
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <vPortSetupTimerInterrupt+0x44>)
 80062ea:	3b01      	subs	r3, #1
 80062ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ee:	4b04      	ldr	r3, [pc, #16]	; (8006300 <vPortSetupTimerInterrupt+0x34>)
 80062f0:	2207      	movs	r2, #7
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	e000e010 	.word	0xe000e010
 8006304:	e000e018 	.word	0xe000e018
 8006308:	20000000 	.word	0x20000000
 800630c:	10624dd3 	.word	0x10624dd3
 8006310:	e000e014 	.word	0xe000e014

08006314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006324 <vPortEnableVFP+0x10>
 8006318:	6801      	ldr	r1, [r0, #0]
 800631a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800631e:	6001      	str	r1, [r0, #0]
 8006320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006322:	bf00      	nop
 8006324:	e000ed88 	.word	0xe000ed88

08006328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006334:	f7ff fae2 	bl	80058fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006338:	4b5b      	ldr	r3, [pc, #364]	; (80064a8 <pvPortMalloc+0x180>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006340:	f000 f920 	bl	8006584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006344:	4b59      	ldr	r3, [pc, #356]	; (80064ac <pvPortMalloc+0x184>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 8093 	bne.w	8006478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01d      	beq.n	8006394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006358:	2208      	movs	r2, #8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	2b00      	cmp	r3, #0
 8006368:	d014      	beq.n	8006394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f023 0307 	bic.w	r3, r3, #7
 8006370:	3308      	adds	r3, #8
 8006372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <pvPortMalloc+0x6c>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	617b      	str	r3, [r7, #20]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06e      	beq.n	8006478 <pvPortMalloc+0x150>
 800639a:	4b45      	ldr	r3, [pc, #276]	; (80064b0 <pvPortMalloc+0x188>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d869      	bhi.n	8006478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063a4:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <pvPortMalloc+0x18c>)
 80063a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063a8:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <pvPortMalloc+0x18c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ae:	e004      	b.n	80063ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d903      	bls.n	80063cc <pvPortMalloc+0xa4>
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f1      	bne.n	80063b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <pvPortMalloc+0x180>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d050      	beq.n	8006478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2208      	movs	r2, #8
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	2308      	movs	r3, #8
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d91f      	bls.n	8006438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <pvPortMalloc+0xf8>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	613b      	str	r3, [r7, #16]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006432:	69b8      	ldr	r0, [r7, #24]
 8006434:	f000 f908 	bl	8006648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006438:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <pvPortMalloc+0x188>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <pvPortMalloc+0x188>)
 8006444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006446:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <pvPortMalloc+0x188>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <pvPortMalloc+0x190>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d203      	bcs.n	800645a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006452:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <pvPortMalloc+0x188>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <pvPortMalloc+0x190>)
 8006458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <pvPortMalloc+0x184>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	431a      	orrs	r2, r3
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <pvPortMalloc+0x194>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	4a11      	ldr	r2, [pc, #68]	; (80064bc <pvPortMalloc+0x194>)
 8006476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006478:	f7ff fa4e 	bl	8005918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <pvPortMalloc+0x174>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60fb      	str	r3, [r7, #12]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <pvPortMalloc+0x172>
	return pvReturn;
 800649c:	69fb      	ldr	r3, [r7, #28]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3728      	adds	r7, #40	; 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20001800 	.word	0x20001800
 80064ac:	20001814 	.word	0x20001814
 80064b0:	20001804 	.word	0x20001804
 80064b4:	200017f8 	.word	0x200017f8
 80064b8:	20001808 	.word	0x20001808
 80064bc:	2000180c 	.word	0x2000180c

080064c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04d      	beq.n	800656e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064d2:	2308      	movs	r3, #8
 80064d4:	425b      	negs	r3, r3
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <vPortFree+0xb8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <vPortFree+0x44>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <vPortFree+0x62>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	60bb      	str	r3, [r7, #8]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <vPortFree+0xb8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01e      	beq.n	800656e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11a      	bne.n	800656e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <vPortFree+0xb8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006548:	f7ff f9d8 	bl	80058fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <vPortFree+0xbc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4413      	add	r3, r2
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <vPortFree+0xbc>)
 8006558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f000 f874 	bl	8006648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006560:	4b07      	ldr	r3, [pc, #28]	; (8006580 <vPortFree+0xc0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a06      	ldr	r2, [pc, #24]	; (8006580 <vPortFree+0xc0>)
 8006568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800656a:	f7ff f9d5 	bl	8005918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20001814 	.word	0x20001814
 800657c:	20001804 	.word	0x20001804
 8006580:	20001810 	.word	0x20001810

08006584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800658a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800658e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006590:	4b27      	ldr	r3, [pc, #156]	; (8006630 <prvHeapInit+0xac>)
 8006592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3307      	adds	r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	4a1f      	ldr	r2, [pc, #124]	; (8006630 <prvHeapInit+0xac>)
 80065b4:	4413      	add	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <prvHeapInit+0xb0>)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065c2:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <prvHeapInit+0xb0>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	4413      	add	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065d0:	2208      	movs	r2, #8
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0307 	bic.w	r3, r3, #7
 80065de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a15      	ldr	r2, [pc, #84]	; (8006638 <prvHeapInit+0xb4>)
 80065e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <prvHeapInit+0xb4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <prvHeapInit+0xb4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006604:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <prvHeapInit+0xb4>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <prvHeapInit+0xb8>)
 8006612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <prvHeapInit+0xbc>)
 800661a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <prvHeapInit+0xc0>)
 800661e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	20000c40 	.word	0x20000c40
 8006634:	200017f8 	.word	0x200017f8
 8006638:	20001800 	.word	0x20001800
 800663c:	20001808 	.word	0x20001808
 8006640:	20001804 	.word	0x20001804
 8006644:	20001814 	.word	0x20001814

08006648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006650:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <prvInsertBlockIntoFreeList+0xac>)
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e002      	b.n	800665c <prvInsertBlockIntoFreeList+0x14>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d8f7      	bhi.n	8006656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4413      	add	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d108      	bne.n	800668a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d118      	bne.n	80066d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <prvInsertBlockIntoFreeList+0xb0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d00d      	beq.n	80066c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e008      	b.n	80066d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvInsertBlockIntoFreeList+0xb0>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	e003      	b.n	80066d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d002      	beq.n	80066e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200017f8 	.word	0x200017f8
 80066f8:	20001800 	.word	0x20001800

080066fc <__errno>:
 80066fc:	4b01      	ldr	r3, [pc, #4]	; (8006704 <__errno+0x8>)
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20000010 	.word	0x20000010

08006708 <std>:
 8006708:	2300      	movs	r3, #0
 800670a:	b510      	push	{r4, lr}
 800670c:	4604      	mov	r4, r0
 800670e:	e9c0 3300 	strd	r3, r3, [r0]
 8006712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006716:	6083      	str	r3, [r0, #8]
 8006718:	8181      	strh	r1, [r0, #12]
 800671a:	6643      	str	r3, [r0, #100]	; 0x64
 800671c:	81c2      	strh	r2, [r0, #14]
 800671e:	6183      	str	r3, [r0, #24]
 8006720:	4619      	mov	r1, r3
 8006722:	2208      	movs	r2, #8
 8006724:	305c      	adds	r0, #92	; 0x5c
 8006726:	f000 f90c 	bl	8006942 <memset>
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <std+0x38>)
 800672c:	6263      	str	r3, [r4, #36]	; 0x24
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <std+0x3c>)
 8006730:	62a3      	str	r3, [r4, #40]	; 0x28
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <std+0x40>)
 8006734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <std+0x44>)
 8006738:	6224      	str	r4, [r4, #32]
 800673a:	6323      	str	r3, [r4, #48]	; 0x30
 800673c:	bd10      	pop	{r4, pc}
 800673e:	bf00      	nop
 8006740:	08006c5d 	.word	0x08006c5d
 8006744:	08006c7f 	.word	0x08006c7f
 8006748:	08006cb7 	.word	0x08006cb7
 800674c:	08006cdb 	.word	0x08006cdb

08006750 <_cleanup_r>:
 8006750:	4901      	ldr	r1, [pc, #4]	; (8006758 <_cleanup_r+0x8>)
 8006752:	f000 b8af 	b.w	80068b4 <_fwalk_reent>
 8006756:	bf00      	nop
 8006758:	08006fb5 	.word	0x08006fb5

0800675c <__sfmoreglue>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	2268      	movs	r2, #104	; 0x68
 8006760:	1e4d      	subs	r5, r1, #1
 8006762:	4355      	muls	r5, r2
 8006764:	460e      	mov	r6, r1
 8006766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800676a:	f000 f913 	bl	8006994 <_malloc_r>
 800676e:	4604      	mov	r4, r0
 8006770:	b140      	cbz	r0, 8006784 <__sfmoreglue+0x28>
 8006772:	2100      	movs	r1, #0
 8006774:	e9c0 1600 	strd	r1, r6, [r0]
 8006778:	300c      	adds	r0, #12
 800677a:	60a0      	str	r0, [r4, #8]
 800677c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006780:	f000 f8df 	bl	8006942 <memset>
 8006784:	4620      	mov	r0, r4
 8006786:	bd70      	pop	{r4, r5, r6, pc}

08006788 <__sfp_lock_acquire>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__sfp_lock_acquire+0x8>)
 800678a:	f000 b8d8 	b.w	800693e <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	20001819 	.word	0x20001819

08006794 <__sfp_lock_release>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__sfp_lock_release+0x8>)
 8006796:	f000 b8d3 	b.w	8006940 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	20001819 	.word	0x20001819

080067a0 <__sinit_lock_acquire>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__sinit_lock_acquire+0x8>)
 80067a2:	f000 b8cc 	b.w	800693e <__retarget_lock_acquire_recursive>
 80067a6:	bf00      	nop
 80067a8:	2000181a 	.word	0x2000181a

080067ac <__sinit_lock_release>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__sinit_lock_release+0x8>)
 80067ae:	f000 b8c7 	b.w	8006940 <__retarget_lock_release_recursive>
 80067b2:	bf00      	nop
 80067b4:	2000181a 	.word	0x2000181a

080067b8 <__sinit>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	4604      	mov	r4, r0
 80067bc:	f7ff fff0 	bl	80067a0 <__sinit_lock_acquire>
 80067c0:	69a3      	ldr	r3, [r4, #24]
 80067c2:	b11b      	cbz	r3, 80067cc <__sinit+0x14>
 80067c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c8:	f7ff bff0 	b.w	80067ac <__sinit_lock_release>
 80067cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067d0:	6523      	str	r3, [r4, #80]	; 0x50
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <__sinit+0x68>)
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <__sinit+0x6c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80067da:	42a3      	cmp	r3, r4
 80067dc:	bf04      	itt	eq
 80067de:	2301      	moveq	r3, #1
 80067e0:	61a3      	streq	r3, [r4, #24]
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 f820 	bl	8006828 <__sfp>
 80067e8:	6060      	str	r0, [r4, #4]
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 f81c 	bl	8006828 <__sfp>
 80067f0:	60a0      	str	r0, [r4, #8]
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 f818 	bl	8006828 <__sfp>
 80067f8:	2200      	movs	r2, #0
 80067fa:	60e0      	str	r0, [r4, #12]
 80067fc:	2104      	movs	r1, #4
 80067fe:	6860      	ldr	r0, [r4, #4]
 8006800:	f7ff ff82 	bl	8006708 <std>
 8006804:	68a0      	ldr	r0, [r4, #8]
 8006806:	2201      	movs	r2, #1
 8006808:	2109      	movs	r1, #9
 800680a:	f7ff ff7d 	bl	8006708 <std>
 800680e:	68e0      	ldr	r0, [r4, #12]
 8006810:	2202      	movs	r2, #2
 8006812:	2112      	movs	r1, #18
 8006814:	f7ff ff78 	bl	8006708 <std>
 8006818:	2301      	movs	r3, #1
 800681a:	61a3      	str	r3, [r4, #24]
 800681c:	e7d2      	b.n	80067c4 <__sinit+0xc>
 800681e:	bf00      	nop
 8006820:	0800733c 	.word	0x0800733c
 8006824:	08006751 	.word	0x08006751

08006828 <__sfp>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	4607      	mov	r7, r0
 800682c:	f7ff ffac 	bl	8006788 <__sfp_lock_acquire>
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <__sfp+0x84>)
 8006832:	681e      	ldr	r6, [r3, #0]
 8006834:	69b3      	ldr	r3, [r6, #24]
 8006836:	b913      	cbnz	r3, 800683e <__sfp+0x16>
 8006838:	4630      	mov	r0, r6
 800683a:	f7ff ffbd 	bl	80067b8 <__sinit>
 800683e:	3648      	adds	r6, #72	; 0x48
 8006840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006844:	3b01      	subs	r3, #1
 8006846:	d503      	bpl.n	8006850 <__sfp+0x28>
 8006848:	6833      	ldr	r3, [r6, #0]
 800684a:	b30b      	cbz	r3, 8006890 <__sfp+0x68>
 800684c:	6836      	ldr	r6, [r6, #0]
 800684e:	e7f7      	b.n	8006840 <__sfp+0x18>
 8006850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006854:	b9d5      	cbnz	r5, 800688c <__sfp+0x64>
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <__sfp+0x88>)
 8006858:	60e3      	str	r3, [r4, #12]
 800685a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800685e:	6665      	str	r5, [r4, #100]	; 0x64
 8006860:	f000 f86c 	bl	800693c <__retarget_lock_init_recursive>
 8006864:	f7ff ff96 	bl	8006794 <__sfp_lock_release>
 8006868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800686c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006870:	6025      	str	r5, [r4, #0]
 8006872:	61a5      	str	r5, [r4, #24]
 8006874:	2208      	movs	r2, #8
 8006876:	4629      	mov	r1, r5
 8006878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800687c:	f000 f861 	bl	8006942 <memset>
 8006880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006888:	4620      	mov	r0, r4
 800688a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800688c:	3468      	adds	r4, #104	; 0x68
 800688e:	e7d9      	b.n	8006844 <__sfp+0x1c>
 8006890:	2104      	movs	r1, #4
 8006892:	4638      	mov	r0, r7
 8006894:	f7ff ff62 	bl	800675c <__sfmoreglue>
 8006898:	4604      	mov	r4, r0
 800689a:	6030      	str	r0, [r6, #0]
 800689c:	2800      	cmp	r0, #0
 800689e:	d1d5      	bne.n	800684c <__sfp+0x24>
 80068a0:	f7ff ff78 	bl	8006794 <__sfp_lock_release>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	e7ee      	b.n	8006888 <__sfp+0x60>
 80068aa:	bf00      	nop
 80068ac:	0800733c 	.word	0x0800733c
 80068b0:	ffff0001 	.word	0xffff0001

080068b4 <_fwalk_reent>:
 80068b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b8:	4606      	mov	r6, r0
 80068ba:	4688      	mov	r8, r1
 80068bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068c0:	2700      	movs	r7, #0
 80068c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068c6:	f1b9 0901 	subs.w	r9, r9, #1
 80068ca:	d505      	bpl.n	80068d8 <_fwalk_reent+0x24>
 80068cc:	6824      	ldr	r4, [r4, #0]
 80068ce:	2c00      	cmp	r4, #0
 80068d0:	d1f7      	bne.n	80068c2 <_fwalk_reent+0xe>
 80068d2:	4638      	mov	r0, r7
 80068d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d8:	89ab      	ldrh	r3, [r5, #12]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d907      	bls.n	80068ee <_fwalk_reent+0x3a>
 80068de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068e2:	3301      	adds	r3, #1
 80068e4:	d003      	beq.n	80068ee <_fwalk_reent+0x3a>
 80068e6:	4629      	mov	r1, r5
 80068e8:	4630      	mov	r0, r6
 80068ea:	47c0      	blx	r8
 80068ec:	4307      	orrs	r7, r0
 80068ee:	3568      	adds	r5, #104	; 0x68
 80068f0:	e7e9      	b.n	80068c6 <_fwalk_reent+0x12>
	...

080068f4 <__libc_init_array>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	4d0d      	ldr	r5, [pc, #52]	; (800692c <__libc_init_array+0x38>)
 80068f8:	4c0d      	ldr	r4, [pc, #52]	; (8006930 <__libc_init_array+0x3c>)
 80068fa:	1b64      	subs	r4, r4, r5
 80068fc:	10a4      	asrs	r4, r4, #2
 80068fe:	2600      	movs	r6, #0
 8006900:	42a6      	cmp	r6, r4
 8006902:	d109      	bne.n	8006918 <__libc_init_array+0x24>
 8006904:	4d0b      	ldr	r5, [pc, #44]	; (8006934 <__libc_init_array+0x40>)
 8006906:	4c0c      	ldr	r4, [pc, #48]	; (8006938 <__libc_init_array+0x44>)
 8006908:	f000 fc94 	bl	8007234 <_init>
 800690c:	1b64      	subs	r4, r4, r5
 800690e:	10a4      	asrs	r4, r4, #2
 8006910:	2600      	movs	r6, #0
 8006912:	42a6      	cmp	r6, r4
 8006914:	d105      	bne.n	8006922 <__libc_init_array+0x2e>
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	f855 3b04 	ldr.w	r3, [r5], #4
 800691c:	4798      	blx	r3
 800691e:	3601      	adds	r6, #1
 8006920:	e7ee      	b.n	8006900 <__libc_init_array+0xc>
 8006922:	f855 3b04 	ldr.w	r3, [r5], #4
 8006926:	4798      	blx	r3
 8006928:	3601      	adds	r6, #1
 800692a:	e7f2      	b.n	8006912 <__libc_init_array+0x1e>
 800692c:	08007348 	.word	0x08007348
 8006930:	08007348 	.word	0x08007348
 8006934:	08007348 	.word	0x08007348
 8006938:	0800734c 	.word	0x0800734c

0800693c <__retarget_lock_init_recursive>:
 800693c:	4770      	bx	lr

0800693e <__retarget_lock_acquire_recursive>:
 800693e:	4770      	bx	lr

08006940 <__retarget_lock_release_recursive>:
 8006940:	4770      	bx	lr

08006942 <memset>:
 8006942:	4402      	add	r2, r0
 8006944:	4603      	mov	r3, r0
 8006946:	4293      	cmp	r3, r2
 8006948:	d100      	bne.n	800694c <memset+0xa>
 800694a:	4770      	bx	lr
 800694c:	f803 1b01 	strb.w	r1, [r3], #1
 8006950:	e7f9      	b.n	8006946 <memset+0x4>
	...

08006954 <sbrk_aligned>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4e0e      	ldr	r6, [pc, #56]	; (8006990 <sbrk_aligned+0x3c>)
 8006958:	460c      	mov	r4, r1
 800695a:	6831      	ldr	r1, [r6, #0]
 800695c:	4605      	mov	r5, r0
 800695e:	b911      	cbnz	r1, 8006966 <sbrk_aligned+0x12>
 8006960:	f000 f96c 	bl	8006c3c <_sbrk_r>
 8006964:	6030      	str	r0, [r6, #0]
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f000 f967 	bl	8006c3c <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d00a      	beq.n	8006988 <sbrk_aligned+0x34>
 8006972:	1cc4      	adds	r4, r0, #3
 8006974:	f024 0403 	bic.w	r4, r4, #3
 8006978:	42a0      	cmp	r0, r4
 800697a:	d007      	beq.n	800698c <sbrk_aligned+0x38>
 800697c:	1a21      	subs	r1, r4, r0
 800697e:	4628      	mov	r0, r5
 8006980:	f000 f95c 	bl	8006c3c <_sbrk_r>
 8006984:	3001      	adds	r0, #1
 8006986:	d101      	bne.n	800698c <sbrk_aligned+0x38>
 8006988:	f04f 34ff 	mov.w	r4, #4294967295
 800698c:	4620      	mov	r0, r4
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	20001820 	.word	0x20001820

08006994 <_malloc_r>:
 8006994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006998:	1ccd      	adds	r5, r1, #3
 800699a:	f025 0503 	bic.w	r5, r5, #3
 800699e:	3508      	adds	r5, #8
 80069a0:	2d0c      	cmp	r5, #12
 80069a2:	bf38      	it	cc
 80069a4:	250c      	movcc	r5, #12
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	4607      	mov	r7, r0
 80069aa:	db01      	blt.n	80069b0 <_malloc_r+0x1c>
 80069ac:	42a9      	cmp	r1, r5
 80069ae:	d905      	bls.n	80069bc <_malloc_r+0x28>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	2600      	movs	r6, #0
 80069b6:	4630      	mov	r0, r6
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069bc:	4e2e      	ldr	r6, [pc, #184]	; (8006a78 <_malloc_r+0xe4>)
 80069be:	f000 fbad 	bl	800711c <__malloc_lock>
 80069c2:	6833      	ldr	r3, [r6, #0]
 80069c4:	461c      	mov	r4, r3
 80069c6:	bb34      	cbnz	r4, 8006a16 <_malloc_r+0x82>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4638      	mov	r0, r7
 80069cc:	f7ff ffc2 	bl	8006954 <sbrk_aligned>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	4604      	mov	r4, r0
 80069d4:	d14d      	bne.n	8006a72 <_malloc_r+0xde>
 80069d6:	6834      	ldr	r4, [r6, #0]
 80069d8:	4626      	mov	r6, r4
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d140      	bne.n	8006a60 <_malloc_r+0xcc>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	4631      	mov	r1, r6
 80069e2:	4638      	mov	r0, r7
 80069e4:	eb04 0803 	add.w	r8, r4, r3
 80069e8:	f000 f928 	bl	8006c3c <_sbrk_r>
 80069ec:	4580      	cmp	r8, r0
 80069ee:	d13a      	bne.n	8006a66 <_malloc_r+0xd2>
 80069f0:	6821      	ldr	r1, [r4, #0]
 80069f2:	3503      	adds	r5, #3
 80069f4:	1a6d      	subs	r5, r5, r1
 80069f6:	f025 0503 	bic.w	r5, r5, #3
 80069fa:	3508      	adds	r5, #8
 80069fc:	2d0c      	cmp	r5, #12
 80069fe:	bf38      	it	cc
 8006a00:	250c      	movcc	r5, #12
 8006a02:	4629      	mov	r1, r5
 8006a04:	4638      	mov	r0, r7
 8006a06:	f7ff ffa5 	bl	8006954 <sbrk_aligned>
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d02b      	beq.n	8006a66 <_malloc_r+0xd2>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	442b      	add	r3, r5
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	e00e      	b.n	8006a34 <_malloc_r+0xa0>
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	1b52      	subs	r2, r2, r5
 8006a1a:	d41e      	bmi.n	8006a5a <_malloc_r+0xc6>
 8006a1c:	2a0b      	cmp	r2, #11
 8006a1e:	d916      	bls.n	8006a4e <_malloc_r+0xba>
 8006a20:	1961      	adds	r1, r4, r5
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	6025      	str	r5, [r4, #0]
 8006a26:	bf18      	it	ne
 8006a28:	6059      	strne	r1, [r3, #4]
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	bf08      	it	eq
 8006a2e:	6031      	streq	r1, [r6, #0]
 8006a30:	5162      	str	r2, [r4, r5]
 8006a32:	604b      	str	r3, [r1, #4]
 8006a34:	4638      	mov	r0, r7
 8006a36:	f104 060b 	add.w	r6, r4, #11
 8006a3a:	f000 fb75 	bl	8007128 <__malloc_unlock>
 8006a3e:	f026 0607 	bic.w	r6, r6, #7
 8006a42:	1d23      	adds	r3, r4, #4
 8006a44:	1af2      	subs	r2, r6, r3
 8006a46:	d0b6      	beq.n	80069b6 <_malloc_r+0x22>
 8006a48:	1b9b      	subs	r3, r3, r6
 8006a4a:	50a3      	str	r3, [r4, r2]
 8006a4c:	e7b3      	b.n	80069b6 <_malloc_r+0x22>
 8006a4e:	6862      	ldr	r2, [r4, #4]
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	bf0c      	ite	eq
 8006a54:	6032      	streq	r2, [r6, #0]
 8006a56:	605a      	strne	r2, [r3, #4]
 8006a58:	e7ec      	b.n	8006a34 <_malloc_r+0xa0>
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	6864      	ldr	r4, [r4, #4]
 8006a5e:	e7b2      	b.n	80069c6 <_malloc_r+0x32>
 8006a60:	4634      	mov	r4, r6
 8006a62:	6876      	ldr	r6, [r6, #4]
 8006a64:	e7b9      	b.n	80069da <_malloc_r+0x46>
 8006a66:	230c      	movs	r3, #12
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f000 fb5c 	bl	8007128 <__malloc_unlock>
 8006a70:	e7a1      	b.n	80069b6 <_malloc_r+0x22>
 8006a72:	6025      	str	r5, [r4, #0]
 8006a74:	e7de      	b.n	8006a34 <_malloc_r+0xa0>
 8006a76:	bf00      	nop
 8006a78:	2000181c 	.word	0x2000181c

08006a7c <_puts_r>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	460e      	mov	r6, r1
 8006a80:	4605      	mov	r5, r0
 8006a82:	b118      	cbz	r0, 8006a8c <_puts_r+0x10>
 8006a84:	6983      	ldr	r3, [r0, #24]
 8006a86:	b90b      	cbnz	r3, 8006a8c <_puts_r+0x10>
 8006a88:	f7ff fe96 	bl	80067b8 <__sinit>
 8006a8c:	69ab      	ldr	r3, [r5, #24]
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	b913      	cbnz	r3, 8006a98 <_puts_r+0x1c>
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7ff fe90 	bl	80067b8 <__sinit>
 8006a98:	4b2c      	ldr	r3, [pc, #176]	; (8006b4c <_puts_r+0xd0>)
 8006a9a:	429c      	cmp	r4, r3
 8006a9c:	d120      	bne.n	8006ae0 <_puts_r+0x64>
 8006a9e:	686c      	ldr	r4, [r5, #4]
 8006aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa2:	07db      	lsls	r3, r3, #31
 8006aa4:	d405      	bmi.n	8006ab2 <_puts_r+0x36>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	0598      	lsls	r0, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <_puts_r+0x36>
 8006aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aae:	f7ff ff46 	bl	800693e <__retarget_lock_acquire_recursive>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	0719      	lsls	r1, r3, #28
 8006ab6:	d51d      	bpl.n	8006af4 <_puts_r+0x78>
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	b1db      	cbz	r3, 8006af4 <_puts_r+0x78>
 8006abc:	3e01      	subs	r6, #1
 8006abe:	68a3      	ldr	r3, [r4, #8]
 8006ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	60a3      	str	r3, [r4, #8]
 8006ac8:	bb39      	cbnz	r1, 8006b1a <_puts_r+0x9e>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da38      	bge.n	8006b40 <_puts_r+0xc4>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	210a      	movs	r1, #10
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f906 	bl	8006ce4 <__swbuf_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d011      	beq.n	8006b00 <_puts_r+0x84>
 8006adc:	250a      	movs	r5, #10
 8006ade:	e011      	b.n	8006b04 <_puts_r+0x88>
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <_puts_r+0xd4>)
 8006ae2:	429c      	cmp	r4, r3
 8006ae4:	d101      	bne.n	8006aea <_puts_r+0x6e>
 8006ae6:	68ac      	ldr	r4, [r5, #8]
 8006ae8:	e7da      	b.n	8006aa0 <_puts_r+0x24>
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <_puts_r+0xd8>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	bf08      	it	eq
 8006af0:	68ec      	ldreq	r4, [r5, #12]
 8006af2:	e7d5      	b.n	8006aa0 <_puts_r+0x24>
 8006af4:	4621      	mov	r1, r4
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 f958 	bl	8006dac <__swsetup_r>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d0dd      	beq.n	8006abc <_puts_r+0x40>
 8006b00:	f04f 35ff 	mov.w	r5, #4294967295
 8006b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b06:	07da      	lsls	r2, r3, #31
 8006b08:	d405      	bmi.n	8006b16 <_puts_r+0x9a>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	059b      	lsls	r3, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_puts_r+0x9a>
 8006b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b12:	f7ff ff15 	bl	8006940 <__retarget_lock_release_recursive>
 8006b16:	4628      	mov	r0, r5
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	da04      	bge.n	8006b28 <_puts_r+0xac>
 8006b1e:	69a2      	ldr	r2, [r4, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	dc06      	bgt.n	8006b32 <_puts_r+0xb6>
 8006b24:	290a      	cmp	r1, #10
 8006b26:	d004      	beq.n	8006b32 <_puts_r+0xb6>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	6022      	str	r2, [r4, #0]
 8006b2e:	7019      	strb	r1, [r3, #0]
 8006b30:	e7c5      	b.n	8006abe <_puts_r+0x42>
 8006b32:	4622      	mov	r2, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 f8d5 	bl	8006ce4 <__swbuf_r>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d1bf      	bne.n	8006abe <_puts_r+0x42>
 8006b3e:	e7df      	b.n	8006b00 <_puts_r+0x84>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	250a      	movs	r5, #10
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	701d      	strb	r5, [r3, #0]
 8006b4a:	e7db      	b.n	8006b04 <_puts_r+0x88>
 8006b4c:	080072fc 	.word	0x080072fc
 8006b50:	0800731c 	.word	0x0800731c
 8006b54:	080072dc 	.word	0x080072dc

08006b58 <puts>:
 8006b58:	4b02      	ldr	r3, [pc, #8]	; (8006b64 <puts+0xc>)
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	f7ff bf8d 	b.w	8006a7c <_puts_r>
 8006b62:	bf00      	nop
 8006b64:	20000010 	.word	0x20000010

08006b68 <cleanup_glue>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	6809      	ldr	r1, [r1, #0]
 8006b6e:	4605      	mov	r5, r0
 8006b70:	b109      	cbz	r1, 8006b76 <cleanup_glue+0xe>
 8006b72:	f7ff fff9 	bl	8006b68 <cleanup_glue>
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b7e:	f000 bad9 	b.w	8007134 <_free_r>
	...

08006b84 <_reclaim_reent>:
 8006b84:	4b2c      	ldr	r3, [pc, #176]	; (8006c38 <_reclaim_reent+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4283      	cmp	r3, r0
 8006b8a:	b570      	push	{r4, r5, r6, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	d051      	beq.n	8006c34 <_reclaim_reent+0xb0>
 8006b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b92:	b143      	cbz	r3, 8006ba6 <_reclaim_reent+0x22>
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d14a      	bne.n	8006c30 <_reclaim_reent+0xac>
 8006b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	b111      	cbz	r1, 8006ba6 <_reclaim_reent+0x22>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 fac7 	bl	8007134 <_free_r>
 8006ba6:	6961      	ldr	r1, [r4, #20]
 8006ba8:	b111      	cbz	r1, 8006bb0 <_reclaim_reent+0x2c>
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fac2 	bl	8007134 <_free_r>
 8006bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006bb2:	b111      	cbz	r1, 8006bba <_reclaim_reent+0x36>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 fabd 	bl	8007134 <_free_r>
 8006bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006bbc:	b111      	cbz	r1, 8006bc4 <_reclaim_reent+0x40>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fab8 	bl	8007134 <_free_r>
 8006bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006bc6:	b111      	cbz	r1, 8006bce <_reclaim_reent+0x4a>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fab3 	bl	8007134 <_free_r>
 8006bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006bd0:	b111      	cbz	r1, 8006bd8 <_reclaim_reent+0x54>
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 faae 	bl	8007134 <_free_r>
 8006bd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006bda:	b111      	cbz	r1, 8006be2 <_reclaim_reent+0x5e>
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 faa9 	bl	8007134 <_free_r>
 8006be2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006be4:	b111      	cbz	r1, 8006bec <_reclaim_reent+0x68>
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 faa4 	bl	8007134 <_free_r>
 8006bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bee:	b111      	cbz	r1, 8006bf6 <_reclaim_reent+0x72>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 fa9f 	bl	8007134 <_free_r>
 8006bf6:	69a3      	ldr	r3, [r4, #24]
 8006bf8:	b1e3      	cbz	r3, 8006c34 <_reclaim_reent+0xb0>
 8006bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4798      	blx	r3
 8006c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c02:	b1b9      	cbz	r1, 8006c34 <_reclaim_reent+0xb0>
 8006c04:	4620      	mov	r0, r4
 8006c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c0a:	f7ff bfad 	b.w	8006b68 <cleanup_glue>
 8006c0e:	5949      	ldr	r1, [r1, r5]
 8006c10:	b941      	cbnz	r1, 8006c24 <_reclaim_reent+0xa0>
 8006c12:	3504      	adds	r5, #4
 8006c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c16:	2d80      	cmp	r5, #128	; 0x80
 8006c18:	68d9      	ldr	r1, [r3, #12]
 8006c1a:	d1f8      	bne.n	8006c0e <_reclaim_reent+0x8a>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fa89 	bl	8007134 <_free_r>
 8006c22:	e7ba      	b.n	8006b9a <_reclaim_reent+0x16>
 8006c24:	680e      	ldr	r6, [r1, #0]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fa84 	bl	8007134 <_free_r>
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	e7ef      	b.n	8006c10 <_reclaim_reent+0x8c>
 8006c30:	2500      	movs	r5, #0
 8006c32:	e7ef      	b.n	8006c14 <_reclaim_reent+0x90>
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
 8006c36:	bf00      	nop
 8006c38:	20000010 	.word	0x20000010

08006c3c <_sbrk_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	; (8006c58 <_sbrk_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa fc1c 	bl	8001484 <_sbrk>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_sbrk_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_sbrk_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20001824 	.word	0x20001824

08006c5c <__sread>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	460c      	mov	r4, r1
 8006c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c64:	f000 fab2 	bl	80071cc <_read_r>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	bfab      	itete	ge
 8006c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c70:	181b      	addge	r3, r3, r0
 8006c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c76:	bfac      	ite	ge
 8006c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c7a:	81a3      	strhlt	r3, [r4, #12]
 8006c7c:	bd10      	pop	{r4, pc}

08006c7e <__swrite>:
 8006c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c82:	461f      	mov	r7, r3
 8006c84:	898b      	ldrh	r3, [r1, #12]
 8006c86:	05db      	lsls	r3, r3, #23
 8006c88:	4605      	mov	r5, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	d505      	bpl.n	8006c9c <__swrite+0x1e>
 8006c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c94:	2302      	movs	r3, #2
 8006c96:	2200      	movs	r2, #0
 8006c98:	f000 f9c8 	bl	800702c <_lseek_r>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	4632      	mov	r2, r6
 8006caa:	463b      	mov	r3, r7
 8006cac:	4628      	mov	r0, r5
 8006cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb2:	f000 b869 	b.w	8006d88 <_write_r>

08006cb6 <__sseek>:
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	460c      	mov	r4, r1
 8006cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbe:	f000 f9b5 	bl	800702c <_lseek_r>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	bf15      	itete	ne
 8006cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cd2:	81a3      	strheq	r3, [r4, #12]
 8006cd4:	bf18      	it	ne
 8006cd6:	81a3      	strhne	r3, [r4, #12]
 8006cd8:	bd10      	pop	{r4, pc}

08006cda <__sclose>:
 8006cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cde:	f000 b8d3 	b.w	8006e88 <_close_r>
	...

08006ce4 <__swbuf_r>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	4614      	mov	r4, r2
 8006cea:	4605      	mov	r5, r0
 8006cec:	b118      	cbz	r0, 8006cf6 <__swbuf_r+0x12>
 8006cee:	6983      	ldr	r3, [r0, #24]
 8006cf0:	b90b      	cbnz	r3, 8006cf6 <__swbuf_r+0x12>
 8006cf2:	f7ff fd61 	bl	80067b8 <__sinit>
 8006cf6:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <__swbuf_r+0x98>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	d12b      	bne.n	8006d54 <__swbuf_r+0x70>
 8006cfc:	686c      	ldr	r4, [r5, #4]
 8006cfe:	69a3      	ldr	r3, [r4, #24]
 8006d00:	60a3      	str	r3, [r4, #8]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	071a      	lsls	r2, r3, #28
 8006d06:	d52f      	bpl.n	8006d68 <__swbuf_r+0x84>
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	b36b      	cbz	r3, 8006d68 <__swbuf_r+0x84>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1ac0      	subs	r0, r0, r3
 8006d12:	6963      	ldr	r3, [r4, #20]
 8006d14:	b2f6      	uxtb	r6, r6
 8006d16:	4283      	cmp	r3, r0
 8006d18:	4637      	mov	r7, r6
 8006d1a:	dc04      	bgt.n	8006d26 <__swbuf_r+0x42>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f948 	bl	8006fb4 <_fflush_r>
 8006d24:	bb30      	cbnz	r0, 8006d74 <__swbuf_r+0x90>
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	60a3      	str	r3, [r4, #8]
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	6022      	str	r2, [r4, #0]
 8006d32:	701e      	strb	r6, [r3, #0]
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	3001      	adds	r0, #1
 8006d38:	4283      	cmp	r3, r0
 8006d3a:	d004      	beq.n	8006d46 <__swbuf_r+0x62>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	07db      	lsls	r3, r3, #31
 8006d40:	d506      	bpl.n	8006d50 <__swbuf_r+0x6c>
 8006d42:	2e0a      	cmp	r6, #10
 8006d44:	d104      	bne.n	8006d50 <__swbuf_r+0x6c>
 8006d46:	4621      	mov	r1, r4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 f933 	bl	8006fb4 <_fflush_r>
 8006d4e:	b988      	cbnz	r0, 8006d74 <__swbuf_r+0x90>
 8006d50:	4638      	mov	r0, r7
 8006d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <__swbuf_r+0x9c>)
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d101      	bne.n	8006d5e <__swbuf_r+0x7a>
 8006d5a:	68ac      	ldr	r4, [r5, #8]
 8006d5c:	e7cf      	b.n	8006cfe <__swbuf_r+0x1a>
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <__swbuf_r+0xa0>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	bf08      	it	eq
 8006d64:	68ec      	ldreq	r4, [r5, #12]
 8006d66:	e7ca      	b.n	8006cfe <__swbuf_r+0x1a>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f000 f81e 	bl	8006dac <__swsetup_r>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d0cb      	beq.n	8006d0c <__swbuf_r+0x28>
 8006d74:	f04f 37ff 	mov.w	r7, #4294967295
 8006d78:	e7ea      	b.n	8006d50 <__swbuf_r+0x6c>
 8006d7a:	bf00      	nop
 8006d7c:	080072fc 	.word	0x080072fc
 8006d80:	0800731c 	.word	0x0800731c
 8006d84:	080072dc 	.word	0x080072dc

08006d88 <_write_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d07      	ldr	r5, [pc, #28]	; (8006da8 <_write_r+0x20>)
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	4608      	mov	r0, r1
 8006d90:	4611      	mov	r1, r2
 8006d92:	2200      	movs	r2, #0
 8006d94:	602a      	str	r2, [r5, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	f7fa fb23 	bl	80013e2 <_write>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_write_r+0x1e>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_write_r+0x1e>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20001824 	.word	0x20001824

08006dac <__swsetup_r>:
 8006dac:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <__swsetup_r+0xcc>)
 8006dae:	b570      	push	{r4, r5, r6, lr}
 8006db0:	681d      	ldr	r5, [r3, #0]
 8006db2:	4606      	mov	r6, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	b125      	cbz	r5, 8006dc2 <__swsetup_r+0x16>
 8006db8:	69ab      	ldr	r3, [r5, #24]
 8006dba:	b913      	cbnz	r3, 8006dc2 <__swsetup_r+0x16>
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f7ff fcfb 	bl	80067b8 <__sinit>
 8006dc2:	4b2e      	ldr	r3, [pc, #184]	; (8006e7c <__swsetup_r+0xd0>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	d10f      	bne.n	8006de8 <__swsetup_r+0x3c>
 8006dc8:	686c      	ldr	r4, [r5, #4]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd0:	0719      	lsls	r1, r3, #28
 8006dd2:	d42c      	bmi.n	8006e2e <__swsetup_r+0x82>
 8006dd4:	06dd      	lsls	r5, r3, #27
 8006dd6:	d411      	bmi.n	8006dfc <__swsetup_r+0x50>
 8006dd8:	2309      	movs	r3, #9
 8006dda:	6033      	str	r3, [r6, #0]
 8006ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295
 8006de6:	e03e      	b.n	8006e66 <__swsetup_r+0xba>
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <__swsetup_r+0xd4>)
 8006dea:	429c      	cmp	r4, r3
 8006dec:	d101      	bne.n	8006df2 <__swsetup_r+0x46>
 8006dee:	68ac      	ldr	r4, [r5, #8]
 8006df0:	e7eb      	b.n	8006dca <__swsetup_r+0x1e>
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <__swsetup_r+0xd8>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	bf08      	it	eq
 8006df8:	68ec      	ldreq	r4, [r5, #12]
 8006dfa:	e7e6      	b.n	8006dca <__swsetup_r+0x1e>
 8006dfc:	0758      	lsls	r0, r3, #29
 8006dfe:	d512      	bpl.n	8006e26 <__swsetup_r+0x7a>
 8006e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e02:	b141      	cbz	r1, 8006e16 <__swsetup_r+0x6a>
 8006e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d002      	beq.n	8006e12 <__swsetup_r+0x66>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 f991 	bl	8007134 <_free_r>
 8006e12:	2300      	movs	r3, #0
 8006e14:	6363      	str	r3, [r4, #52]	; 0x34
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f043 0308 	orr.w	r3, r3, #8
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	b94b      	cbnz	r3, 8006e46 <__swsetup_r+0x9a>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d003      	beq.n	8006e46 <__swsetup_r+0x9a>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4630      	mov	r0, r6
 8006e42:	f000 f92b 	bl	800709c <__smakebuf_r>
 8006e46:	89a0      	ldrh	r0, [r4, #12]
 8006e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e4c:	f010 0301 	ands.w	r3, r0, #1
 8006e50:	d00a      	beq.n	8006e68 <__swsetup_r+0xbc>
 8006e52:	2300      	movs	r3, #0
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6963      	ldr	r3, [r4, #20]
 8006e58:	425b      	negs	r3, r3
 8006e5a:	61a3      	str	r3, [r4, #24]
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	b943      	cbnz	r3, 8006e72 <__swsetup_r+0xc6>
 8006e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e64:	d1ba      	bne.n	8006ddc <__swsetup_r+0x30>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	0781      	lsls	r1, r0, #30
 8006e6a:	bf58      	it	pl
 8006e6c:	6963      	ldrpl	r3, [r4, #20]
 8006e6e:	60a3      	str	r3, [r4, #8]
 8006e70:	e7f4      	b.n	8006e5c <__swsetup_r+0xb0>
 8006e72:	2000      	movs	r0, #0
 8006e74:	e7f7      	b.n	8006e66 <__swsetup_r+0xba>
 8006e76:	bf00      	nop
 8006e78:	20000010 	.word	0x20000010
 8006e7c:	080072fc 	.word	0x080072fc
 8006e80:	0800731c 	.word	0x0800731c
 8006e84:	080072dc 	.word	0x080072dc

08006e88 <_close_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_close_r+0x1c>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7fa fac1 	bl	800141a <_close>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_close_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_close_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20001824 	.word	0x20001824

08006ea8 <__sflush_r>:
 8006ea8:	898a      	ldrh	r2, [r1, #12]
 8006eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eae:	4605      	mov	r5, r0
 8006eb0:	0710      	lsls	r0, r2, #28
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	d458      	bmi.n	8006f68 <__sflush_r+0xc0>
 8006eb6:	684b      	ldr	r3, [r1, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc05      	bgt.n	8006ec8 <__sflush_r+0x20>
 8006ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dc02      	bgt.n	8006ec8 <__sflush_r+0x20>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	d0f9      	beq.n	8006ec2 <__sflush_r+0x1a>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ed4:	682f      	ldr	r7, [r5, #0]
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	d032      	beq.n	8006f40 <__sflush_r+0x98>
 8006eda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	075a      	lsls	r2, r3, #29
 8006ee0:	d505      	bpl.n	8006eee <__sflush_r+0x46>
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	1ac0      	subs	r0, r0, r3
 8006ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ee8:	b10b      	cbz	r3, 8006eee <__sflush_r+0x46>
 8006eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eec:	1ac0      	subs	r0, r0, r3
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ef4:	6a21      	ldr	r1, [r4, #32]
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b0      	blx	r6
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	d106      	bne.n	8006f0e <__sflush_r+0x66>
 8006f00:	6829      	ldr	r1, [r5, #0]
 8006f02:	291d      	cmp	r1, #29
 8006f04:	d82c      	bhi.n	8006f60 <__sflush_r+0xb8>
 8006f06:	4a2a      	ldr	r2, [pc, #168]	; (8006fb0 <__sflush_r+0x108>)
 8006f08:	40ca      	lsrs	r2, r1
 8006f0a:	07d6      	lsls	r6, r2, #31
 8006f0c:	d528      	bpl.n	8006f60 <__sflush_r+0xb8>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	6062      	str	r2, [r4, #4]
 8006f12:	04d9      	lsls	r1, r3, #19
 8006f14:	6922      	ldr	r2, [r4, #16]
 8006f16:	6022      	str	r2, [r4, #0]
 8006f18:	d504      	bpl.n	8006f24 <__sflush_r+0x7c>
 8006f1a:	1c42      	adds	r2, r0, #1
 8006f1c:	d101      	bne.n	8006f22 <__sflush_r+0x7a>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	b903      	cbnz	r3, 8006f24 <__sflush_r+0x7c>
 8006f22:	6560      	str	r0, [r4, #84]	; 0x54
 8006f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f26:	602f      	str	r7, [r5, #0]
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	d0ca      	beq.n	8006ec2 <__sflush_r+0x1a>
 8006f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f30:	4299      	cmp	r1, r3
 8006f32:	d002      	beq.n	8006f3a <__sflush_r+0x92>
 8006f34:	4628      	mov	r0, r5
 8006f36:	f000 f8fd 	bl	8007134 <_free_r>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006f3e:	e7c1      	b.n	8006ec4 <__sflush_r+0x1c>
 8006f40:	6a21      	ldr	r1, [r4, #32]
 8006f42:	2301      	movs	r3, #1
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b0      	blx	r6
 8006f48:	1c41      	adds	r1, r0, #1
 8006f4a:	d1c7      	bne.n	8006edc <__sflush_r+0x34>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0c4      	beq.n	8006edc <__sflush_r+0x34>
 8006f52:	2b1d      	cmp	r3, #29
 8006f54:	d001      	beq.n	8006f5a <__sflush_r+0xb2>
 8006f56:	2b16      	cmp	r3, #22
 8006f58:	d101      	bne.n	8006f5e <__sflush_r+0xb6>
 8006f5a:	602f      	str	r7, [r5, #0]
 8006f5c:	e7b1      	b.n	8006ec2 <__sflush_r+0x1a>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	e7ad      	b.n	8006ec4 <__sflush_r+0x1c>
 8006f68:	690f      	ldr	r7, [r1, #16]
 8006f6a:	2f00      	cmp	r7, #0
 8006f6c:	d0a9      	beq.n	8006ec2 <__sflush_r+0x1a>
 8006f6e:	0793      	lsls	r3, r2, #30
 8006f70:	680e      	ldr	r6, [r1, #0]
 8006f72:	bf08      	it	eq
 8006f74:	694b      	ldreq	r3, [r1, #20]
 8006f76:	600f      	str	r7, [r1, #0]
 8006f78:	bf18      	it	ne
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	eba6 0807 	sub.w	r8, r6, r7
 8006f80:	608b      	str	r3, [r1, #8]
 8006f82:	f1b8 0f00 	cmp.w	r8, #0
 8006f86:	dd9c      	ble.n	8006ec2 <__sflush_r+0x1a>
 8006f88:	6a21      	ldr	r1, [r4, #32]
 8006f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f8c:	4643      	mov	r3, r8
 8006f8e:	463a      	mov	r2, r7
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b0      	blx	r6
 8006f94:	2800      	cmp	r0, #0
 8006f96:	dc06      	bgt.n	8006fa6 <__sflush_r+0xfe>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	e78e      	b.n	8006ec4 <__sflush_r+0x1c>
 8006fa6:	4407      	add	r7, r0
 8006fa8:	eba8 0800 	sub.w	r8, r8, r0
 8006fac:	e7e9      	b.n	8006f82 <__sflush_r+0xda>
 8006fae:	bf00      	nop
 8006fb0:	20400001 	.word	0x20400001

08006fb4 <_fflush_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	4605      	mov	r5, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	b913      	cbnz	r3, 8006fc4 <_fflush_r+0x10>
 8006fbe:	2500      	movs	r5, #0
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	b118      	cbz	r0, 8006fce <_fflush_r+0x1a>
 8006fc6:	6983      	ldr	r3, [r0, #24]
 8006fc8:	b90b      	cbnz	r3, 8006fce <_fflush_r+0x1a>
 8006fca:	f7ff fbf5 	bl	80067b8 <__sinit>
 8006fce:	4b14      	ldr	r3, [pc, #80]	; (8007020 <_fflush_r+0x6c>)
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	d11b      	bne.n	800700c <_fflush_r+0x58>
 8006fd4:	686c      	ldr	r4, [r5, #4]
 8006fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0ef      	beq.n	8006fbe <_fflush_r+0xa>
 8006fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fe0:	07d0      	lsls	r0, r2, #31
 8006fe2:	d404      	bmi.n	8006fee <_fflush_r+0x3a>
 8006fe4:	0599      	lsls	r1, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_fflush_r+0x3a>
 8006fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fea:	f7ff fca8 	bl	800693e <__retarget_lock_acquire_recursive>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f7ff ff59 	bl	8006ea8 <__sflush_r>
 8006ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ff8:	07da      	lsls	r2, r3, #31
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	d4e0      	bmi.n	8006fc0 <_fflush_r+0xc>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	059b      	lsls	r3, r3, #22
 8007002:	d4dd      	bmi.n	8006fc0 <_fflush_r+0xc>
 8007004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007006:	f7ff fc9b 	bl	8006940 <__retarget_lock_release_recursive>
 800700a:	e7d9      	b.n	8006fc0 <_fflush_r+0xc>
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <_fflush_r+0x70>)
 800700e:	429c      	cmp	r4, r3
 8007010:	d101      	bne.n	8007016 <_fflush_r+0x62>
 8007012:	68ac      	ldr	r4, [r5, #8]
 8007014:	e7df      	b.n	8006fd6 <_fflush_r+0x22>
 8007016:	4b04      	ldr	r3, [pc, #16]	; (8007028 <_fflush_r+0x74>)
 8007018:	429c      	cmp	r4, r3
 800701a:	bf08      	it	eq
 800701c:	68ec      	ldreq	r4, [r5, #12]
 800701e:	e7da      	b.n	8006fd6 <_fflush_r+0x22>
 8007020:	080072fc 	.word	0x080072fc
 8007024:	0800731c 	.word	0x0800731c
 8007028:	080072dc 	.word	0x080072dc

0800702c <_lseek_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_lseek_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fa fa14 	bl	8001468 <_lseek>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_lseek_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_lseek_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20001824 	.word	0x20001824

08007050 <__swhatbuf_r>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	460e      	mov	r6, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2900      	cmp	r1, #0
 800705a:	b096      	sub	sp, #88	; 0x58
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	da08      	bge.n	8007074 <__swhatbuf_r+0x24>
 8007062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	061a      	lsls	r2, r3, #24
 800706c:	d410      	bmi.n	8007090 <__swhatbuf_r+0x40>
 800706e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007072:	e00e      	b.n	8007092 <__swhatbuf_r+0x42>
 8007074:	466a      	mov	r2, sp
 8007076:	f000 f8bb 	bl	80071f0 <_fstat_r>
 800707a:	2800      	cmp	r0, #0
 800707c:	dbf1      	blt.n	8007062 <__swhatbuf_r+0x12>
 800707e:	9a01      	ldr	r2, [sp, #4]
 8007080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007088:	425a      	negs	r2, r3
 800708a:	415a      	adcs	r2, r3
 800708c:	602a      	str	r2, [r5, #0]
 800708e:	e7ee      	b.n	800706e <__swhatbuf_r+0x1e>
 8007090:	2340      	movs	r3, #64	; 0x40
 8007092:	2000      	movs	r0, #0
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	b016      	add	sp, #88	; 0x58
 8007098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800709c <__smakebuf_r>:
 800709c:	898b      	ldrh	r3, [r1, #12]
 800709e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070a0:	079d      	lsls	r5, r3, #30
 80070a2:	4606      	mov	r6, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	d507      	bpl.n	80070b8 <__smakebuf_r+0x1c>
 80070a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	2301      	movs	r3, #1
 80070b2:	6163      	str	r3, [r4, #20]
 80070b4:	b002      	add	sp, #8
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	ab01      	add	r3, sp, #4
 80070ba:	466a      	mov	r2, sp
 80070bc:	f7ff ffc8 	bl	8007050 <__swhatbuf_r>
 80070c0:	9900      	ldr	r1, [sp, #0]
 80070c2:	4605      	mov	r5, r0
 80070c4:	4630      	mov	r0, r6
 80070c6:	f7ff fc65 	bl	8006994 <_malloc_r>
 80070ca:	b948      	cbnz	r0, 80070e0 <__smakebuf_r+0x44>
 80070cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d0:	059a      	lsls	r2, r3, #22
 80070d2:	d4ef      	bmi.n	80070b4 <__smakebuf_r+0x18>
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	f043 0302 	orr.w	r3, r3, #2
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	e7e3      	b.n	80070a8 <__smakebuf_r+0xc>
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <__smakebuf_r+0x7c>)
 80070e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	6020      	str	r0, [r4, #0]
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	9b00      	ldr	r3, [sp, #0]
 80070f0:	6163      	str	r3, [r4, #20]
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	6120      	str	r0, [r4, #16]
 80070f6:	b15b      	cbz	r3, 8007110 <__smakebuf_r+0x74>
 80070f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fc:	4630      	mov	r0, r6
 80070fe:	f000 f889 	bl	8007214 <_isatty_r>
 8007102:	b128      	cbz	r0, 8007110 <__smakebuf_r+0x74>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	89a0      	ldrh	r0, [r4, #12]
 8007112:	4305      	orrs	r5, r0
 8007114:	81a5      	strh	r5, [r4, #12]
 8007116:	e7cd      	b.n	80070b4 <__smakebuf_r+0x18>
 8007118:	08006751 	.word	0x08006751

0800711c <__malloc_lock>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__malloc_lock+0x8>)
 800711e:	f7ff bc0e 	b.w	800693e <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20001818 	.word	0x20001818

08007128 <__malloc_unlock>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__malloc_unlock+0x8>)
 800712a:	f7ff bc09 	b.w	8006940 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20001818 	.word	0x20001818

08007134 <_free_r>:
 8007134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007136:	2900      	cmp	r1, #0
 8007138:	d044      	beq.n	80071c4 <_free_r+0x90>
 800713a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713e:	9001      	str	r0, [sp, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f1a1 0404 	sub.w	r4, r1, #4
 8007146:	bfb8      	it	lt
 8007148:	18e4      	addlt	r4, r4, r3
 800714a:	f7ff ffe7 	bl	800711c <__malloc_lock>
 800714e:	4a1e      	ldr	r2, [pc, #120]	; (80071c8 <_free_r+0x94>)
 8007150:	9801      	ldr	r0, [sp, #4]
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	b933      	cbnz	r3, 8007164 <_free_r+0x30>
 8007156:	6063      	str	r3, [r4, #4]
 8007158:	6014      	str	r4, [r2, #0]
 800715a:	b003      	add	sp, #12
 800715c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007160:	f7ff bfe2 	b.w	8007128 <__malloc_unlock>
 8007164:	42a3      	cmp	r3, r4
 8007166:	d908      	bls.n	800717a <_free_r+0x46>
 8007168:	6825      	ldr	r5, [r4, #0]
 800716a:	1961      	adds	r1, r4, r5
 800716c:	428b      	cmp	r3, r1
 800716e:	bf01      	itttt	eq
 8007170:	6819      	ldreq	r1, [r3, #0]
 8007172:	685b      	ldreq	r3, [r3, #4]
 8007174:	1949      	addeq	r1, r1, r5
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	e7ed      	b.n	8007156 <_free_r+0x22>
 800717a:	461a      	mov	r2, r3
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	b10b      	cbz	r3, 8007184 <_free_r+0x50>
 8007180:	42a3      	cmp	r3, r4
 8007182:	d9fa      	bls.n	800717a <_free_r+0x46>
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	1855      	adds	r5, r2, r1
 8007188:	42a5      	cmp	r5, r4
 800718a:	d10b      	bne.n	80071a4 <_free_r+0x70>
 800718c:	6824      	ldr	r4, [r4, #0]
 800718e:	4421      	add	r1, r4
 8007190:	1854      	adds	r4, r2, r1
 8007192:	42a3      	cmp	r3, r4
 8007194:	6011      	str	r1, [r2, #0]
 8007196:	d1e0      	bne.n	800715a <_free_r+0x26>
 8007198:	681c      	ldr	r4, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	6053      	str	r3, [r2, #4]
 800719e:	4421      	add	r1, r4
 80071a0:	6011      	str	r1, [r2, #0]
 80071a2:	e7da      	b.n	800715a <_free_r+0x26>
 80071a4:	d902      	bls.n	80071ac <_free_r+0x78>
 80071a6:	230c      	movs	r3, #12
 80071a8:	6003      	str	r3, [r0, #0]
 80071aa:	e7d6      	b.n	800715a <_free_r+0x26>
 80071ac:	6825      	ldr	r5, [r4, #0]
 80071ae:	1961      	adds	r1, r4, r5
 80071b0:	428b      	cmp	r3, r1
 80071b2:	bf04      	itt	eq
 80071b4:	6819      	ldreq	r1, [r3, #0]
 80071b6:	685b      	ldreq	r3, [r3, #4]
 80071b8:	6063      	str	r3, [r4, #4]
 80071ba:	bf04      	itt	eq
 80071bc:	1949      	addeq	r1, r1, r5
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	6054      	str	r4, [r2, #4]
 80071c2:	e7ca      	b.n	800715a <_free_r+0x26>
 80071c4:	b003      	add	sp, #12
 80071c6:	bd30      	pop	{r4, r5, pc}
 80071c8:	2000181c 	.word	0x2000181c

080071cc <_read_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d07      	ldr	r5, [pc, #28]	; (80071ec <_read_r+0x20>)
 80071d0:	4604      	mov	r4, r0
 80071d2:	4608      	mov	r0, r1
 80071d4:	4611      	mov	r1, r2
 80071d6:	2200      	movs	r2, #0
 80071d8:	602a      	str	r2, [r5, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	f7fa f8e4 	bl	80013a8 <_read>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_read_r+0x1e>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_read_r+0x1e>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	20001824 	.word	0x20001824

080071f0 <_fstat_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	; (8007210 <_fstat_r+0x20>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f7fa f918 	bl	8001432 <_fstat>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d102      	bne.n	800720c <_fstat_r+0x1c>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b103      	cbz	r3, 800720c <_fstat_r+0x1c>
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	20001824 	.word	0x20001824

08007214 <_isatty_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_isatty_r+0x1c>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7fa f917 	bl	8001452 <_isatty>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_isatty_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_isatty_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20001824 	.word	0x20001824

08007234 <_init>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	bf00      	nop
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr

08007240 <_fini>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr
